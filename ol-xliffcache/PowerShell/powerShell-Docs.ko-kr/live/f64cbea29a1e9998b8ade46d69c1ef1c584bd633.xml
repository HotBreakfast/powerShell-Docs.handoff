{
  "nodes": [
    {
      "pos": [
        2,
        40
      ],
      "content": "Writing a custom DSC resource with MOF"
    },
    {
      "pos": [
        44,
        102
      ],
      "content": "Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0"
    },
    {
      "content": "In this topic, we will define the schema for a Windows PowerShell Desired State Configuration (DSC) custom resource in a MOF file, and implement the resource in a Windows PowerShell script file.",
      "pos": [
        104,
        298
      ]
    },
    {
      "content": "This custom resource is for creating and maintaining a web site.",
      "pos": [
        299,
        363
      ]
    },
    {
      "pos": [
        368,
        391
      ],
      "content": "Creating the MOF schema"
    },
    {
      "pos": [
        393,
        497
      ],
      "content": "The schema defines the properties of your resource that can be configured by a DSC configuration script."
    },
    {
      "pos": [
        503,
        538
      ],
      "content": "Folder structure for a MOF resource"
    },
    {
      "content": "To implement a DSC custom resource with a MOF schema, create the following folder structure.",
      "pos": [
        540,
        632
      ]
    },
    {
      "content": "The MOF schema is defined in the file Demo_IISWebsite.schema.mof, and the resource script is defined in Demo_IISWebsite.ps1.",
      "pos": [
        633,
        757
      ]
    },
    {
      "content": "Optionally, you can create a module manifest (psd1) file.",
      "pos": [
        758,
        815
      ]
    },
    {
      "pos": [
        1135,
        1305
      ],
      "content": "Note that it is necessary to create a folder named DSCResources under the top-level folder, and that the folder for each resource must have the same name as the resource."
    },
    {
      "pos": [
        1311,
        1339
      ],
      "content": "The contents of the MOF file"
    },
    {
      "content": "Following is an example MOF file that can be used for a custom website resource.",
      "pos": [
        1341,
        1421
      ]
    },
    {
      "content": "To follow this example, save this schema to a file, and call the file <bpt id=\"p1\">*</bpt>Demo_IISWebsite.schema.mof<ept id=\"p1\">*</ept>.",
      "pos": [
        1422,
        1521
      ]
    },
    {
      "pos": [
        1964,
        2007
      ],
      "content": "Note the following about the previous code:"
    },
    {
      "content": "<ph id=\"ph1\">`FriendlyName`</ph> defines the name you can use to refer to this custom resource in DSC configuration scripts.",
      "pos": [
        2011,
        2117
      ]
    },
    {
      "content": "In this example, <ph id=\"ph2\">`Website`</ph> is equivalent to the friendly name <ph id=\"ph3\">`Archive`</ph> for the built-in Archive resource.",
      "pos": [
        2118,
        2224
      ]
    },
    {
      "pos": [
        2227,
        2309
      ],
      "content": "The class you define for your custom resource must derive from <ph id=\"ph4\">`OMI_BaseResource`</ph>."
    },
    {
      "content": "The type qualifier, <ph id=\"ph5\">`[Key]`</ph>, on a property indicates that this property will uniquely identify the resource instance.",
      "pos": [
        2312,
        2429
      ]
    },
    {
      "content": "A <ph id=\"ph6\">`[Key]`</ph> property is also required.",
      "pos": [
        2430,
        2466
      ]
    },
    {
      "pos": [
        2469,
        2616
      ],
      "content": "The <ph id=\"ph7\">`[Required]`</ph> qualifier indicates that the property is required (a value must be specified in any configuration script that uses this resource)."
    },
    {
      "content": "The <ph id=\"ph8\">`[write]`</ph> qualifier indicates that this property is optional when using the custom resource in a configuration script.",
      "pos": [
        2619,
        2741
      ]
    },
    {
      "content": "The <ph id=\"ph9\">`[read]`</ph> qualifier indicates that a property cannot be set by a configuration, and is for reporting purposes only.",
      "pos": [
        2742,
        2860
      ]
    },
    {
      "content": "<ph id=\"ph10\">`Values`</ph> restricts the values that can be assigned to the property to the list of values defined in <ph id=\"ph11\">`ValueMap`</ph>.",
      "pos": [
        2863,
        2974
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p2\">[</bpt>ValueMap and Value Qualifiers<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/desktop/aa393965.aspx)</ept>.",
      "pos": [
        2975,
        3099
      ]
    },
    {
      "pos": [
        3102,
        3239
      ],
      "content": "Including a property called <ph id=\"ph12\">`Ensure`</ph> in your resource is recommended as a way to maintain a consistent style with built-in DSC resources."
    },
    {
      "pos": [
        3242,
        3419
      ],
      "content": "Name the schema file for your custom resource as follows: <ph id=\"ph13\">`classname.schema.mof`</ph>, where <ph id=\"ph14\">`classname`</ph> is the identifier that follows the <ph id=\"ph15\">`class`</ph> keyword in your schema definition."
    },
    {
      "pos": [
        3425,
        3452
      ],
      "content": "Writing the resource script"
    },
    {
      "content": "The resource script implements the logic of the resource.",
      "pos": [
        3454,
        3511
      ]
    },
    {
      "content": "In this module, you must include three functions called <bpt id=\"p3\">**</bpt>Get-TargetResource<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Set-TargetResource<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>Test-TargetResource<ept id=\"p5\">**</ept>.",
      "pos": [
        3512,
        3644
      ]
    },
    {
      "content": "All three functions must take a parameter set that is identical to the set of properties defined in the MOF schema that you created for your resource.",
      "pos": [
        3645,
        3795
      ]
    },
    {
      "content": "In this document, this set of properties is referred to as the “resource properties.”",
      "pos": [
        3796,
        3881
      ]
    },
    {
      "content": "Store these three functions in a file called <ph id=\"ph16\">&lt;ResourceName&gt;</ph>.psm1.",
      "pos": [
        3882,
        3947
      ]
    },
    {
      "content": "In the following example, the functions are stored in a file called Demo_IISWebsite.psm1.",
      "pos": [
        3948,
        4037
      ]
    },
    {
      "content": "<bpt id=\"p6\">**</bpt>Note<ept id=\"p6\">**</ept>: When you run the same configuration script on your resource more than once, you should receive no errors and the resource should remain in the same state as running the script once.",
      "pos": [
        4041,
        4232
      ]
    },
    {
      "content": "To accomplish this, ensure that your <bpt id=\"p7\">**</bpt>Get-TargetResource<ept id=\"p7\">**</ept> and <bpt id=\"p8\">**</bpt>Test-TargetResource<ept id=\"p8\">**</ept> functions leave the resource unchanged, and that invoking the <bpt id=\"p9\">**</bpt>Set-TargetResource<ept id=\"p9\">**</ept> function more than once in a sequence with the same parameter values is always equivalent to invoking it once.",
      "pos": [
        4233,
        4516
      ]
    },
    {
      "content": "In the <bpt id=\"p10\">**</bpt>Get-TargetResource<ept id=\"p10\">**</ept> function implementation, use the key resource property values that are provided as parameters to check the status of the specified resource instance.",
      "pos": [
        4518,
        4697
      ]
    },
    {
      "content": "This function must return a hash table that lists all the resource properties as keys and the actual values of these properties as the corresponding values.",
      "pos": [
        4698,
        4854
      ]
    },
    {
      "content": "The following code provides an example.",
      "pos": [
        4855,
        4894
      ]
    },
    {
      "pos": [
        6672,
        6828
      ],
      "content": "Depending on the values that are specified for the resource properties in the configuration script, the <bpt id=\"p11\">**</bpt>Set-TargetResource<ept id=\"p11\">**</ept> must do one of the following:"
    },
    {
      "pos": [
        6832,
        6852
      ],
      "content": "Create a new website"
    },
    {
      "pos": [
        6855,
        6881
      ],
      "content": "Update an existing website"
    },
    {
      "pos": [
        6884,
        6910
      ],
      "content": "Delete an existing website"
    },
    {
      "pos": [
        6912,
        6951
      ],
      "content": "The following example illustrates this."
    },
    {
      "content": "Finally, the <bpt id=\"p12\">**</bpt>Test-TargetResource<ept id=\"p12\">**</ept> function must take the same parameter set as <bpt id=\"p13\">**</bpt>Get-TargetResource<ept id=\"p13\">**</ept> and <bpt id=\"p14\">**</bpt>Set-TargetResource<ept id=\"p14\">**</ept>.",
      "pos": [
        8165,
        8297
      ]
    },
    {
      "content": "In your implementation of <bpt id=\"p15\">**</bpt>Test-TargetResource<ept id=\"p15\">**</ept>, check the status of the resource instance that is specified in the key parameters.",
      "pos": [
        8298,
        8431
      ]
    },
    {
      "content": "If the actual status of the resource instance does not match the values specified in the parameter set, return <bpt id=\"p16\">**</bpt>$false<ept id=\"p16\">**</ept>.",
      "pos": [
        8432,
        8554
      ]
    },
    {
      "content": "Otherwise, return <bpt id=\"p17\">**</bpt>$true<ept id=\"p17\">**</ept>.",
      "pos": [
        8555,
        8583
      ]
    },
    {
      "pos": [
        8585,
        8652
      ],
      "content": "The following code implements the <bpt id=\"p18\">**</bpt>Test-TargetResource<ept id=\"p18\">**</ept> function."
    },
    {
      "content": "<bpt id=\"p19\">**</bpt>Note<ept id=\"p19\">**</ept>: For easier debugging, use the <bpt id=\"p20\">**</bpt>Write-Verbose<ept id=\"p20\">**</ept> cmdlet in your implementation of the previous three functions.",
      "pos": [
        9479,
        9599
      ]
    },
    {
      "content": "This cmdlet writes text to the verbose message stream.",
      "pos": [
        9600,
        9654
      ]
    },
    {
      "content": "By default, the verbose message stream is not displayed, but you can display it by changing the value of the <bpt id=\"p21\">**</bpt>$VerbosePreference<ept id=\"p21\">**</ept> variable or by using the <bpt id=\"p22\">**</bpt>Verbose<ept id=\"p22\">**</ept> parameter in the DSC cmdlets = new.",
      "pos": [
        9655,
        9859
      ]
    },
    {
      "pos": [
        9865,
        9893
      ],
      "content": "Creating the module manifest"
    },
    {
      "content": "Finally, use the <bpt id=\"p23\">**</bpt>New-ModuleManifest<ept id=\"p23\">**</ept> cmdlet to define a <ph id=\"ph17\">&lt;ResourceName&gt;</ph>.psd1 file for your custom resource module.",
      "pos": [
        9895,
        10011
      ]
    },
    {
      "content": "When you invoke this cmdlet, reference the script module (.psm1) file described in the previous section.",
      "pos": [
        10012,
        10116
      ]
    },
    {
      "content": "Include <bpt id=\"p24\">**</bpt>Get-TargetResource<ept id=\"p24\">**</ept>, <bpt id=\"p25\">**</bpt>Set-TargetResource<ept id=\"p25\">**</ept>, and <bpt id=\"p26\">**</bpt>Test-TargetResource<ept id=\"p26\">**</ept> in the list of functions to export.",
      "pos": [
        10117,
        10236
      ]
    },
    {
      "content": "Following is an example manifest file.",
      "pos": [
        10237,
        10275
      ]
    }
  ],
  "content": "# Writing a custom DSC resource with MOF\n\n> Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nIn this topic, we will define the schema for a Windows PowerShell Desired State Configuration (DSC) custom resource in a MOF file, and implement the resource in a Windows PowerShell script file. This custom resource is for creating and maintaining a web site.\n\n## Creating the MOF schema\n\nThe schema defines the properties of your resource that can be configured by a DSC configuration script.\n\n### Folder structure for a MOF resource\n\nTo implement a DSC custom resource with a MOF schema, create the following folder structure. The MOF schema is defined in the file Demo_IISWebsite.schema.mof, and the resource script is defined in Demo_IISWebsite.ps1. Optionally, you can create a module manifest (psd1) file.\n\n```\n$env: psmodulepath (folder)\n    |- MyDscResources (folder)\n        |- DSCResources (folder)\n            |- Demo_IISWebsite (folder)\n                |- Demo_IISWebsite.psd1 (file, optional)\n                |- Demo_IISWebsite.psm1 (file, required)\n                |- Demo_IISWebsite.schema.mof (file, required)\n```\n\nNote that it is necessary to create a folder named DSCResources under the top-level folder, and that the folder for each resource must have the same name as the resource.\n\n### The contents of the MOF file\n\nFollowing is an example MOF file that can be used for a custom website resource. To follow this example, save this schema to a file, and call the file *Demo_IISWebsite.schema.mof*.\n\n```\n[ClassVersion(\"1.0.0\"), FriendlyName(\"Website\")] \nclass Demo_IISWebsite : OMI_BaseResource\n{\n  [Key] string Name;\n  [Required] string PhysicalPath;\n  [write,ValueMap{\"Present\", \"Absent\"},Values{\"Present\", \"Absent\"}] string Ensure;\n  [write,ValueMap{\"Started\",\"Stopped\"},Values{\"Started\", \"Stopped\"}] string State;\n  [write] string Protocol[];\n  [write] string BindingInfo[];\n  [write] string ApplicationPool;\n  [read] string ID;\n};\n```\n\nNote the following about the previous code:\n\n* `FriendlyName` defines the name you can use to refer to this custom resource in DSC configuration scripts. In this example, `Website` is equivalent to the friendly name `Archive` for the built-in Archive resource.\n* The class you define for your custom resource must derive from `OMI_BaseResource`.\n* The type qualifier, `[Key]`, on a property indicates that this property will uniquely identify the resource instance. A `[Key]` property is also required.\n* The `[Required]` qualifier indicates that the property is required (a value must be specified in any configuration script that uses this resource).\n* The `[write]` qualifier indicates that this property is optional when using the custom resource in a configuration script. The `[read]` qualifier indicates that a property cannot be set by a configuration, and is for reporting purposes only.\n* `Values` restricts the values that can be assigned to the property to the list of values defined in `ValueMap`. For more information, see [ValueMap and Value Qualifiers](https://msdn.microsoft.com/library/windows/desktop/aa393965.aspx).\n* Including a property called `Ensure` in your resource is recommended as a way to maintain a consistent style with built-in DSC resources.\n* Name the schema file for your custom resource as follows: `classname.schema.mof`, where `classname` is the identifier that follows the `class` keyword in your schema definition.\n\n### Writing the resource script\n\nThe resource script implements the logic of the resource. In this module, you must include three functions called **Get-TargetResource**, **Set-TargetResource**, and **Test-TargetResource**. All three functions must take a parameter set that is identical to the set of properties defined in the MOF schema that you created for your resource. In this document, this set of properties is referred to as the “resource properties.” Store these three functions in a file called <ResourceName>.psm1. In the following example, the functions are stored in a file called Demo_IISWebsite.psm1.\n\n> **Note**: When you run the same configuration script on your resource more than once, you should receive no errors and the resource should remain in the same state as running the script once. To accomplish this, ensure that your **Get-TargetResource** and **Test-TargetResource** functions leave the resource unchanged, and that invoking the **Set-TargetResource** function more than once in a sequence with the same parameter values is always equivalent to invoking it once.\n\nIn the **Get-TargetResource** function implementation, use the key resource property values that are provided as parameters to check the status of the specified resource instance. This function must return a hash table that lists all the resource properties as keys and the actual values of these properties as the corresponding values. The following code provides an example.\n\n```powershell\n# DSC uses the Get-TargetResource function to fetch the status of the resource instance specified in the parameters for the target machine\nfunction Get-TargetResource \n{\n    param \n    (       \n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]$Ensure = \"Present\",\n\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$Name,\n\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$PhysicalPath,\n\n        [ValidateSet(\"Started\", \"Stopped\")]\n        [string]$State = \"Started\",\n\n        [string]$ApplicationPool,\n\n        [string[]]$BindingInfo,\n\n        [string[]]$Protocol\n    )\n\n        $getTargetResourceResult = $null;\n\n        <# Insert logic that uses the mandatory parameter values to get the website and assign it to a variable called $Website #>\n        <# Set $ensureResult to \"Present\" if the requested website exists and to \"Absent\" otherwise #>\n\n        # Add all Website properties to the hash table\n        # This simple example assumes that $Website is not null\n        $getTargetResourceResult = @{\n                                      Name = $Website.Name; \n                                        Ensure = $ensureResult;\n                                        PhysicalPath = $Website.physicalPath;\n                                        State = $Website.state;\n                                        ID = $Website.id;\n                                        ApplicationPool = $Website.applicationPool;\n                                        Protocol = $Website.bindings.Collection.protocol;\n                                        Binding = $Website.bindings.Collection.bindingInformation;\n                                    }\n  \n        $getTargetResourceResult;\n}\n```\n\nDepending on the values that are specified for the resource properties in the configuration script, the **Set-TargetResource** must do one of the following:\n\n* Create a new website\n* Update an existing website\n* Delete an existing website\n\nThe following example illustrates this.\n\n```powershell\n# The Set-TargetResource function is used to create, delete or configure a website on the target machine. \nfunction Set-TargetResource \n{\n    [CmdletBinding(SupportsShouldProcess=$true)]\n    param \n    (       \n        [ValidateSet(\"Present\", \"Absent\")]\n        [string]$Ensure = \"Present\",\n\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$Name,\n\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$PhysicalPath,\n\n        [ValidateSet(\"Started\", \"Stopped\")]\n        [string]$State = \"Started\",\n\n        [string]$ApplicationPool,\n\n        [string[]]$BindingInfo,\n\n        [string[]]$Protocol\n    )\n \n    <# If Ensure is set to \"Present\" and the website specified in the mandatory input parameters does not exist, then create it using the specified parameter values #>\n    <# Else, if Ensure is set to \"Present\" and the website does exist, then update its properties to match the values provided in the non-mandatory parameter values #>\n    <# Else, if Ensure is set to \"Absent\" and the website does not exist, then do nothing #>\n    <# Else, if Ensure is set to \"Absent\" and the website does exist, then delete the website #>\n}\n```\n\nFinally, the **Test-TargetResource** function must take the same parameter set as **Get-TargetResource** and **Set-TargetResource**. In your implementation of **Test-TargetResource**, check the status of the resource instance that is specified in the key parameters. If the actual status of the resource instance does not match the values specified in the parameter set, return **$false**. Otherwise, return **$true**.\n\nThe following code implements the **Test-TargetResource** function.\n\n```powershell\nfunction Test-TargetResource\n{\n[CmdletBinding()]\n[OutputType([System.Boolean])]\nparam\n(\n[ValidateSet(\"Present\",\"Absent\")]\n[System.String]\n$Ensure,\n\n[parameter(Mandatory = $true)]\n[System.String]\n$Name,\n\n[parameter(Mandatory = $true)]\n[System.String]\n$PhysicalPath,\n\n[ValidateSet(\"Started\",\"Stopped\")]\n[System.String]\n$State,\n\n[System.String[]]\n$Protocol,\n\n[System.String[]]\n$BindingData,\n\n[System.String]\n$ApplicationPool\n)\n\n#Write-Verbose \"Use this cmdlet to deliver information about command processing.\"\n\n#Write-Debug \"Use this cmdlet to write debug information while troubleshooting.\"\n\n\n#Include logic to \n$result = [System.Boolean]\n#Add logic to test whether the website is present and its status mathes the supplied parameter values. If it does, return true. If it does not, return false.\n$result \n}\n```\n\n**Note**: For easier debugging, use the **Write-Verbose** cmdlet in your implementation of the previous three functions. This cmdlet writes text to the verbose message stream. By default, the verbose message stream is not displayed, but you can display it by changing the value of the **$VerbosePreference** variable or by using the **Verbose** parameter in the DSC cmdlets = new.\n\n### Creating the module manifest\n\nFinally, use the **New-ModuleManifest** cmdlet to define a <ResourceName>.psd1 file for your custom resource module. When you invoke this cmdlet, reference the script module (.psm1) file described in the previous section. Include **Get-TargetResource**, **Set-TargetResource**, and **Test-TargetResource** in the list of functions to export. Following is an example manifest file.\n\n```powershell\n# Module manifest for module 'Demo.IIS.Website'\n#\n# Generated on: 1/10/2013\n#\n\n@{\n\n# Script module or binary module file associated with this manifest.\n# RootModule = ''\n\n# Version number of this module.\nModuleVersion = '1.0'\n\n# ID used to uniquely identify this module\nGUID = '6AB5ED33-E923-41d8-A3A4-5ADDA2B301DE'\n\n# Author of this module\nAuthor = 'Contoso'\n\n# Company or vendor of this module\nCompanyName = 'Contoso'\n\n# Copyright statement for this module\nCopyright = 'Contoso. All rights reserved.'\n\n# Description of the functionality provided by this module\nDescription = 'This Module is used to support the creation and configuration of IIS Websites through Get, Set and Test API on the DSC managed nodes.'\n\n# Minimum version of the Windows PowerShell engine required by this module\nPowerShellVersion = '4.0'\n\n# Minimum version of the common language runtime (CLR) required by this module\nCLRVersion = '4.0'\n\n# Modules that must be imported into the global environment prior to importing this module\nRequiredModules = @(\"WebAdministration\")\n\n# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess\nNestedModules = @(\"Demo_IISWebsite.psm1\")\n\n# Functions to export from this module\nFunctionsToExport = @(\"Get-TargetResource\", \"Set-TargetResource\", \"Test-TargetResource\")\n\n# Cmdlets to export from this module\n#CmdletsToExport = '*'\n\n# HelpInfo URI of this module\n# HelpInfoURI = ''\n}\n```"
}
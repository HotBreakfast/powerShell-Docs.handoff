{"nodes":[{"pos":[12,38],"content":"Working with Registry Keys","needQuote":true,"nodes":[{"content":"Working with Registry Keys","pos":[0,26]}]},{"pos":[71,88],"content":"powershell,cmdlet","needQuote":true,"nodes":[{"content":"powershell,cmdlet","pos":[0,17]}]},{"content":"Working with Registry Keys","pos":[236,262]},{"content":"Because registry keys are items on Windows PowerShell drives, working with them is very similar to working with files and folders.","pos":[263,393]},{"content":"One critical difference is that every item on a registry<ph id=\"ph1\">\\-</ph>based Windows PowerShell drive is a container, just like a folder on a file system drive.","pos":[394,541],"source":" One critical difference is that every item on a registry\\-based Windows PowerShell drive is a container, just like a folder on a file system drive."},{"content":"However, registry entries and their associated values are properties of the items, not distinct items.","pos":[542,644]},{"content":"Listing All Subkeys of a Registry Key","pos":[650,687]},{"content":"You can show all items directly within a registry key by using <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>ChildItem<ept id=\"p1\">**</ept>.","pos":[688,770],"source":"You can show all items directly within a registry key by using **Get\\-ChildItem**."},{"content":"Add the optional <bpt id=\"p1\">**</bpt>Force<ept id=\"p1\">**</ept> parameter to display hidden or system items.","pos":[771,842],"source":" Add the optional **Force** parameter to display hidden or system items."},{"content":"For example, this command displays the items directly within Windows PowerShell drive HKCU:, which corresponds to the HKEY<ph id=\"ph1\">\\_</ph>CURRENT<ph id=\"ph2\">\\_</ph>USER registry hive:","pos":[843,995],"source":" For example, this command displays the items directly within Windows PowerShell drive HKCU:, which corresponds to the HKEY\\_CURRENT\\_USER registry hive:"},{"content":"These are the top<ph id=\"ph1\">\\-</ph>level keys visible under HKEY<ph id=\"ph2\">\\_</ph>CURRENT<ph id=\"ph3\">\\_</ph>USER in the Registry Editor (Regedit.exe).","pos":[1562,1663],"source":"These are the top\\-level keys visible under HKEY\\_CURRENT\\_USER in the Registry Editor (Regedit.exe)."},{"content":"You can also specify this registry path by specifying the registry provider's name, followed by \"<bpt id=\"p1\">**</bpt>::<ept id=\"p1\">**</ept>\".","pos":[1665,1770],"source":"You can also specify this registry path by specifying the registry provider's name, followed by \"**::**\"."},{"content":"The registry provider's full name is <bpt id=\"p1\">**</bpt>Microsoft.PowerShell.Core<ph id=\"ph1\">\\\\</ph>Registry<ept id=\"p1\">**</ept>, but this can be shortened to just <bpt id=\"p2\">**</bpt>Registry<ept id=\"p2\">**</ept>.","pos":[1771,1896],"source":" The registry provider's full name is **Microsoft.PowerShell.Core\\\\Registry**, but this can be shortened to just **Registry**."},{"content":"Any of the following commands will list the contents directly under HKCU:","pos":[1897,1970]},{"content":"These commands list only the directly contained items, much like using Cmd.exe's <bpt id=\"p1\">**</bpt>DIR<ept id=\"p1\">**</ept> command or <bpt id=\"p2\">**</bpt>ls<ept id=\"p2\">**</ept> in a UNIX shell.","pos":[2219,2342],"source":"These commands list only the directly contained items, much like using Cmd.exe's **DIR** command or **ls** in a UNIX shell."},{"content":"To show contained items, you need to specify the <bpt id=\"p1\">**</bpt>Recurse<ept id=\"p1\">**</ept> parameter.","pos":[2343,2414],"source":" To show contained items, you need to specify the **Recurse** parameter."},{"content":"To list all registry keys in HKCU, use the following command (This operation can take an extremely long time.):","pos":[2415,2526]},{"content":"<bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>ChildItem<ept id=\"p1\">**</ept> can perform complex filtering capabilities through its <bpt id=\"p2\">**</bpt>Path<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Filter<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Include<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>Exclude<ept id=\"p5\">**</ept> parameters, but those parameters are typically based only on name.","pos":[2573,2764],"source":"**Get\\-ChildItem** can perform complex filtering capabilities through its **Path**, **Filter**, **Include**, and **Exclude** parameters, but those parameters are typically based only on name."},{"content":"You can perform complex filtering based on other properties of items by using the <bpt id=\"p1\">**</bpt>Where<ph id=\"ph1\">\\-</ph>Object<ept id=\"p1\">**</ept>cmdlet.","pos":[2765,2871],"source":" You can perform complex filtering based on other properties of items by using the **Where\\-Object**cmdlet."},{"content":"The following command finds all keys within HKCU:<ph id=\"ph1\">\\\\</ph>Software that have no more than one subkey and also have exactly four values:","pos":[2872,3000],"source":" The following command finds all keys within HKCU:\\\\Software that have no more than one subkey and also have exactly four values:"},{"content":"Copying Keys","pos":[3141,3153]},{"content":"Copying is done with <bpt id=\"p1\">**</bpt>Copy<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept>.","pos":[3154,3190],"source":"Copying is done with **Copy\\-Item**."},{"content":"The following command copies HKLM:<ph id=\"ph1\">\\\\</ph>SOFTWARE<ph id=\"ph2\">\\\\</ph>Microsoft<ph id=\"ph3\">\\\\</ph>Windows<ph id=\"ph4\">\\\\</ph>CurrentVersion and all of its properties to HKCU:<ph id=\"ph5\">\\\\</ph>, creating a new key named \"CurrentVersion\":","pos":[3191,3352],"source":" The following command copies HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion and all of its properties to HKCU:\\\\, creating a new key named \"CurrentVersion\":"},{"content":"If you examine this new key in the registry editor or by using <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>ChildItem<ept id=\"p1\">**</ept>, you will notice that you do not have copies of the contained subkeys in the new location.","pos":[3448,3620],"source":"If you examine this new key in the registry editor or by using **Get\\-ChildItem**, you will notice that you do not have copies of the contained subkeys in the new location."},{"content":"In order to copy all of the contents of a container, you need to specify the <bpt id=\"p1\">**</bpt>Recurse<ept id=\"p1\">**</ept> parameter.","pos":[3621,3720],"source":" In order to copy all of the contents of a container, you need to specify the **Recurse** parameter."},{"content":"To make the preceding copy command recursive, you would use this command:","pos":[3721,3794]},{"content":"You can still use other tools you already have available to perform filesystem copies.","pos":[3899,3985]},{"content":"Any registry editing tools—including reg.exe, regini.exe, and regedit.exe—and COM objects that support registry editing (such as WScript.Shell and WMI's StdRegProv class) can be used from within Windows PowerShell.","pos":[3986,4200]},{"content":"Creating Keys","pos":[4206,4219]},{"content":"Creating new keys in the registry is simpler than creating a new item in a file system.","pos":[4220,4307]},{"content":"Because all registry keys are containers, you do not need to specify the item type; you simply supply an explicit path, such as:","pos":[4308,4436]},{"content":"You can also use a provider<ph id=\"ph1\">\\-</ph>based path to specify a key:","pos":[4487,4544],"source":"You can also use a provider\\-based path to specify a key:"},{"content":"Deleting Keys","pos":[4599,4612]},{"content":"Deleting items is essentially the same for all providers.","pos":[4613,4670]},{"content":"The following commands will silently remove items:","pos":[4671,4721]},{"content":"Removing All Keys Under a Specific Key","pos":[4833,4871]},{"content":"You can remove contained items by using <bpt id=\"p1\">**</bpt>Remove<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept>, but you will be prompted to confirm the removal if the item contains anything else.","pos":[4872,5013],"source":"You can remove contained items by using **Remove\\-Item**, but you will be prompted to confirm the removal if the item contains anything else."},{"content":"For example, if we attempt to delete the HKCU:<ph id=\"ph1\">\\\\</ph>CurrentVersion subkey we created, we see this:","pos":[5014,5108],"source":" For example, if we attempt to delete the HKCU:\\\\CurrentVersion subkey we created, we see this:"},{"pos":[5455,5536],"content":"To delete contained items without prompting, specify the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\-</ph>Recurse<ept id=\"p1\">**</ept> parameter:","source":"To delete contained items without prompting, specify the **\\-Recurse** parameter:"},{"content":"If you wanted to remove all items within HKCU:<ph id=\"ph1\">\\\\</ph>CurrentVersion but not HKCU:<ph id=\"ph2\">\\\\</ph>CurrentVersion itself, you could instead use:","pos":[5595,5718],"source":"If you wanted to remove all items within HKCU:\\\\CurrentVersion but not HKCU:\\\\CurrentVersion itself, you could instead use:"}],"content":"---\ntitle:  Working with Registry Keys\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  91bfaecd-8684-48b4-ad86-065dfe6dc90a\n---\n\n# Working with Registry Keys\nBecause registry keys are items on Windows PowerShell drives, working with them is very similar to working with files and folders. One critical difference is that every item on a registry\\-based Windows PowerShell drive is a container, just like a folder on a file system drive. However, registry entries and their associated values are properties of the items, not distinct items.\n\n### Listing All Subkeys of a Registry Key\nYou can show all items directly within a registry key by using **Get\\-ChildItem**. Add the optional **Force** parameter to display hidden or system items. For example, this command displays the items directly within Windows PowerShell drive HKCU:, which corresponds to the HKEY\\_CURRENT\\_USER registry hive:\n\n```\nPS> Get-ChildItem -Path hkcu:\\\n\n   Hive: Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\n\nSKC  VC Name                           Property\n---  -- ----                           --------\n  2   0 AppEvents                      {}\n  7  33 Console                        {ColorTable00, ColorTable01, ColorTab...\n 25   1 Control Panel                  {Opened}\n  0   5 Environment                    {APR_ICONV_PATH, INCLUDE, LIB, TEMP...}\n  1   7 Identities                     {Last Username, Last User ...\n  4   0 Keyboard Layout                {}\n...\n```\n\nThese are the top\\-level keys visible under HKEY\\_CURRENT\\_USER in the Registry Editor (Regedit.exe).\n\nYou can also specify this registry path by specifying the registry provider's name, followed by \"**::**\". The registry provider's full name is **Microsoft.PowerShell.Core\\\\Registry**, but this can be shortened to just **Registry**. Any of the following commands will list the contents directly under HKCU:\n\n```\nGet-ChildItem -Path Registry::HKEY_CURRENT_USER\nGet-ChildItem -Path Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\nGet-ChildItem -Path Registry::HKCU\nGet-ChildItem -Path Microsoft.PowerShell.Core\\Registry::HKCU\nGet-ChildItem HKCU:\n```\n\nThese commands list only the directly contained items, much like using Cmd.exe's **DIR** command or **ls** in a UNIX shell. To show contained items, you need to specify the **Recurse** parameter. To list all registry keys in HKCU, use the following command (This operation can take an extremely long time.):\n\n```\nGet-ChildItem -Path hkcu:\\ -Recurse\n```\n\n**Get\\-ChildItem** can perform complex filtering capabilities through its **Path**, **Filter**, **Include**, and **Exclude** parameters, but those parameters are typically based only on name. You can perform complex filtering based on other properties of items by using the **Where\\-Object**cmdlet. The following command finds all keys within HKCU:\\\\Software that have no more than one subkey and also have exactly four values:\n\n```\nGet-ChildItem -Path HKCU:\\Software -Recurse | Where-Object -FilterScript {($_.SubKeyCount -le 1) -and ($_.ValueCount -eq 4) }\n```\n\n### Copying Keys\nCopying is done with **Copy\\-Item**. The following command copies HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion and all of its properties to HKCU:\\\\, creating a new key named \"CurrentVersion\":\n\n```\nCopy-Item -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion' -Destination hkcu:\n```\n\nIf you examine this new key in the registry editor or by using **Get\\-ChildItem**, you will notice that you do not have copies of the contained subkeys in the new location. In order to copy all of the contents of a container, you need to specify the **Recurse** parameter. To make the preceding copy command recursive, you would use this command:\n\n```\nCopy-Item -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion' -Destination hkcu: -Recurse\n```\n\nYou can still use other tools you already have available to perform filesystem copies. Any registry editing tools—including reg.exe, regini.exe, and regedit.exe—and COM objects that support registry editing (such as WScript.Shell and WMI's StdRegProv class) can be used from within Windows PowerShell.\n\n### Creating Keys\nCreating new keys in the registry is simpler than creating a new item in a file system. Because all registry keys are containers, you do not need to specify the item type; you simply supply an explicit path, such as:\n\n```\nNew-Item -Path hkcu:\\software\\_DeleteMe\n```\n\nYou can also use a provider\\-based path to specify a key:\n\n```\nNew-Item -Path Registry::HKCU\\_DeleteMe\n```\n\n### Deleting Keys\nDeleting items is essentially the same for all providers. The following commands will silently remove items:\n\n```\nRemove-Item -Path hkcu:\\Software\\_DeleteMe\nRemove-Item -Path 'hkcu:\\key with spaces in the name'\n```\n\n### Removing All Keys Under a Specific Key\nYou can remove contained items by using **Remove\\-Item**, but you will be prompted to confirm the removal if the item contains anything else. For example, if we attempt to delete the HKCU:\\\\CurrentVersion subkey we created, we see this:\n\n```\nRemove-Item -Path hkcu:\\CurrentVersion\n\nConfirm\nThe item at HKCU:\\CurrentVersion\\AdminDebug has children and the -recurse\nparameter was not specified. If you continue, all children will be removed with\n the item. Are you sure you want to continue?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help\n(default is \"Y\"):\n```\n\nTo delete contained items without prompting, specify the **\\-Recurse** parameter:\n\n```\nRemove-Item -Path HKCU:\\CurrentVersion -Recurse\n```\n\nIf you wanted to remove all items within HKCU:\\\\CurrentVersion but not HKCU:\\\\CurrentVersion itself, you could instead use:\n\n```\nRemove-Item -Path HKCU:\\CurrentVersion\\* -Recurse\n```\n\n"}
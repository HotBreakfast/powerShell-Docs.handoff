{"nodes":[{"content":"DSC Group Resource","pos":[2,20]},{"content":"Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0","pos":[24,82]},{"content":"The Group resource in Windows PowerShell Desired State Configuration (DSC) provides a mechanism to manage local groups on the target node.","pos":[84,222]},{"content":"Syntax","pos":[226,232]},{"content":"Properties","pos":[558,568]},{"content":"Property","pos":[573,581]},{"content":"Description","pos":[586,597]},{"content":"GroupName","pos":[616,625]},{"content":"The name of the group for which you want to ensure a specific state.","pos":[627,695]},{"content":"Credential","pos":[700,710]},{"content":"The credentials required to access remote resources.","pos":[712,764]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: This account must have the appropriate Active Directory permissions to add all non-local accounts to the group; otherwise, an error will occur.","pos":[765,918]},{"content":"Description","pos":[921,932]},{"content":"The description of the group.","pos":[934,963]},{"content":"Ensure","pos":[968,974]},{"content":"Indicates if the group exists.","pos":[976,1006]},{"content":"Set this property to \"Absent\" to ensure that the group does not exist.","pos":[1007,1077]},{"content":"Setting it to \"Present\" (the default value) ensures that the group exists.","pos":[1078,1152]},{"content":"Members","pos":[1157,1164]},{"content":"Use this property to replace the current group membership with the specified members.","pos":[1166,1251]},{"content":"The value of this property is an array of strings of the form <bpt id=\"p1\">*</bpt>Domain<ept id=\"p1\">*</ept><ph id=\"ph1\">\\\\</ph><bpt id=\"p2\">*</bpt>UserName<ept id=\"p2\">*</ept>.","pos":[1252,1335]},{"content":"If you set this property in a configuration, do not use either the <bpt id=\"p1\">**</bpt>MembersToExclude<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>MembersToInclude<ept id=\"p2\">**</ept> property.","pos":[1336,1457]},{"content":"Doing so will generate an error.","pos":[1458,1490]},{"content":"Set the value of this property to an empty string to remove all members from the group.","pos":[1491,1578]},{"content":"MembersToExclude","pos":[1583,1599]},{"content":"Use this property to remove members from the existing membership of the group.","pos":[1601,1679]},{"content":"The value of this property is an array of strings of the form <bpt id=\"p1\">*</bpt>Domain<ept id=\"p1\">*</ept><ph id=\"ph1\">\\\\</ph><bpt id=\"p2\">*</bpt>UserName<ept id=\"p2\">*</ept>.","pos":[1680,1763]},{"content":"If you set this property in a configuration, do not use the <bpt id=\"p1\">**</bpt>Members<ept id=\"p1\">**</ept> property.","pos":[1764,1845]},{"content":"Doing so will generate an error.","pos":[1846,1878]},{"content":"MembersToInclude","pos":[1883,1899]},{"content":"Use this property to add members to the existing membership of the group.","pos":[1901,1974]},{"content":"The value of this property is an array of strings of the form <bpt id=\"p1\">*</bpt>Domain<ept id=\"p1\">*</ept><ph id=\"ph1\">\\\\</ph><bpt id=\"p2\">*</bpt>UserName<ept id=\"p2\">*</ept>.","pos":[1975,2058]},{"content":"If you set this property in a configuration, do not use the <bpt id=\"p1\">**</bpt>Members<ept id=\"p1\">**</ept> property.","pos":[2059,2140]},{"content":"Doing so will generate an error.","pos":[2141,2173]},{"content":"DependsOn","pos":[2178,2187]},{"content":"Indicates that the configuration of another resource must run before this resource is configured.","pos":[2190,2287]},{"content":"For example, if the ID of the resource configuration script block that you want to run first is <bpt id=\"p1\">__</bpt>ResourceName<ept id=\"p1\">__</ept> and its type is <bpt id=\"p2\">__</bpt>ResourceType<ept id=\"p2\">__</ept>, the syntax for using this property is `DependsOn = \"[ResourceType]ResourceName\"``.","pos":[2288,2517]},{"content":"Example 1","pos":[2524,2533]},{"content":"The following example shows how to ensure that a group called \"TestGroup\" is absent.","pos":[2535,2619]},{"content":"Example 2","pos":[2814,2823]},{"content":"The following example shows how to add an Active Directory User to the local administrators group as part of a Multi-Machine Lab build where you are already using a PSCredential for the Local Adminstrator account.","pos":[2824,3037]},{"content":"As this is also used for the Domain Admin Account (after Domain promotion) we then need to convert this existing PSCredential to a Domain Friendly credential to enable us to add a Domain User to the Local Administrators Group on the Member server.","pos":[3038,3285]}],"content":"# DSC Group Resource\n\n> Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nThe Group resource in Windows PowerShell Desired State Configuration (DSC) provides a mechanism to manage local groups on the target node.\n\n##Syntax##\n```\nGroup [string] #ResourceName\n{\n    GroupName = [string]\n    [ Credential = [PSCredential] ]\n    [ Description = [string[]] ]\n    [ Ensure = [string] { Absent | Present }  ]\n    [ Members = [string[]] ]\n    [ MembersToExclude = [string[]] ]\n    [ MembersToInclude = [string[]] ]\n    [ DependsOn = [string[]] ]\n}\n```\n\n## Properties\n\n|  Property  |  Description   | \n|---|---| \n| GroupName| The name of the group for which you want to ensure a specific state.| \n| Credential| The credentials required to access remote resources. **Note**: This account must have the appropriate Active Directory permissions to add all non-local accounts to the group; otherwise, an error will occur.\n| Description| The description of the group.| \n| Ensure| Indicates if the group exists. Set this property to \"Absent\" to ensure that the group does not exist. Setting it to \"Present\" (the default value) ensures that the group exists.| \n| Members| Use this property to replace the current group membership with the specified members. The value of this property is an array of strings of the form *Domain*\\\\*UserName*. If you set this property in a configuration, do not use either the **MembersToExclude** or **MembersToInclude** property. Doing so will generate an error. Set the value of this property to an empty string to remove all members from the group.| \n| MembersToExclude| Use this property to remove members from the existing membership of the group. The value of this property is an array of strings of the form *Domain*\\\\*UserName*. If you set this property in a configuration, do not use the **Members** property. Doing so will generate an error.| \n| MembersToInclude| Use this property to add members to the existing membership of the group. The value of this property is an array of strings of the form *Domain*\\\\*UserName*. If you set this property in a configuration, do not use the **Members** property. Doing so will generate an error.| \n| DependsOn | Indicates that the configuration of another resource must run before this resource is configured. For example, if the ID of the resource configuration script block that you want to run first is __ResourceName__ and its type is __ResourceType__, the syntax for using this property is `DependsOn = \"[ResourceType]ResourceName\"``.| \n\n## Example 1\n\nThe following example shows how to ensure that a group called \"TestGroup\" is absent. \n\n```powershell\nGroup GroupExample\n{\n    # This will remove TestGroup, if present\n    # To create a new group, set Ensure to \"Presentâ€œ\n    Ensure = \"Absent\"\n    GroupName = \"TestGroup\"\n}\n```\n## Example 2\nThe following example shows how to add an Active Directory User to the local administrators group as part of a Multi-Machine Lab build where you are already using a PSCredential for the Local Adminstrator account. As this is also used for the Domain Admin Account (after Domain promotion) we then need to convert this existing PSCredential to a Domain Friendly credential to enable us to add a Domain User to the Local Administrators Group on the Member server.\n\n```powershell\n@{\n    AllNodes = @(\n        @{\n            NodeName = '*';\n            DomainName = 'SubTest.contoso.com';\n         }\n     @{\n            NodeName = 'Box2';\n            AdminAccount = 'Admin-Dave_Alexanderson'   \n      }    \n    )\n}\n                  \n$domain = $node.DomainName.split('.')[0]\n$DCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList (\"$domain\\$($credential.Username)\", $Credential.Password)\n\nGroup AddADUserToLocalAdminGroup\n        {\n            GroupName='Administrators'   \n            Ensure= 'Present'             \n            MembersToInclude= \"$domain\\$($Node.AdminAccount)\"\n            Credential = $dCredential    \n            PsDscRunAsCredential = $DCredential\n        }\n```"}
{"nodes":[{"content":"New Scenarios and Features in WMF 5.1 (Preview)","pos":[13,60]},{"content":"New Scenarios and Features in WMF 5.1 (Preview)","pos":[229,276]},{"content":"Note: This information is preliminary and subject to change.","pos":[282,342]},{"content":"PowerShell Editions","pos":[347,366]},{"content":"Starting with version 5.1, PowerShell is available in different editions which denote varying feature sets and platform compatibility.","pos":[370,504]},{"pos":[508,724],"content":"<bpt id=\"p1\">**</bpt>Desktop Edition:<ept id=\"p1\">**</ept> Built on .NET Framework and provides compatibility with scripts and modules targeting versions of PowerShell running on full footprint editions of Windows such as Server Core and Windows Desktop."},{"pos":[727,934],"content":"<bpt id=\"p1\">**</bpt>Core Edition:<ept id=\"p1\">**</ept> Built on .NET Core and provides compatibility with scripts and modules targeting versions of PowerShell running on reduced footprint editions of Windows such as Nano Server and Windows IoT."},{"content":"Learn more about using PowerShell Editions","pos":[938,980]},{"content":"Determine running edition of PowerShell","pos":[986,1025]},{"content":"Declare a module's compatibility to specific PowerShell versions","pos":[1032,1096]},{"content":"Filter Get-Module results by CompatiblePSEditions","pos":[1103,1152]},{"content":"Prevent script execution unless run on a comaptible edition of PowerShell","pos":[1159,1232]},{"content":"Module Analysis Cache","pos":[1240,1261]},{"pos":[1265,1405],"content":"Starting with WMF 5.1, PowerShell provides control over the file that is used to cache data about a module, such as the commands it exports."},{"content":"By default, this cache is stored in the file <ph id=\"ph1\">`${env:LOCALAPPDATA}\\Microsoft\\Windows\\PowerShell\\ModuleAnalysisCache`</ph>.","pos":[1407,1523]},{"content":"The cache is typically read at startup while searching for a command and is written on a background thread sometime after a module is imported.","pos":[1524,1667]},{"content":"To change the default location of the cache, set the environment variable PSModuleAnalysisCachePath before starting PowerShell.","pos":[1669,1796]},{"content":"Changes to this environment variable will only affect children processes.","pos":[1797,1870]},{"content":"The value should name a full path (including filename) that PowerShell has permission to create and write files.","pos":[1871,1983]},{"content":"To disable the file cache, set this value to an invalid location, for example:","pos":[1984,2062]},{"content":"This sets the path to an invalid device.","pos":[2122,2162]},{"content":"Iff PowerShell can't write to the path, no error is returned, but you can see error reporting via a tracer:","pos":[2163,2270]},{"content":"When writing out the cache, PowerShell will check for modules that no longer exist to avoid an unnecessarily large cache.","pos":[2396,2517]},{"content":"Sometimes these checks are not desirable, in which case you can turn them off by setting","pos":[2518,2606]},{"content":"Setting this environment variable will take effect immediately in the current process.","pos":[2672,2758]},{"content":"Specifying module version","pos":[2762,2787]},{"content":"In WMF 5.1, <ph id=\"ph1\">`using module`</ph> behaves the same way as other module-related constructions in PowerShell.","pos":[2789,2889]},{"content":"Previously, you had no way to specify a particular module version; if there were multiple versions present, this resulted in an error.","pos":[2890,3024]},{"content":"In WMF 5.1:","pos":[3027,3038]},{"content":"You can use <ph id=\"ph1\">`ModuleSpecification`</ph> <bpt id=\"p1\">[</bpt>hashtable<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/jj136290(v=vs.85).aspx)</ept>.","pos":[3042,3153]},{"content":"This hashtable has the same format as <ph id=\"ph1\">`Get-Module -FullyQualifiedName`</ph>.","pos":[3154,3226]},{"pos":[3230,3238],"content":"Example:"},{"pos":[3313,3515],"content":"If there are multiple versions of the module, PowerShell uses the <bpt id=\"p1\">**</bpt>same resolution logic<ept id=\"p1\">**</ept> as <ph id=\"ph1\">`Import-Module`</ph> and doesn't return an error--the same behavior as <ph id=\"ph2\">`Import-Module`</ph> and <ph id=\"ph3\">`Import-DscResource`</ph>."},{"content":"PowerShell console improvements","pos":[3520,3551]},{"content":"The following changes have been made to Powershell.exe in WMF 5.1 to improve the console experience:","pos":[3553,3653]},{"content":"VT100 support","pos":[3658,3671]},{"content":"Windows 10 added support for <bpt id=\"p1\">[</bpt>VT100 escape sequences<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/desktop/mt638032(v=vs.85).aspx)</ept>.","pos":[3673,3808]},{"content":"PowerShell will ignore certain VT100 formatting escape sequences when calculating table widths.","pos":[3809,3904]},{"content":"PowerShell also added a new API that can be used in formatting code to determine if VT100 is supported.","pos":[3906,4009]},{"content":"For example:","pos":[4010,4022]},{"content":"Here is a complete <bpt id=\"p1\">[</bpt>example<ept id=\"p1\">](https://gist.github.com/lzybkr/dcb973dccd54900b67783c48083c28f7)</ept> that can be used to highlight matches from Select-String.","pos":[4167,4318]},{"content":"Save the example in a file named <ph id=\"ph1\">`MatchInfo.format.ps1xml`</ph>, then to use it, in your profile or elsewhere, run <ph id=\"ph2\">`Update-FormatData -Prepend MatchInfo.format.ps1xml`</ph>.","pos":[4319,4482]},{"content":"Note that VT100 escape sequences are only supported starting with the Windows 10 Anniversary update; they are not supported on earlier systems.","pos":[4484,4627]},{"content":"Vi mode support in PSReadline","pos":[4636,4665]},{"content":"<bpt id=\"p1\">[</bpt>PSReadline<ept id=\"p1\">](https://github.com/lzybkr/PSReadLine)</ept> adds support for vi mode.","pos":[4667,4743]},{"content":"To use vi mode, run <ph id=\"ph1\">`Set-PSReadline -EditMode vi`</ph>.","pos":[4744,4794]},{"content":"Redirected stdin w/ interactive input","pos":[4800,4837]},{"pos":[4840,4993],"content":"In earlier versions, starting PowerShell with <ph id=\"ph1\">`powershell -File -`</ph> was required when stdin was redirected and you wanted to enter commands interactively."},{"pos":[4995,5126],"content":"With WMF 5.1, this hard to discover option is no longer necessary, you can start powershell without any options, e.g. <ph id=\"ph1\">`powershell`</ph>."},{"content":"Note that PSReadline does not currently supported redirected stdin, and the builtin commanding line editing experience with redirected stdin is extremely limited, e.g. arrow keys don't work.","pos":[5128,5318]},{"content":"A future release of PSReadline should address this issue.","pos":[5320,5377]},{"content":"PowerShell engine improvements","pos":[5384,5414]},{"content":"The following improvements to the core PowerShell engine have been implemented in WMF 5.1:","pos":[5416,5506]},{"content":"Performance","pos":[5512,5523]},{"content":"Performance has improved in some important areas:","pos":[5528,5577]},{"content":"Startup","pos":[5581,5588]},{"content":"Pipelining to cmdlets like ForEach-Object and Where-Object is approximately 50% faster","pos":[5591,5677]},{"content":"Some example improvements (your results may vary depending your your hardware):","pos":[5680,5759]},{"content":"Scenario","pos":[5764,5772]},{"content":"5.0 Time (ms)","pos":[5775,5788]},{"content":"5.1 Time (ms)","pos":[5791,5804]},{"content":"900","pos":[5895,5898]},{"content":"250","pos":[5901,5904]},{"pos":[5909,5935],"content":"First ever PowerShell run:"},{"content":"30000","pos":[5978,5983]},{"content":"13000","pos":[5986,5991]},{"pos":[5996,6025],"content":"Command analysis cache built:"},{"content":"7000","pos":[6068,6072]},{"content":"520","pos":[6075,6078]},{"content":"`1..1000000","pos":[6083,6094]},{"content":"% { }`","pos":[6097,6103]},{"content":"1400","pos":[6106,6110]},{"content":"750","pos":[6113,6116]},{"pos":[6124,6576],"content":"[!NOTE]  \nOne change related to startup might impact some unsupported scenarios. PowerShell no longer\nreads the files `$pshome\\*.ps1xml` - these files have been converted to C# to avoid some file\nand CPU overhead of processing the XML files. The files still exist to support V2 side-by-side,\nso if you change the file contents, it will not have any effect to V5, only V2. Note that changing\nthe contents of these files was never a supported scenario.","leadings":["","> ","","","",""],"nodes":[{"content":"One change related to startup might impact some unsupported scenarios. PowerShell no longer\nreads the files `$pshome\\*.ps1xml` - these files have been converted to C# to avoid some file\nand CPU overhead of processing the XML files. The files still exist to support V2 side-by-side,\nso if you change the file contents, it will not have any effect to V5, only V2. Note that changing\nthe contents of these files was never a supported scenario.","pos":[10,450],"nodes":[{"content":"One change related to startup might impact some unsupported scenarios.","pos":[0,70]},{"content":"PowerShell no longer reads the files <ph id=\"ph1\">`$pshome\\*.ps1xml`</ph> - these files have been converted to C# to avoid some file and CPU overhead of processing the XML files.","pos":[71,231]},{"content":"The files still exist to support V2 side-by-side, so if you change the file contents, it will not have any effect to V5, only V2.","pos":[232,361]},{"content":"Note that changing the contents of these files was never a supported scenario.","pos":[362,440]}]}]},{"content":"Another visible change is how PowerShell caches the exported commands and other information for modules that are installed on a system.","pos":[6578,6713]},{"content":"Previous, this cache was stored in the directory <ph id=\"ph1\">`$env:LOCALAPPDATA\\Microsoft\\Windows\\PowerShell\\CommandAnalysis`</ph>.","pos":[6714,6828]},{"content":"In WMF 5.1, the cache is a single file <ph id=\"ph1\">`$env:LOCALAPPDATA\\Microsoft\\Windows\\PowerShell\\ModuleAnalysisCache`</ph>.","pos":[6829,6937]},{"content":"See <bpt id=\"p1\">[</bpt>analysis_cache.md<ept id=\"p1\">]()</ept> for more details.","pos":[6938,6981]},{"content":"Bug fixes","pos":[6988,6997]},{"content":"The following notable bugs were fixed:","pos":[7002,7040]},{"pos":[7046,7080],"content":"Module auto-discovery fully honors"},{"content":"Module auto-discovery (loading modules automatically without an explicit Import-Module when calling a command) was introduced in WMF 3.","pos":[7106,7241]},{"content":"When introduced, PowerShell checked for commands in <ph id=\"ph1\">`$PSHome\\Modules`</ph> before using <ph id=\"ph2\">`$env:PSModulePath`</ph>.","pos":[7242,7345]},{"content":"WMF 5.1 changes this behavior to honor <ph id=\"ph1\">`$env:PSModulePath`</ph> completely.","pos":[7347,7417]},{"content":"This allows for a user-authored module that defines commands provided by PowerShell (e.g. <ph id=\"ph1\">`Get-ChildItem`</ph>) to be auto-loaded and correctly overriding the built-in command.","pos":[7418,7590]},{"pos":[7596,7633],"content":"File redirection no longer hard-codes"},{"pos":[7659,7861],"content":"In all previous versions of PowerShell, it was impossible to control the file encoding used by the file redirection operator, e.g. <ph id=\"ph1\">`get-childitem &gt; out.txt`</ph> because PowerShell added <ph id=\"ph2\">`-Encoding Unicode`</ph>."},{"pos":[7863,7982],"content":"Starting with WMF 5.1, you can now change the file encoding of redirection by setting <ph id=\"ph1\">`$PSDefaultParameterValues`</ph>, e.g."},{"pos":[8054,8096],"content":"Fixed a regression in accessing members of"},{"content":"A regression introduced in WMF 5.0 broke accessing members of <ph id=\"ph1\">`System.Reflection.RuntimeType`</ph>, e.g. <ph id=\"ph2\">`[int].ImplementedInterfaces`</ph>.","pos":[8131,8261]},{"content":"This bug has been fixed in WMF5.1.","pos":[8262,8296]},{"content":"Fixed some issues with COM objects","pos":[8303,8337]},{"content":"WMF 5.0 introduced a new COM binder for invoking methods on COM objects and accessing properties of COM objects.","pos":[8343,8455]},{"content":"This new binder improved performance significantly but also introduced some bugs which have been fixed in WMF5.1.","pos":[8456,8569]},{"content":"Argument conversions were not always performed correctly","pos":[8576,8632]},{"content":"In the following example:","pos":[8639,8664]},{"pos":[8737,9035],"content":"The SendKeys method expects a string, but PowerShell did not convert the char to a string, deferring the conversion to IDispatch::Invoke, which uses VariantChangeType to do the conversion, which in this example resulted in sending the keys '1', '7', and '3' instead of the expected Volume.Mute key."},{"content":"Enumerable COM objects not always handled correctly","pos":[9042,9093]},{"content":"PowerShell normally enumerates most enumerable objects, but a regression introduced in WMF 5.0 prevented the enumeration of COM objects that implement IEnumerable.","pos":[9100,9263]},{"content":"For example:","pos":[9265,9277]},{"pos":[9447,9579],"content":"In the above example, WMF 5.0 incorrectly wrote the Scripting.Dictionary to the pipeline instead of enumerating the key value pairs."},{"pos":[9598,9628],"content":"was not allowed inside classes"},{"content":"WMF5 introduced classes with validation of type literals used in classes.","pos":[9634,9707]},{"content":"looks like a type literal but is not a true .Net type.","pos":[9721,9775]},{"content":"WMF5 incorrectly reported an error on <ph id=\"ph1\">`[ordered]`</ph> inside a class:","pos":[9777,9842]},{"content":"Help on About topics with multiple versions does not work","pos":[9941,9998]},{"pos":[10004,10231],"content":"Before WMF 5.1, if you had multiple versions of a module installed and they all shared a help topic, for example, about_PSReadline, <ph id=\"ph1\">`help about_PSReadline`</ph> would return multiple topics with no obvious way to view the real help."},{"content":"WMF 5.1 fixes this by returning the help for the latest version of the topic.","pos":[10233,10310]},{"content":"Get-Help does not provide a way to specify which version you want help for.","pos":[10312,10387]},{"content":"To work around this, navigate to the modules directory and view the help directly with a tool like your favorite editor.","pos":[10388,10508]},{"content":"OneGet improvements","pos":[10514,10533]},{"content":"WMF 5.1 includes a number of fixes and improvements to address some of the user experience gaps in the WMF 5.0 release.","pos":[10534,10653]},{"content":"Version alias removed","pos":[10659,10680]},{"content":"<bpt id=\"p1\">**</bpt>Scenario<ept id=\"p1\">**</ept>: If you have version 1.0 and 2.0 of a package, P1, installed on your system, and you want to uninstall version 1.0, you would run \"uninstall-package -name P1 -version 1.0\" and expect version 1.0 to be uninstalled after running the cmdlet.","pos":[10682,10933]},{"content":"However the result is that version 2.0 gets uninstalled.","pos":[10934,10990]},{"content":"This occurs because the \"-version\" parameter is an alias of the \"-minimumversion\" parameter.","pos":[10997,11089]},{"content":"When OneGet is looking for a qualified package with the minimum version of 1.0, it returns the latest version.","pos":[11090,11200]},{"content":"This behavior is expected in normal cases because finding the latest version is usually the desired result.","pos":[11201,11308]},{"content":"However, it should not apply to the uninstall-package case.","pos":[11309,11368]},{"pos":[11374,11467],"content":"<bpt id=\"p1\">**</bpt>Solution<ept id=\"p1\">**</ept>: In WMF 5.1, the -version alias is removed entirely in OneGet and PowerShellGet."},{"content":"Multiple prompts for bootstrapping the NuGet provider","pos":[11473,11526]},{"content":"<bpt id=\"p1\">**</bpt>Scenario<ept id=\"p1\">**</ept>: When you run Find-Module or Install-module or other OneGet cmdlets on your computer for the first time, OneGet tries to bootstrap the NuGet provider.","pos":[11528,11691]},{"content":"It does this because the PowerShellGet provider also uses the NuGet provider to download PowerShell modules.","pos":[11692,11800]},{"content":"OneGet then prompts the user for permission to install the NuGet provider.","pos":[11801,11875]},{"content":"After the user selects \"yes\" for the bootstrapping, the latest version of the NuGet provider will be installed.","pos":[11876,11987]},{"content":"However, in some cases, when you have an old version of NuGet provider installed on your computer, the older version of NuGet sometimes gets loaded first into the PowerShell session (that's the race condition in OneGet).","pos":[11994,12214]},{"content":"However PowerShellGet requires the later version of the NuGet provider to work, so PowerShellGet asks the OneGet for bootstrapping the NuGet provider again.","pos":[12215,12371]},{"content":"This results in multiple prompts for bootstrapping the NuGet provider.","pos":[12372,12442]},{"pos":[12444,12591],"content":"<bpt id=\"p1\">**</bpt>Solution<ept id=\"p1\">**</ept>: In WMF 5.1, OneGet now loads the latest version of the NuGet provider to avoid multiple prompts for bootstrapping the NuGet provider."},{"pos":[12593,12834],"content":"You could also work around this issue by manually deleting the old version of the NuGet provider (NuGet-Anycpu.exe) if exists from $env:ProgramFiles\\PackageManagement\\ProviderAssemblies $env:LOCALAPPDATA\\PackageManagement\\ProviderAssemblies"},{"content":"Support for OneGet on computers with intranet access only","pos":[12840,12897]},{"pos":[12899,13008],"content":"<bpt id=\"p1\">**</bpt>Scenario<ept id=\"p1\">**</ept>: In WMF 5.0, OneGet did not support computers that have only intranet (but not internet) access."},{"pos":[13010,13105],"content":"<bpt id=\"p1\">**</bpt>Solution<ept id=\"p1\">**</ept>: In WMF 5.1, you can follow these steps to allow intranet computers to use OneGet:"},{"content":"Download the NuGet provider using another computer that has an internet connection by using Install-PackageProvider NuGet.","pos":[13110,13232]},{"content":"Find the NuGet provider under either  $env:ProgramFiles\\PackageManagement\\ProviderAssemblies\\nuget  or  $env:LOCALAPPDATA\\PackageManagement\\ProviderAssemblies\\nuget.","pos":[13237,13402]},{"pos":[13408,13601],"content":"Copy the binaries to a folder or network share location that the intranet computer can access, and then install the NuGet provider with \"Install-PackageProvider NuGet -Source <ph id=\"ph1\">&lt;Path to folder&gt;</ph>\"."},{"content":"Event logging improvements","pos":[13607,13633]},{"content":"When you install packages, you are changing the state of the computer.","pos":[13635,13705]},{"content":"In WMF 5.1, OneGet now logs events to the Windows event log for install, uninstall, and save-package activities.","pos":[13706,13818]},{"content":"The Event channel is the same as for PowerShell, that is, Microsoft-Windows-PowerShell, Operational.","pos":[13819,13919]},{"content":"Support for basic authentication","pos":[13924,13956]},{"content":"In WMF 5.1, OneGet supports finding and installing packages from a repository that requires basic authentication.","pos":[13958,14071]},{"content":"You can supply your credentials to the Find-Package and Install-Package cmdlets.","pos":[14072,14152]},{"content":"For example:","pos":[14153,14165]},{"content":"Support for using OneGet behind a proxy","pos":[14262,14301]},{"content":"In WMF 5.1, OneGet now takes new proxy parameters: -ProxyCredential and -Proxy.","pos":[14303,14382]},{"content":"Using these parameters, you can specify the proxy URL and credentials to OneGet cmdlets.","pos":[14383,14471]},{"content":"By default, system proxy settings are used.","pos":[14472,14515]},{"content":"For example:","pos":[14516,14528]}],"content":"---\ntitle:   New Scenarios and Features in WMF 5.1 (Preview)\nms.date:  2016-07-06\nkeywords:  PowerShell, DSC, WMF\ndescription:  \nms.topic:  article\nauthor:  keithb\nmanager:  dongill\nms.prod:  powershell\nms.technology: WMF\n---\n\n# New Scenarios and Features in WMF 5.1 (Preview) #\n\n> Note: This information is preliminary and subject to change.\n\n## PowerShell Editions ##\nStarting with version 5.1, PowerShell is available in different editions which denote varying feature sets and platform compatibility.\n\n- **Desktop Edition:** Built on .NET Framework and provides compatibility with scripts and modules targeting versions of PowerShell running on full footprint editions of Windows such as Server Core and Windows Desktop.\n- **Core Edition:** Built on .NET Core and provides compatibility with scripts and modules targeting versions of PowerShell running on reduced footprint editions of Windows such as Nano Server and Windows IoT.\n\n**Learn more about using PowerShell Editions**\n- [Determine running edition of PowerShell]()\n- [Declare a module's compatibility to specific PowerShell versions]()\n- [Filter Get-Module results by CompatiblePSEditions]()\n- [Prevent script execution unless run on a comaptible edition of PowerShell]()\n\n## Module Analysis Cache ##\nStarting with WMF 5.1, PowerShell provides control\nover the file that is used to cache data about a module, such as the commands it exports.\n\nBy default, this cache is stored in the file `${env:LOCALAPPDATA}\\Microsoft\\Windows\\PowerShell\\ModuleAnalysisCache`.\nThe cache is typically read at startup while searching for a command\nand is written on a background thread sometime after a module is imported.\n\nTo change the default location of the cache, set the environment variable PSModuleAnalysisCachePath\nbefore starting PowerShell. Changes to this environment variable will only affect children processes.\nThe value should name a full path (including filename) that PowerShell has permission to create and write files.\nTo disable the file cache, set this value to an invalid location, for example:\n\n```PowerShell\n$env:PSModuleAnalysisCachePath = 'nul'\n```\n\nThis sets the path to an invalid device. Iff PowerShell can't write to the path, no error is returned, but you can see error reporting via a tracer:\n\n```PowerShell\nTrace-Command -PSHost -Name Modules -Expression { Import-Module Microsoft.PowerShell.Management -Force }\n```\n\nWhen writing out the cache, PowerShell will check for modules that no longer exist\nto avoid an unnecessarily large cache.\nSometimes these checks are not desirable, in which case you can turn them off by setting\n\n```PowerShell\n$env:PSDisableModuleAnalysisCacheCleanup = 1\n```\n\nSetting this environment variable will take effect immediately in the current process.\n\n##Specifying module version\n\nIn WMF 5.1, `using module` behaves the same way as other module-related constructions in PowerShell. Previously, you had no way to specify a particular module version; if there were multiple versions present, this resulted in an error.\n\n\nIn WMF 5.1:\n\n* You can use `ModuleSpecification` [hashtable](https://msdn.microsoft.com/en-us/library/jj136290(v=vs.85).aspx). \nThis hashtable has the same format as `Get-Module -FullyQualifiedName`.\n\n**Example:** `using module @{ModuleName = 'PSReadLine'; RequiredVersion = '1.1'}`\n\n* If there are multiple versions of the module, PowerShell uses the **same resolution logic** as `Import-Module` and doesn't return an error--the same behavior as `Import-Module` and `Import-DscResource`.\n\n## PowerShell console improvements\n\nThe following changes have been made to Powershell.exe in WMF 5.1 to improve the console experience:\n\n###VT100 support\n\nWindows 10 added support for [VT100 escape sequences](https://msdn.microsoft.com/en-us/library/windows/desktop/mt638032(v=vs.85).aspx).\nPowerShell will ignore certain VT100 formatting escape sequences when calculating table widths.\n\nPowerShell also added a new API that can be used in formatting code to determine if VT100 is supported. For example:\n\n```\nif ($host.UI.SupportsVirtualTerminal)\n{\n    $esc = [char]0x1b\n    \"A yellow ${esc}[93mhello${esc}[0m\"\n}\nelse\n{\n    \"A default hello\"\n}\n```\nHere is a complete [example](https://gist.github.com/lzybkr/dcb973dccd54900b67783c48083c28f7) that can be used to highlight matches from Select-String.\nSave the example in a file named `MatchInfo.format.ps1xml`, then to use it, in your profile or elsewhere, run `Update-FormatData -Prepend MatchInfo.format.ps1xml`.\n\nNote that VT100 escape sequences are only supported starting with the Windows 10 Anniversary update; they are not supported on earlier systems.   \n\n### Vi mode support in PSReadline\n\n[PSReadline](https://github.com/lzybkr/PSReadLine) adds support for vi mode. To use vi mode, run `Set-PSReadline -EditMode vi`.\n\n### Redirected stdin w/ interactive input \n\nIn earlier versions, starting PowerShell with `powershell -File -` was required when stdin was redirected and\nyou wanted to enter commands interactively.\n\nWith WMF 5.1, this hard to discover option is no longer necessary, you can start powershell without any options, e.g. `powershell`.\n\nNote that PSReadline does not currently supported redirected stdin, and the builtin commanding line editing experience with redirected\nstdin is extremely limited, e.g. arrow keys don't work.  A future release of PSReadline should address this issue.   \n\n##PowerShell engine improvements\n\nThe following improvements to the core PowerShell engine have been implemented in WMF 5.1:\n\n\n## Performance ##\n\nPerformance has improved in some important areas:\n\n- Startup\n- Pipelining to cmdlets like ForEach-Object and Where-Object is approximately 50% faster \n\nSome example improvements (your results may vary depending your your hardware): \n\n| Scenario | 5.0 Time (ms) | 5.1 Time (ms) |\n| -------- | :---------------: | :---------------: |\n| `powershell -command \"echo 1\"` | 900 | 250 |\n| First ever PowerShell run: `powershell -command \"Unknown-Command\"` | 30000 | 13000 |\n| Command analysis cache built: `powershell -command \"Unknown-Command\"` | 7000 | 520 |\n| `1..1000000 | % { }` | 1400 | 750 |\n  \n> [!NOTE]  \n> One change related to startup might impact some unsupported scenarios. PowerShell no longer\nreads the files `$pshome\\*.ps1xml` - these files have been converted to C# to avoid some file\nand CPU overhead of processing the XML files. The files still exist to support V2 side-by-side,\nso if you change the file contents, it will not have any effect to V5, only V2. Note that changing\nthe contents of these files was never a supported scenario.\n\nAnother visible change is how PowerShell caches the exported commands and other information for\nmodules that are installed on a system. Previous, this cache was stored in the directory\n`$env:LOCALAPPDATA\\Microsoft\\Windows\\PowerShell\\CommandAnalysis`. In WMF 5.1, the cache is a single\nfile `$env:LOCALAPPDATA\\Microsoft\\Windows\\PowerShell\\ModuleAnalysisCache`.\nSee [analysis_cache.md]() for more details.\n\n\n\n## Bug fixes ##\n\nThe following notable bugs were fixed:\n\n### Module auto-discovery fully honors `$env:PSModulePath` ###\n\nModule auto-discovery (loading modules automatically without an explicit Import-Module when calling a command)\nwas introduced in WMF 3. When introduced, PowerShell checked for commands in `$PSHome\\Modules` before\nusing `$env:PSModulePath`.\n\nWMF 5.1 changes this behavior to honor `$env:PSModulePath` completely. This allows for a user-authored module \nthat defines commands provided by PowerShell (e.g. `Get-ChildItem`) to be auto-loaded and correctly overriding\nthe built-in command.\n\n### File redirection no longer hard-codes `-Encoding Unicode` ###\n\nIn all previous versions of PowerShell, it was impossible to control the file encoding used by the file\nredirection operator, e.g. `get-childitem > out.txt` because PowerShell added `-Encoding Unicode`.\n\nStarting with WMF 5.1, you can now change the file encoding of redirection by setting `$PSDefaultParameterValues`, e.g.\n\n```\n$PSDefaultParameterValues[\"Out-File:Encoding\"] = \"Ascii\"\n```\n\n### Fixed a regression in accessing members of `System.Reflection.TypeInfo` ###\n\nA regression introduced in WMF 5.0 broke accessing members of `System.Reflection.RuntimeType`, e.g. `[int].ImplementedInterfaces`.\nThis bug has been fixed in WMF5.1.\n\n\n### Fixed some issues with COM objects ###\n\nWMF 5.0 introduced a new COM binder for invoking methods on COM objects and accessing properties of COM objects.\nThis new binder improved performance significantly but also introduced some bugs which have been fixed in WMF5.1.\n\n#### Argument conversions were not always performed correctly ####\n\nIn the following example:\n\n```\n$obj = new-object -com wscript.shell\n$obj.SendKeys([char]173)\n```\n\nThe SendKeys method expects a string, but PowerShell did not convert the char to a string, deferring the conversion\nto IDispatch::Invoke, which uses VariantChangeType to do the conversion, which in this example resulted in sending\nthe keys '1', '7', and '3' instead of the expected Volume.Mute key.\n\n#### Enumerable COM objects not always handled correctly ####\n\nPowerShell normally enumerates most enumerable objects, but a regression introduced in WMF 5.0 prevented the enumeration\nof COM objects that implement IEnumerable.  For example:\n\n```\nfunction Get-COMDictionary\n{\n    $d = New-Object -ComObject Scripting.Dictionary\n    $d.Add('a', 2)\n    $d.Add('b', 2)\n    return $d\n}\n\n$x = Get-COMDictionary\n```\n\nIn the above example, WMF 5.0 incorrectly wrote the Scripting.Dictionary to the pipeline\ninstead of enumerating the key value pairs.\n\n\n### `[ordered]` was not allowed inside classes ###\n\nWMF5 introduced classes with validation of type literals used in classes.  `[ordered]` looks like a type\nliteral but is not a true .Net type.  WMF5 incorrectly reported an error on `[ordered]` inside a class:\n\n```\nclass CThing\n{\n    [object] foo($i)\n    {\n        [ordered]@{ Thing = $i }\n    }\n}\n```\n\n\n### Help on About topics with multiple versions does not work ###\n\nBefore WMF 5.1, if you had multiple versions of a module installed and they all shared a help topic,\nfor example, about_PSReadline, `help about_PSReadline` would return multiple topics with no obvious way\nto view the real help.\n\nWMF 5.1 fixes this by returning the help for the latest version of the topic.\n\nGet-Help does not provide a way to specify which version you want help for. To work around this,\nnavigate to the modules directory and view the help directly with a tool like your favorite editor. \n\n## OneGet improvements\nWMF 5.1 includes a number of fixes and improvements to address some of the user experience gaps in the WMF 5.0 release. \n\n###Version alias removed\n\n**Scenario**: If you have version 1.0 and 2.0 of a package, P1, installed on your system, and you want to uninstall version 1.0, you would run \"uninstall-package -name P1 -version 1.0\" and expect version 1.0 to be uninstalled after running the cmdlet. However the result is that version 2.0 gets uninstalled. \n    \nThis occurs because the \"-version\" parameter is an alias of the \"-minimumversion\" parameter. When OneGet is looking for a qualified package with the minimum version of 1.0, it returns the latest version. This behavior is expected in normal cases because finding the latest version is usually the desired result. However, it should not apply to the uninstall-package case.\n    \n**Solution**: In WMF 5.1, the -version alias is removed entirely in OneGet and PowerShellGet. \n\n###Multiple prompts for bootstrapping the NuGet provider\n\n**Scenario**: When you run Find-Module or Install-module or other OneGet cmdlets on your computer for the first time, OneGet tries to bootstrap the NuGet provider. It does this because the PowerShellGet provider also uses the NuGet provider to download PowerShell modules. OneGet then prompts the user for permission to install the NuGet provider. After the user selects \"yes\" for the bootstrapping, the latest version of the NuGet provider will be installed. \n    \nHowever, in some cases, when you have an old version of NuGet provider installed on your computer, the older version of NuGet sometimes gets loaded first into the PowerShell session (that's the race condition in OneGet). However PowerShellGet requires the later version of the NuGet provider to work, so PowerShellGet asks the OneGet for bootstrapping the NuGet provider again. This results in multiple prompts for bootstrapping the NuGet provider.\n\n**Solution**: In WMF 5.1, OneGet now loads the latest version of the NuGet provider to avoid multiple prompts for bootstrapping the NuGet provider.\n\nYou could also work around this issue by manually deleting the old version of the NuGet provider (NuGet-Anycpu.exe) if exists from $env:ProgramFiles\\PackageManagement\\ProviderAssemblies \n$env:LOCALAPPDATA\\PackageManagement\\ProviderAssemblies\n\n\n###Support for OneGet on computers with intranet access only\n\n**Scenario**: In WMF 5.0, OneGet did not support computers that have only intranet (but not internet) access.\n\n**Solution**: In WMF 5.1, you can follow these steps to allow intranet computers to use OneGet:\n\n1. Download the NuGet provider using another computer that has an internet connection by using Install-PackageProvider NuGet.\n\n2. Find the NuGet provider under either  $env:ProgramFiles\\PackageManagement\\ProviderAssemblies\\nuget  or  $env:LOCALAPPDATA\\PackageManagement\\ProviderAssemblies\\nuget. \n\n3. Copy the binaries to a folder or network share location that the intranet computer can access, and then install the NuGet provider with \"Install-PackageProvider NuGet -Source <Path to folder>\".\n\n\n###Event logging improvements\n\nWhen you install packages, you are changing the state of the computer. In WMF 5.1, OneGet now logs events to the Windows event log for install, uninstall, and save-package activities. The Event channel is the same as for PowerShell, that is, Microsoft-Windows-PowerShell, Operational.\n\n###Support for basic authentication\n\nIn WMF 5.1, OneGet supports finding and installing packages from a repository that requires basic authentication. You can supply your credentials to the Find-Package and Install-Package cmdlets. For example:\n\n``` PowerShell\nFind-Package -Source <SourceWithCredential> -Credential (Get-Credential)\n```\n###Support for using OneGet behind a proxy\n\nIn WMF 5.1, OneGet now takes new proxy parameters: -ProxyCredential and -Proxy. Using these parameters, you can specify the proxy URL and credentials to OneGet cmdlets. By default, system proxy settings are used. For example:\n\n``` PowerShell\nFind-Package -Source http://www.nuget.org/api/v2/ -Proxy http://www.myproxyserver.com -ProxyCredential (Get-Credential)\n```\n"}
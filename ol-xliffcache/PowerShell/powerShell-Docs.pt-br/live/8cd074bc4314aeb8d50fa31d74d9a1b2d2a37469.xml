{"nodes":[{"content":"Viewing Object Structure  Get Member","pos":[12,48]},{"content":"Viewing Object Structure (Get-Member)","pos":[247,284]},{"content":"Because objects play such a central role in Windows PowerShell, there are several native commands designed to work with arbitrary object types.","pos":[285,428]},{"content":"The most important one is the <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>Member<ept id=\"p1\">**</ept> command.","pos":[429,483]},{"content":"The simplest technique for analyzing the objects that a command returns is to pipe the output of that command to the <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>Member<ept id=\"p1\">**</ept> cmdlet.","pos":[485,625]},{"content":"The <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>Member<ept id=\"p1\">**</ept> cmdlet shows you the formal name of the object type and a complete listing of its members.","pos":[626,736]},{"content":"The number of elements that are returned can sometimes be overwhelming.","pos":[737,808]},{"content":"For example, a process object can have over 100 members.","pos":[809,865]},{"content":"To see all the members of a Process object and page the output so you can view all of it, type:","pos":[867,962]},{"content":"The output from this command will look something like this:","pos":[1021,1080]},{"content":"We can make this long list of information more usable by filtering for elements we want to see.","pos":[1735,1830]},{"content":"The <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>Member<ept id=\"p1\">**</ept> command lets you list only members that are properties.","pos":[1831,1906]},{"content":"There are several forms of properties.","pos":[1907,1945]},{"content":"The cmdlet displays properties of any type if we set the <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>MemberMemberType<ept id=\"p1\">**</ept> parameter to the value <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>.","pos":[1946,2067]},{"content":"The resulting list is still very long, but a bit more manageable:","pos":[2068,2133]},{"pos":[2792,3018],"content":"[!NOTE]\nThe allowed values of MemberType are AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod, ScriptMethod, Methods, ParameterizedProperty, MemberSet, and All.","leadings":["","> "],"nodes":[{"content":"The allowed values of MemberType are AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod, ScriptMethod, Methods, ParameterizedProperty, MemberSet, and All.","pos":[8,224]}]},{"content":"There are over 60 properties for a process.","pos":[3020,3063]},{"content":"The reason Windows PowerShell often shows only a handful of properties for any well<ph id=\"ph1\">\\-</ph>known object is that showing all of them would produce an unmanageable amount of information.","pos":[3064,3242]},{"pos":[3246,3533],"content":"[!NOTE]\nWindows PowerShell determines how to display an object type by using information stored in XML files that have names ending in .format.ps1xml. The formatting data for process objects, which are .NET System.Diagnostics.Process objects, is stored in PowerShellCore.format.ps1xml.","leadings":["","> "],"nodes":[{"content":"Windows PowerShell determines how to display an object type by using information stored in XML files that have names ending in .format.ps1xml. The formatting data for process objects, which are .NET System.Diagnostics.Process objects, is stored in PowerShellCore.format.ps1xml.","pos":[8,285],"nodes":[{"content":"Windows PowerShell determines how to display an object type by using information stored in XML files that have names ending in .format.ps1xml.","pos":[0,142]},{"content":"The formatting data for process objects, which are .NET System.Diagnostics.Process objects, is stored in PowerShellCore.format.ps1xml.","pos":[143,277]}]}]},{"content":"If you need to look at properties other than those that Windows PowerShell displays by default, you will need to format the output data yourself.","pos":[3535,3680]},{"content":"This can be done by using the format cmdlets.","pos":[3681,3726]}],"content":"---\ntitle:  Viewing Object Structure  Get Member \nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  a1819ed2-2ef3-453a-b2b0-f3589c550481\n---\n\n# Viewing Object Structure (Get-Member)\nBecause objects play such a central role in Windows PowerShell, there are several native commands designed to work with arbitrary object types. The most important one is the **Get\\-Member** command.\n\nThe simplest technique for analyzing the objects that a command returns is to pipe the output of that command to the **Get\\-Member** cmdlet. The **Get\\-Member** cmdlet shows you the formal name of the object type and a complete listing of its members. The number of elements that are returned can sometimes be overwhelming. For example, a process object can have over 100 members.\n\nTo see all the members of a Process object and page the output so you can view all of it, type:\n\n```\nPS> Get-Process | Get-Member | Out-Host -Paging\n```\n\nThe output from this command will look something like this:\n\n```\nTypeName: System.Diagnostics.Process\n\nName                           MemberType     Definition\n----                           ----------     ----------\nHandles                        AliasProperty  Handles = Handlecount\nName                           AliasProperty  Name = ProcessName\nNPM                            AliasProperty  NPM = NonpagedSystemMemorySize\nPM                             AliasProperty  PM = PagedMemorySize\nVM                             AliasProperty  VM = VirtualMemorySize\nWS                             AliasProperty  WS = WorkingSet\nadd_Disposed                   Method         System.Void add_Disposed(Event...\n...\n```\n\nWe can make this long list of information more usable by filtering for elements we want to see. The **Get\\-Member** command lets you list only members that are properties. There are several forms of properties. The cmdlet displays properties of any type if we set the **Get\\-MemberMemberType** parameter to the value **Properties**. The resulting list is still very long, but a bit more manageable:\n\n```\nPS> Get-Process | Get-Member -MemberType Properties\n\n   TypeName: System.Diagnostics.Process\n\nName                       MemberType     Definition\n----                       ----------     ----------\nHandles                    AliasProperty  Handles = Handlecount\nName                       AliasProperty  Name = ProcessName\n...\nExitCode                   Property       System.Int32 ExitCode {get;}\n...\nHandle                     Property       System.IntPtr Handle {get;}\n...\nCPU                        ScriptProperty System.Object CPU {get=$this.Total...\n...\nPath                       ScriptProperty System.Object Path {get=$this.Main...\n...\n```\n\n> [!NOTE]\n> The allowed values of MemberType are AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod, ScriptMethod, Methods, ParameterizedProperty, MemberSet, and All.\n\nThere are over 60 properties for a process. The reason Windows PowerShell often shows only a handful of properties for any well\\-known object is that showing all of them would produce an unmanageable amount of information.\n\n> [!NOTE]\n> Windows PowerShell determines how to display an object type by using information stored in XML files that have names ending in .format.ps1xml. The formatting data for process objects, which are .NET System.Diagnostics.Process objects, is stored in PowerShellCore.format.ps1xml.\n\nIf you need to look at properties other than those that Windows PowerShell displays by default, you will need to format the output data yourself. This can be done by using the format cmdlets.\n\n"}
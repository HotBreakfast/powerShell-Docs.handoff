{
  "nodes": [
    {
      "content": "Managing Processes with Process Cmdlets",
      "pos": [
        11,
        50
      ]
    },
    {
      "content": "Managing Processes with Process Cmdlets",
      "pos": [
        185,
        224
      ]
    },
    {
      "content": "You can use the Process cmdlets in Windows PowerShell to manage local and remote processes in Windows PowerShell.",
      "pos": [
        225,
        338
      ]
    },
    {
      "content": "Getting Processes (Get\\-Process)",
      "pos": [
        343,
        375
      ]
    },
    {
      "pos": [
        376,
        470
      ],
      "content": "To get the processes running on the local computer, run a <bpt id=\"p1\">**</bpt>Get\\-Process<ept id=\"p1\">**</ept> with no parameters."
    },
    {
      "content": "You can get particular processes by specifying their process names or process IDs.",
      "pos": [
        472,
        554
      ]
    },
    {
      "content": "The following command gets the Idle process:",
      "pos": [
        555,
        599
      ]
    },
    {
      "content": "Although it is normal for cmdlets to return no data in some situations, when you specify a process by its ProcessId, <bpt id=\"p1\">**</bpt>Get\\-Process<ept id=\"p1\">**</ept> generates an error if it finds no matches, because the usual intent is to retrieve a known running process.",
      "pos": [
        835,
        1076
      ]
    },
    {
      "content": "If there is no process with that Id, it is likely that the Id is incorrect or that the process of interest has already exited:",
      "pos": [
        1077,
        1203
      ]
    },
    {
      "content": "You can use the Name parameter of the Get\\-Process cmdlet to specify a subset of processes based on the process name.",
      "pos": [
        1337,
        1454
      ]
    },
    {
      "content": "The Name parameter can take multiple names in a comma\\-separated list and it supports the use of wildcards, so you can type name patterns.",
      "pos": [
        1455,
        1593
      ]
    },
    {
      "content": "For example, the following command gets process whose names begin with \"ex.\"",
      "pos": [
        1595,
        1671
      ]
    },
    {
      "content": "Because the .NET System.Diagnostics.Process class is the foundation for Windows PowerShell processes, it follows some of the conventions used by System.Diagnostics.Process.",
      "pos": [
        1979,
        2151
      ]
    },
    {
      "content": "One of those conventions is that the process name for an executable never includes the \".exe\" at the end of the executable name.",
      "pos": [
        2152,
        2280
      ]
    },
    {
      "pos": [
        2282,
        2351
      ],
      "content": "<bpt id=\"p1\">**</bpt>Get\\-Process<ept id=\"p1\">**</ept> also accepts multiple values for the Name parameter."
    },
    {
      "content": "You can use the ComputerName parameter of Get\\-Process to get processes on remote computers.",
      "pos": [
        2673,
        2765
      ]
    },
    {
      "content": "For example, the following command gets the PowerShell processes on the local computer (represented by \"localhost\") and on two remote computers.",
      "pos": [
        2766,
        2910
      ]
    },
    {
      "content": "The computer names are not evident in this display, but they are stored in the MachineName property of the process objects that Get\\-Process returns.",
      "pos": [
        3345,
        3494
      ]
    },
    {
      "content": "The following command uses the Format\\-Table cmdlet to display the process ID, ProcessName and MachineName (ComputerName) properties of the process objects.",
      "pos": [
        3495,
        3651
      ]
    },
    {
      "content": "This more complex command adds the MachineName property to the standard Get\\-Process display.",
      "pos": [
        3930,
        4023
      ]
    },
    {
      "content": "The backtick (\\`)(ASCII 96) is the Windows PowerShell continuation character.",
      "pos": [
        4024,
        4101
      ]
    },
    {
      "content": "Stopping Processes (Stop\\-Process)",
      "pos": [
        5097,
        5131
      ]
    },
    {
      "content": "Windows PowerShell gives you flexibility for listing processes, but what about stopping a process?",
      "pos": [
        5132,
        5230
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Stop\\-Process<ept id=\"p1\">**</ept> cmdlet takes a Name or Id to specify a process you want to stop.",
      "pos": [
        5232,
        5318
      ]
    },
    {
      "content": "Your ability to stop processes depends on your permissions.",
      "pos": [
        5319,
        5378
      ]
    },
    {
      "content": "Some processes cannot be stopped.",
      "pos": [
        5379,
        5412
      ]
    },
    {
      "content": "For example, if you try to stop the idle process, you get an error:",
      "pos": [
        5413,
        5480
      ]
    },
    {
      "content": "You can also force prompting with the <bpt id=\"p1\">**</bpt>Confirm<ept id=\"p1\">**</ept> parameter.",
      "pos": [
        5667,
        5727
      ]
    },
    {
      "content": "This parameter is particularly useful if you use a wildcard when specifying the process name, because you may accidentally match some processes you do not want to stop:",
      "pos": [
        5728,
        5896
      ]
    },
    {
      "content": "Complex process manipulation is possible by using some of the object filtering cmdlets.",
      "pos": [
        6359,
        6446
      ]
    },
    {
      "content": "Because a Process object has a Responding property that is true when it is no longer responding, you can stop all nonresponsive applications with the following command:",
      "pos": [
        6447,
        6615
      ]
    },
    {
      "content": "You can use the same approach in other situations.",
      "pos": [
        6709,
        6759
      ]
    },
    {
      "content": "For example, suppose a secondary notification area application automatically runs when users start another application.",
      "pos": [
        6760,
        6879
      ]
    },
    {
      "content": "You may find that this does not work correctly in Terminal Services sessions, but you still want to keep it in sessions that run on the physical computer console.",
      "pos": [
        6880,
        7042
      ]
    },
    {
      "content": "Sessions connected to the physical computer desktop always have a session ID of 0, so you can stop all instances of the process that are in other sessions by using <bpt id=\"p1\">**</bpt>Where\\-Object<ept id=\"p1\">**</ept> and the process, <bpt id=\"p2\">**</bpt>SessionId<ept id=\"p2\">**</ept>:",
      "pos": [
        7043,
        7256
      ]
    },
    {
      "content": "The Stop\\-Process cmdlet does not have a ComputerName parameter.",
      "pos": [
        7358,
        7422
      ]
    },
    {
      "content": "Therefore, to run a stop process command on a remote computer, you need to use the Invoke\\-Command cmdlet.",
      "pos": [
        7423,
        7529
      ]
    },
    {
      "content": "For example, to stop the PowerShell process on the Server01 remote computer, type:",
      "pos": [
        7530,
        7612
      ]
    },
    {
      "content": "Stopping All Other Windows PowerShell Sessions",
      "pos": [
        7690,
        7736
      ]
    },
    {
      "content": "It may occasionally be useful to be able to stop all running Windows PowerShell sessions other than the current session.",
      "pos": [
        7737,
        7857
      ]
    },
    {
      "content": "If a session is using too many resources or is inaccessible (it may be running remotely or in another desktop session), you may not be able to directly stop it.",
      "pos": [
        7858,
        8018
      ]
    },
    {
      "content": "If you try to stop all running sessions, however, the current session may be terminated instead.",
      "pos": [
        8019,
        8115
      ]
    },
    {
      "content": "Each Windows PowerShell session has an environment variable PID that contains the Id of the Windows PowerShell process.",
      "pos": [
        8117,
        8236
      ]
    },
    {
      "content": "You can check the $PID against the Id of each session and terminate only Windows PowerShell sessions that have a different Id.",
      "pos": [
        8237,
        8363
      ]
    },
    {
      "content": "The following pipeline command does this and returns the list of terminated sessions (because of the use of the <bpt id=\"p1\">**</bpt>PassThru<ept id=\"p1\">**</ept> parameter):",
      "pos": [
        8364,
        8500
      ]
    },
    {
      "content": "Starting, Debugging, and Waiting for Processes",
      "pos": [
        9173,
        9219
      ]
    },
    {
      "content": "Windows PowerShell also comes with cmdlets to start (or restart), debug a process, and wait for a process to complete before running a command.",
      "pos": [
        9220,
        9363
      ]
    },
    {
      "content": "For information about these cmdlets, see the cmdlet help topic for each cmdlet.",
      "pos": [
        9364,
        9443
      ]
    },
    {
      "content": "See Also",
      "pos": [
        9448,
        9456
      ]
    },
    {
      "content": "Get-Process [m2]",
      "pos": [
        9458,
        9474
      ]
    },
    {
      "content": "Stop-Process [m2]",
      "pos": [
        9526,
        9543
      ]
    },
    {
      "content": "Start-Process",
      "pos": [
        9595,
        9608
      ]
    },
    {
      "content": "Wait-Process",
      "pos": [
        9660,
        9672
      ]
    },
    {
      "content": "Debug-Process",
      "pos": [
        9724,
        9737
      ]
    },
    {
      "content": "Invoke-Command",
      "pos": [
        9789,
        9803
      ]
    }
  ],
  "content": "---\ntitle: Managing Processes with Process Cmdlets\nms.custom: na\nms.reviewer: na\nms.suite: na\nms.tgt_pltfrm: na\nms.topic: article\nms.assetid: 5038f612-d149-4698-8bbb-999986959e31\n---\n# Managing Processes with Process Cmdlets\nYou can use the Process cmdlets in Windows PowerShell to manage local and remote processes in Windows PowerShell.\n\n## Getting Processes (Get\\-Process)\nTo get the processes running on the local computer, run a **Get\\-Process** with no parameters.\n\nYou can get particular processes by specifying their process names or process IDs. The following command gets the Idle process:\n\n```\nPS> Get-Process -id 0\nHandles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName\n-------  ------    -----      ----- -----   ------     -- -----------\n      0       0        0         16     0               0 Idle\n```\n\nAlthough it is normal for cmdlets to return no data in some situations, when you specify a process by its ProcessId, **Get\\-Process** generates an error if it finds no matches, because the usual intent is to retrieve a known running process. If there is no process with that Id, it is likely that the Id is incorrect or that the process of interest has already exited:\n\n```\nPS> Get-Process -Id 99\nGet-Process : No process with process ID 99 was found.\nAt line:1 char:12\n+ Get-Process  <<<< -Id 99\n```\n\nYou can use the Name parameter of the Get\\-Process cmdlet to specify a subset of processes based on the process name. The Name parameter can take multiple names in a comma\\-separated list and it supports the use of wildcards, so you can type name patterns.\n\nFor example, the following command gets process whose names begin with \"ex.\"\n\n```\nPS> Get-Process -Name ex*\nHandles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName\n-------  ------    -----      ----- -----   ------     -- -----------\n    234       7     5572      12484   134     2.98   1684 EXCEL\n    555      15    34500      12384   134   105.25    728 explorer\n```\n\nBecause the .NET System.Diagnostics.Process class is the foundation for Windows PowerShell processes, it follows some of the conventions used by System.Diagnostics.Process. One of those conventions is that the process name for an executable never includes the \".exe\" at the end of the executable name.\n\n**Get\\-Process** also accepts multiple values for the Name parameter.\n\n```\nPS> Get-Process -Name exp*,power* \nHandles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName\n-------  ------    -----      ----- -----   ------     -- -----------\n    540      15    35172      48148   141    88.44    408 explorer\n    605       9    30668      29800   155     7.11   3052 powershell\n```\n\nYou can use the ComputerName parameter of Get\\-Process to get processes on remote computers. For example, the following command gets the PowerShell processes on the local computer (represented by \"localhost\") and on two remote computers.\n\n```\nPS> Get-Process -Name PowerShell -ComputerName localhost, Server01, Server02\nHandles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName\n-------  ------    -----      ----- -----   ------     -- -----------\n    258       8    29772      38636   130            3700 powershell\n    398      24    75988      76800   572            5816 powershell\n    605       9    30668      29800   155     7.11   3052 powershell\n```\n\nThe computer names are not evident in this display, but they are stored in the MachineName property of the process objects that Get\\-Process returns. The following command uses the Format\\-Table cmdlet to display the process ID, ProcessName and MachineName (ComputerName) properties of the process objects.\n\n```\nPS> Get-Process -Name PowerShell -ComputerName localhost, Server01, Server01 | Format-Table -Property ID, ProcessName, MachineName\n  Id ProcessName MachineName\n  -- ----------- -----------\n3700 powershell  Server01\n3052 powershell  Server02\n5816 powershell  localhost\n```\n\nThis more complex command adds the MachineName property to the standard Get\\-Process display. The backtick (\\`)(ASCII 96) is the Windows PowerShell continuation character.\n\n```\nget-process powershell -computername localhost, Server01, Server02 | format-table -property Handles, `\n                    @{Label=\"NPM(K)\";Expression={[int]($_.NPM/1024)}}, `\n                    @{Label=\"PM(K)\";Expression={[int]($_.PM/1024)}}, `\n                    @{Label=\"WS(K)\";Expression={[int]($_.WS/1024)}}, `\n                    @{Label=\"VM(M)\";Expression={[int]($_.VM/1MB)}}, `\n                    @{Label=\"CPU(s)\";Expression={if ($_.CPU -ne $()` \n                    {$_.CPU.ToString(\"N\")}}}, `                                                                         \n                    Id, ProcessName, MachineName -auto\n\nHandles  NPM(K)  PM(K) WS(K) VM(M) CPU(s)  Id ProcessName  MachineName\n-------  ------  ----- ----- ----- ------  -- -----------  -----------\n    258       8  29772 38636   130         3700 powershell Server01\n    398      24  75988 76800   572         5816 powershell localhost\n    605       9  30668 29800   155 7.11    3052 powershell Server02\n```\n\n## Stopping Processes (Stop\\-Process)\nWindows PowerShell gives you flexibility for listing processes, but what about stopping a process?\n\nThe **Stop\\-Process** cmdlet takes a Name or Id to specify a process you want to stop. Your ability to stop processes depends on your permissions. Some processes cannot be stopped. For example, if you try to stop the idle process, you get an error:\n\n```\nPS> Stop-Process -Name Idle\nStop-Process : Process 'Idle (0)' cannot be stopped due to the following error:\n Access is denied\nAt line:1 char:13\n+ Stop-Process  <<<< -Name Idle\n```\n\nYou can also force prompting with the **Confirm** parameter. This parameter is particularly useful if you use a wildcard when specifying the process name, because you may accidentally match some processes you do not want to stop:\n\n```\nPS> Stop-Process -Name t*,e* -Confirm\nConfirm\nAre you sure you want to perform this action?\nPerforming operation \"Stop-Process\" on Target \"explorer (408)\".\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help\n(default is \"Y\"):n\nConfirm\nAre you sure you want to perform this action?\nPerforming operation \"Stop-Process\" on Target \"taskmgr (4072)\".\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help\n(default is \"Y\"):n\n```\n\nComplex process manipulation is possible by using some of the object filtering cmdlets. Because a Process object has a Responding property that is true when it is no longer responding, you can stop all nonresponsive applications with the following command:\n\n```\nGet-Process | Where-Object -FilterScript {$_.Responding -eq $false} | Stop-Process\n```\n\nYou can use the same approach in other situations. For example, suppose a secondary notification area application automatically runs when users start another application. You may find that this does not work correctly in Terminal Services sessions, but you still want to keep it in sessions that run on the physical computer console. Sessions connected to the physical computer desktop always have a session ID of 0, so you can stop all instances of the process that are in other sessions by using **Where\\-Object** and the process, **SessionId**:\n\n```\nGet-Process -Name BadApp | Where-Object -FilterScript {$_.SessionId -neq 0} | Stop-Process\n```\n\nThe Stop\\-Process cmdlet does not have a ComputerName parameter. Therefore, to run a stop process command on a remote computer, you need to use the Invoke\\-Command cmdlet. For example, to stop the PowerShell process on the Server01 remote computer, type:\n\n```\nInvoke-Command -ComputerName Server01 {Stop-Process Powershell}\n```\n\n## Stopping All Other Windows PowerShell Sessions\nIt may occasionally be useful to be able to stop all running Windows PowerShell sessions other than the current session. If a session is using too many resources or is inaccessible (it may be running remotely or in another desktop session), you may not be able to directly stop it. If you try to stop all running sessions, however, the current session may be terminated instead.\n\nEach Windows PowerShell session has an environment variable PID that contains the Id of the Windows PowerShell process. You can check the $PID against the Id of each session and terminate only Windows PowerShell sessions that have a different Id. The following pipeline command does this and returns the list of terminated sessions (because of the use of the **PassThru** parameter):\n\n```\nPS> Get-Process -Name powershell | Where-Object -FilterScript {$_.Id -ne $PID} | Stop-Process -\nPassThru\nHandles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName\n-------  ------    -----      ----- -----   ------     -- -----------\n    334       9    23348      29136   143     1.03    388 powershell\n    304       9    23152      29040   143     1.03    632 powershell\n    302       9    20916      26804   143     1.03   1116 powershell\n    335       9    25656      31412   143     1.09   3452 powershell\n    303       9    23156      29044   143     1.05   3608 powershell\n    287       9    21044      26928   143     1.02   3672 powershell\n```\n\n## Starting, Debugging, and Waiting for Processes\nWindows PowerShell also comes with cmdlets to start (or restart), debug a process, and wait for a process to complete before running a command. For information about these cmdlets, see the cmdlet help topic for each cmdlet.\n\n## See Also\n[Get-Process [m2]](assetId:///27a05dbd-4b69-48a3-8d55-b295f6225f15)\n[Stop-Process [m2]](assetId:///12454238-9881-457a-bde4-fb6cd124deec)\n[Start-Process](assetId:///41a7e43c-9bb3-4dc2-8b0c-f6c32962e72c)\n[Wait-Process](assetId:///9222af7a-789d-4a09-aa90-09d7c256c799)\n[Debug-Process](assetId:///eea1dace-3913-4dbd-b659-5a94a610eee1)\n[Invoke-Command](assetId:///22fd98ba-1874-492e-95a5-c069467b8462)\n\n"
}
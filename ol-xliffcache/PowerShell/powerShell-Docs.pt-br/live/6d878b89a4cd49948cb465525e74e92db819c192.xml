{"nodes":[{"content":"Performing Networking Tasks","pos":[12,39]},{"content":"Performing Networking Tasks","pos":[237,264]},{"content":"Because TCP<ph id=\"ph1\">\\/</ph>IP is the most commonly used network protocol, most low<ph id=\"ph2\">\\-</ph>level network protocol administration tasks involve TCP<ph id=\"ph3\">\\/</ph>IP.","pos":[265,395]},{"content":"In this section, we use Windows PowerShell and WMI to do these tasks.","pos":[396,465]},{"content":"Listing IP Addresses for a Computer","pos":[471,506]},{"content":"To get all IP addresses in use on the local computer, use the following command:","pos":[507,587]},{"content":"The output of this command differs from most property lists, because values are enclosed in braces:","pos":[727,826]},{"content":"IPAddress","pos":[833,842]},{"content":"{192.168.1.80} {192.168.148.1} {192.168.171.1} {0.0.0.0}","pos":[853,909]},{"pos":[917,1019],"content":"To understand why the braces appear, use the Get<ph id=\"ph1\">\\-</ph>Member cmdlet to examine the <bpt id=\"p1\">**</bpt>IPAddress<ept id=\"p1\">**</ept> property:"},{"content":"PS&gt; Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName .","pos":[1026,1123]},{"content":"| Get-Member -Name IPAddress TypeName: System.Management.ManagementObject#root\\cimv2\\Win32_NetworkAdapter Configuration Name      MemberType Definition ----      ---------- ---------- IPAddress Property   System.String[] IPAddress {get;}","pos":[1124,1361]},{"content":"The IPAddress property for each network adapter is actually an array.","pos":[1369,1438]},{"content":"The braces in the definition indicate that <bpt id=\"p1\">**</bpt>IPAddress<ept id=\"p1\">**</ept> is not a <bpt id=\"p2\">**</bpt>System.String<ept id=\"p2\">**</ept> value, but an array of <bpt id=\"p3\">**</bpt>System.String<ept id=\"p3\">**</ept> values.","pos":[1439,1571]},{"content":"Listing IP Configuration Data","pos":[1577,1606]},{"content":"To display detailed IP configuration data for each network adapter, use the following command:","pos":[1607,1701]},{"content":"The default display for the network adapter configuration object is a very reduced set of the available information.","pos":[1806,1922]},{"content":"For in<ph id=\"ph1\">\\-</ph>depth inspection and troubleshooting, use Select<ph id=\"ph2\">\\-</ph>Object or a formatting cmdlet, such as Format<ph id=\"ph3\">\\-</ph>List, to specify the properties to be displayed.","pos":[1923,2076]},{"content":"If you are not interested in IPX or WINS properties—probably the case in a modern TCP<ph id=\"ph1\">\\/</ph>IP network—you can use the ExcludeProperty parameter of Select<ph id=\"ph2\">\\-</ph>Object to hide properties with names that begin with \"WINS\" or \"IPX:\"","pos":[2078,2298]},{"content":"This command returns detailed information about DHCP, DNS, routing, and other minor IP configuration properties.","pos":[2464,2576]},{"content":"Pinging Computers","pos":[2582,2599]},{"content":"You can perform a simple ping against a computer using by <bpt id=\"p1\">**</bpt>Win32<ph id=\"ph1\">\\_</ph>PingStatus<ept id=\"p1\">**</ept>.","pos":[2600,2680]},{"content":"The following command performs the ping, but returns lengthy output:","pos":[2681,2749]},{"content":"A more useful form for summary information a display of the Address, ResponseTime, and StatusCode properties, as generated by the following command.","pos":[2844,2992]},{"content":"The Autosize parameter of Format<ph id=\"ph1\">\\-</ph>Table resizes the table columns so that they display properly in Windows PowerShell.","pos":[2993,3111]},{"content":"You can use an array to ping multiple computers with a single command.","pos":[3428,3498]},{"content":"Because there is more than one address, use the <bpt id=\"p1\">**</bpt>ForEach<ph id=\"ph1\">\\-</ph>Object<ept id=\"p1\">**</ept> to ping each address separately:","pos":[3499,3599]},{"content":"You can use the same command format to ping all of the computers on a subnet, such as a private network that uses network number 192.168.1.0 and a standard Class C subnet mask (255.255.255.0)., Only addresses in the range of 192.168.1.1 through 192.168.1.254 are legitimate local addresses (0 is always reserved for the network number and 255 is a subnet broadcast address).","pos":[3832,4206]},{"content":"To represent an array of the numbers from 1 through 254 in Windows PowerShell, use the statement <bpt id=\"p1\">**</bpt>1..254.<ept id=\"p1\">**</ept>","pos":[4208,4316]},{"content":"A complete subnet ping can be performed by generating the array and then adding the values onto a partial address in the ping statement:","pos":[4317,4453]},{"content":"Note that this technique for generating a range of addresses can be used elsewhere as well.","pos":[4653,4744]},{"content":"You can generate a complete set of addresses in this way:","pos":[4745,4802]},{"content":"Retrieving Network Adapter Properties","pos":[4871,4908]},{"content":"Earlier in this user's guide, we mentioned that you could retrieve general configuration properties by using <bpt id=\"p1\">**</bpt>Win32<ph id=\"ph1\">\\_</ph>NetworkAdapterConfiguration<ept id=\"p1\">**</ept>.","pos":[4909,5057]},{"content":"Although not strictly TCP<ph id=\"ph1\">\\/</ph>IP information, network adapter information such as MAC addresses and adapter types can be useful for understanding what is going on with a computer.","pos":[5058,5234]},{"content":"To get a summary of this information, use the following command:","pos":[5235,5299]},{"content":"Assigning the DNS Domain for a Network Adapter","pos":[5372,5418]},{"content":"To assign the DNS domain for automatic name resolution, use the <bpt id=\"p1\">**</bpt>Win32<ph id=\"ph1\">\\_</ph>NetworkAdapterConfiguration SetDNSDomain<ept id=\"p1\">**</ept> method.","pos":[5419,5542]},{"content":"Because you assign the DNS domain for each network adapter configuration independently, you need to use a <bpt id=\"p1\">**</bpt>ForEach<ph id=\"ph1\">\\-</ph>Object<ept id=\"p1\">**</ept> statement to assign the domain to each adapter:","pos":[5543,5716]},{"content":"The filtering statement \"IPEnabled<ph id=\"ph1\">\\=</ph>true\" is necessary, because even on a network that uses only TCP<ph id=\"ph2\">\\/</ph>IP, several of the network adapter configurations on a computer are not true TCP<ph id=\"ph3\">\\/</ph>IP adapters; they are general software elements supporting RAS, PPTP, QoS, and other services for all adapters and thus do not have an address of their own.","pos":[5884,6224]},{"pos":[6226,6339],"content":"You can filter the command by using the <bpt id=\"p1\">**</bpt>Where<ph id=\"ph1\">\\-</ph>Object<ept id=\"p1\">**</ept> cmdlet, instead of using the <bpt id=\"p2\">**</bpt>Get<ph id=\"ph2\">\\-</ph>WmiObject<ept id=\"p2\">**</ept> filter."},{"content":"Performing DHCP Configuration Tasks","pos":[6529,6564]},{"content":"Modifying DHCP details involves working with a set of network adapters, just as the DNS configuration does.","pos":[6565,6672]},{"content":"There are several distinct actions you can perform by using WMI, and we will step through a few of the common ones.","pos":[6673,6788]},{"content":"Determining DHCP<ph id=\"ph1\">\\-</ph>Enabled Adapters","pos":[6795,6829]},{"content":"To find the DHCP<ph id=\"ph1\">\\-</ph>enabled adapters on a computer, use the following command:","pos":[6830,6906]},{"content":"To exclude adapters with IP configuration problems, you can retrieve only IP<ph id=\"ph1\">\\-</ph>enabled adapters:","pos":[7015,7110]},{"content":"Retrieving DHCP Properties","pos":[7243,7269]},{"content":"Because DHCP<ph id=\"ph1\">\\-</ph>related properties for an adapter generally begin with \"DHCP,\" you can use the Property parameter of Format<ph id=\"ph2\">\\-</ph>Table to display only those properties:","pos":[7270,7432]},{"content":"Enabling DHCP on Each Adapter","pos":[7577,7606]},{"content":"To enable DHCP on all adapters, use the following command:","pos":[7607,7665]},{"pos":[7814,7989],"content":"You can use the <bpt id=\"p1\">**</bpt>Filter<ept id=\"p1\">**</ept> statement \"IPEnabled<ph id=\"ph1\">\\=</ph>true and DHCPEnabled<ph id=\"ph2\">\\=</ph>false\" to avoid enabling DHCP where it is already enabled, but omitting this step will not cause errors."},{"content":"Releasing and Renewing DHCP Leases on Specific Adapters","pos":[7996,8051]},{"content":"The <bpt id=\"p1\">**</bpt>Win32<ph id=\"ph1\">\\_</ph>NetworkAdapterConfiguration<ept id=\"p1\">**</ept> class has <bpt id=\"p2\">**</bpt>ReleaseDHCPLease<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>RenewDHCPLease<ept id=\"p3\">**</ept> methods.","pos":[8052,8157]},{"content":"Both are used in the same way.","pos":[8158,8188]},{"content":"In general, use these methods if you only need to release or renew addresses for an adapter on a specific subnet.","pos":[8189,8302]},{"content":"The easiest way to filter adapters on a subnet is to choose only the adapter configurations that use the gateway for that subnet.","pos":[8303,8432]},{"content":"For example, the following command releases all DHCP leases on adapters on the local computer that are obtaining DHCP leases from 192.168.1.254:","pos":[8433,8577]},{"pos":[8826,8951],"content":"The only change for renewing a DHCP lease is to use the <bpt id=\"p1\">**</bpt>RenewDHCPLease<ept id=\"p1\">**</ept> method instead of the <bpt id=\"p2\">**</bpt>ReleaseDHCPLease<ept id=\"p2\">**</ept> method:"},{"pos":[9202,9396],"content":"[!NOTE]\nWhen using these methods on a remote computer, be aware that you can lose access to the remote system if you are connected to it through the adapter with the released or renewed lease.","leadings":["","> "],"nodes":[{"content":"When using these methods on a remote computer, be aware that you can lose access to the remote system if you are connected to it through the adapter with the released or renewed lease.","pos":[8,192]}]},{"content":"Releasing and Renewing DHCP Leases on All Adapters","pos":[9403,9453]},{"content":"You can perform global DHCP address releases or renewals on all adapters by using the <bpt id=\"p1\">**</bpt>Win32<ph id=\"ph1\">\\_</ph>NetworkAdapterConfiguration<ept id=\"p1\">**</ept> methods, <bpt id=\"p2\">**</bpt>ReleaseDHCPLeaseAll<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>RenewDHCPLeaseAll<ept id=\"p3\">**</ept>.","pos":[9454,9638]},{"content":"However, the command must apply to the WMI class, rather than a particular adapter, because releasing and renewing leases globally is performed on the class, not on a specific adapter.","pos":[9639,9823]},{"content":"You can get a reference to a WMI class, instead of class instances, by listing all WMI classes and then selecting only the desired class by name.","pos":[9825,9970]},{"content":"For example, the following command returns the Win32<ph id=\"ph1\">\\_</ph>NetworkAdapterConfiguration class:","pos":[9971,10059]},{"content":"You can treat the entire command as the class and then invoke the <bpt id=\"p1\">**</bpt>ReleaseDHCPAdapterLease<ept id=\"p1\">**</ept> method on it.","pos":[10169,10276]},{"content":"In the following command, the parentheses surrounding the <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>WmiObject<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Where<ph id=\"ph2\">\\-</ph>Object<ept id=\"p2\">**</ept> pipeline elements direct Windows PowerShell to evaluate them first:","pos":[10277,10443]},{"pos":[10579,10658],"content":"You can use the same command format to invoke the <bpt id=\"p1\">**</bpt>RenewDHCPLeaseAll<ept id=\"p1\">**</ept> method:"},{"content":"Creating a Network Share","pos":[10796,10820]},{"pos":[10821,10887],"content":"To create a network share, use the <bpt id=\"p1\">**</bpt>Win32<ph id=\"ph1\">\\_</ph>Share Create<ept id=\"p1\">**</ept> method:"},{"pos":[11060,11135],"content":"You can also create the share by using <bpt id=\"p1\">**</bpt>net share<ept id=\"p1\">**</ept> in Windows PowerShell:"},{"content":"Removing a Network Share","pos":[11228,11252]},{"content":"You can remove a network share with <bpt id=\"p1\">**</bpt>Win32<ph id=\"ph1\">\\_</ph>Share<ept id=\"p1\">**</ept>, but the process is slightly different from creating a share, because you need to retrieve the specific share to be removed, rather than the <bpt id=\"p2\">**</bpt>Win32<ph id=\"ph2\">\\_</ph>Share<ept id=\"p2\">**</ept> class.","pos":[11253,11470]},{"content":"The following statement deletes the share \"TempShare\":","pos":[11471,11525]},{"pos":[11623,11651],"content":"<bpt id=\"p1\">**</bpt>Net share<ept id=\"p1\">**</ept> works as well:"},{"content":"Connecting a Windows Accessible Network Drive","pos":[11734,11779]},{"content":"The <bpt id=\"p1\">**</bpt>New<ph id=\"ph1\">\\-</ph>PSDrive<ept id=\"p1\">**</ept> cmdlets creates a Windows PowerShell drive, but drives created this way are available only to Windows PowerShell.","pos":[11780,11914]},{"content":"To create a new networked drive, you can use the <bpt id=\"p1\">**</bpt>WScript.Network<ept id=\"p1\">**</ept> COM object.","pos":[11915,11995]},{"content":"The following command maps the share <ph id=\"ph1\">\\\\\\\\</ph>FPS01<ph id=\"ph2\">\\\\</ph>users to local drive B:","pos":[11996,12067]},{"pos":[12157,12195],"content":"The <bpt id=\"p1\">**</bpt>net use<ept id=\"p1\">**</ept> command works as well:"},{"pos":[12231,12336],"content":"Drives mapped with either <bpt id=\"p1\">**</bpt>WScript.Network<ept id=\"p1\">**</ept> or net use are immediately available to Windows PowerShell."}],"content":"---\ntitle:  Performing Networking Tasks\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  a43cc55f-70c1-45c8-9467-eaad0d57e3b5\n---\n\n# Performing Networking Tasks\nBecause TCP\\/IP is the most commonly used network protocol, most low\\-level network protocol administration tasks involve TCP\\/IP. In this section, we use Windows PowerShell and WMI to do these tasks.\n\n### Listing IP Addresses for a Computer\nTo get all IP addresses in use on the local computer, use the following command:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName . | Format-Table -Property IPAddress\n```\n\nThe output of this command differs from most property lists, because values are enclosed in braces:\n\n<pre>IPAddress\n---------\n{192.168.1.80}\n{192.168.148.1}\n{192.168.171.1}\n{0.0.0.0}</pre>\n\nTo understand why the braces appear, use the Get\\-Member cmdlet to examine the **IPAddress** property:\n\n<pre>PS> Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName . | Get-Member -Name IPAddress\nTypeName: System.Management.ManagementObject#root\\cimv2\\Win32_NetworkAdapter\nConfiguration\nName      MemberType Definition\n----      ---------- ----------\nIPAddress Property   System.String[] IPAddress {get;}</pre>\n\nThe IPAddress property for each network adapter is actually an array. The braces in the definition indicate that **IPAddress** is not a **System.String** value, but an array of **System.String** values.\n\n### Listing IP Configuration Data\nTo display detailed IP configuration data for each network adapter, use the following command:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName .\n```\n\nThe default display for the network adapter configuration object is a very reduced set of the available information. For in\\-depth inspection and troubleshooting, use Select\\-Object or a formatting cmdlet, such as Format\\-List, to specify the properties to be displayed.\n\nIf you are not interested in IPX or WINS properties—probably the case in a modern TCP\\/IP network—you can use the ExcludeProperty parameter of Select\\-Object to hide properties with names that begin with \"WINS\" or \"IPX:\"\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName . | Select-Object -Property [a-z]* -ExcludeProperty IPX*,WINS*\n```\n\nThis command returns detailed information about DHCP, DNS, routing, and other minor IP configuration properties.\n\n### Pinging Computers\nYou can perform a simple ping against a computer using by **Win32\\_PingStatus**. The following command performs the ping, but returns lengthy output:\n\n```\nGet-WmiObject -Class Win32_PingStatus -Filter \"Address='127.0.0.1'\" -ComputerName .\n```\n\nA more useful form for summary information a display of the Address, ResponseTime, and StatusCode properties, as generated by the following command. The Autosize parameter of Format\\-Table resizes the table columns so that they display properly in Windows PowerShell.\n\n```\nPS> Get-WmiObject -Class Win32_PingStatus -Filter \"Address='127.0.0.1'\" -ComputerName . | Format-Table -Property Address,ResponseTime,StatusCode -Autosize\n\nAddress   ResponseTime StatusCode\n-------   ------------ ----------\n127.0.0.1            0          0\nA status code of 0 indicates a successful ping.\n```\n\nYou can use an array to ping multiple computers with a single command. Because there is more than one address, use the **ForEach\\-Object** to ping each address separately:\n\n```\n\"127.0.0.1\",\"localhost\",\"research.microsoft.com\" | ForEach-Object -Process {Get-WmiObject -Class Win32_PingStatus -Filter (\"Address='\" + $_ + \"'\") -ComputerName .} | Select-Object -Property Address,ResponseTime,StatusCode\n```\n\nYou can use the same command format to ping all of the computers on a subnet, such as a private network that uses network number 192.168.1.0 and a standard Class C subnet mask (255.255.255.0)., Only addresses in the range of 192.168.1.1 through 192.168.1.254 are legitimate local addresses (0 is always reserved for the network number and 255 is a subnet broadcast address).\n\nTo represent an array of the numbers from 1 through 254 in Windows PowerShell, use the statement **1..254.** A complete subnet ping can be performed by generating the array and then adding the values onto a partial address in the ping statement:\n\n```\n1..254| ForEach-Object -Process {Get-WmiObject -Class Win32_PingStatus -Filter (\"Address='192.168.1.\" + $_ + \"'\") -ComputerName .} | Select-Object -Property Address,ResponseTime,StatusCode\n```\n\nNote that this technique for generating a range of addresses can be used elsewhere as well. You can generate a complete set of addresses in this way:\n\n`$ips = 1..254 | ForEach-Object -Process {\"192.168.1.\" + $_}`\n\n### Retrieving Network Adapter Properties\nEarlier in this user's guide, we mentioned that you could retrieve general configuration properties by using **Win32\\_NetworkAdapterConfiguration**. Although not strictly TCP\\/IP information, network adapter information such as MAC addresses and adapter types can be useful for understanding what is going on with a computer. To get a summary of this information, use the following command:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapter -ComputerName .\n```\n\n### Assigning the DNS Domain for a Network Adapter\nTo assign the DNS domain for automatic name resolution, use the **Win32\\_NetworkAdapterConfiguration SetDNSDomain** method. Because you assign the DNS domain for each network adapter configuration independently, you need to use a **ForEach\\-Object** statement to assign the domain to each adapter:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=true -ComputerName . | ForEach-Object -Process { $_. SetDNSDomain(\"fabrikam.com\") }\n```\n\nThe filtering statement \"IPEnabled\\=true\" is necessary, because even on a network that uses only TCP\\/IP, several of the network adapter configurations on a computer are not true TCP\\/IP adapters; they are general software elements supporting RAS, PPTP, QoS, and other services for all adapters and thus do not have an address of their own.\n\nYou can filter the command by using the **Where\\-Object** cmdlet, instead of using the **Get\\-WmiObject** filter.\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -ComputerName . | Where-Object -FilterScript {$_.IPEnabled} | ForEach-Object -Process {$_.SetDNSDomain(\"fabrikam.com\")}\n```\n\n### Performing DHCP Configuration Tasks\nModifying DHCP details involves working with a set of network adapters, just as the DNS configuration does. There are several distinct actions you can perform by using WMI, and we will step through a few of the common ones.\n\n#### Determining DHCP\\-Enabled Adapters\nTo find the DHCP\\-enabled adapters on a computer, use the following command:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter \"DHCPEnabled=true\" -ComputerName .\n```\n\nTo exclude adapters with IP configuration problems, you can retrieve only IP\\-enabled adapters:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter \"IPEnabled=true and DHCPEnabled=true\" -ComputerName .\n```\n\n#### Retrieving DHCP Properties\nBecause DHCP\\-related properties for an adapter generally begin with \"DHCP,\" you can use the Property parameter of Format\\-Table to display only those properties:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter \"DHCPEnabled=true\" -ComputerName . | Format-Table -Property DHCP*\n```\n\n#### Enabling DHCP on Each Adapter\nTo enable DHCP on all adapters, use the following command:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=true -ComputerName . | ForEach-Object -Process {$_.EnableDHCP()}\n```\n\nYou can use the **Filter** statement \"IPEnabled\\=true and DHCPEnabled\\=false\" to avoid enabling DHCP where it is already enabled, but omitting this step will not cause errors.\n\n#### Releasing and Renewing DHCP Leases on Specific Adapters\nThe **Win32\\_NetworkAdapterConfiguration** class has **ReleaseDHCPLease** and **RenewDHCPLease** methods. Both are used in the same way. In general, use these methods if you only need to release or renew addresses for an adapter on a specific subnet. The easiest way to filter adapters on a subnet is to choose only the adapter configurations that use the gateway for that subnet. For example, the following command releases all DHCP leases on adapters on the local computer that are obtaining DHCP leases from 192.168.1.254:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter \"IPEnabled=true and DHCPEnabled=true\" -ComputerName . | Where-Object -FilterScript {$_.DHCPServer -contains \"192.168.1.254\"} | ForEach-Object -Process {$_.ReleaseDHCPLease()}\n```\n\nThe only change for renewing a DHCP lease is to use the **RenewDHCPLease** method instead of the **ReleaseDHCPLease** method:\n\n```\nGet-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter \"IPEnabled=true and DHCPEnabled=true\" -ComputerName . | Where-Object -FilterScript {$_.DHCPServer -contains \"192.168.1.254\"} | ForEach-Object -Process {$_.ReleaseDHCPLease()}\n```\n\n> [!NOTE]\n> When using these methods on a remote computer, be aware that you can lose access to the remote system if you are connected to it through the adapter with the released or renewed lease.\n\n#### Releasing and Renewing DHCP Leases on All Adapters\nYou can perform global DHCP address releases or renewals on all adapters by using the **Win32\\_NetworkAdapterConfiguration** methods, **ReleaseDHCPLeaseAll** and **RenewDHCPLeaseAll**. However, the command must apply to the WMI class, rather than a particular adapter, because releasing and renewing leases globally is performed on the class, not on a specific adapter.\n\nYou can get a reference to a WMI class, instead of class instances, by listing all WMI classes and then selecting only the desired class by name. For example, the following command returns the Win32\\_NetworkAdapterConfiguration class:\n\n```\nGet-WmiObject -List | Where-Object -FilterScript {$_.Name -eq \"Win32_NetworkAdapterConfiguration\"}\n```\n\nYou can treat the entire command as the class and then invoke the **ReleaseDHCPAdapterLease** method on it. In the following command, the parentheses surrounding the **Get\\-WmiObject** and **Where\\-Object** pipeline elements direct Windows PowerShell to evaluate them first:\n\n```\n( Get-WmiObject -List | Where-Object -FilterScript {$_.Name -eq \"Win32_NetworkAdapterConfiguration\"} ).ReleaseDHCPLeaseAll()\n```\n\nYou can use the same command format to invoke the **RenewDHCPLeaseAll** method:\n\n```\n( Get-WmiObject -List | Where-Object -FilterScript {$_.Name -eq \"Win32_NetworkAdapterConfiguration\"} ).RenewDHCPLeaseAll()\n```\n\n### Creating a Network Share\nTo create a network share, use the **Win32\\_Share Create** method:\n\n```\n(Get-WmiObject -List -ComputerName . | Where-Object -FilterScript {$_.Name -eq \"Win32_Share\"}).Create(\"C:\\temp\",\"TempShare\",0,25,\"test share of the temp folder\")\n```\n\nYou can also create the share by using **net share** in Windows PowerShell:\n\n```\nnet share tempshare=c:\\temp /users:25 /remark:\"test share of the temp folder\"\n```\n\n### Removing a Network Share\nYou can remove a network share with **Win32\\_Share**, but the process is slightly different from creating a share, because you need to retrieve the specific share to be removed, rather than the **Win32\\_Share** class. The following statement deletes the share \"TempShare\":\n\n```\n(Get-WmiObject -Class Win32_Share -ComputerName . -Filter \"Name='TempShare'\").Delete()\n```\n\n**Net share** works as well:\n\n```\nPS> net share tempshare /delete\ntempshare was deleted successfully.\n```\n\n### Connecting a Windows Accessible Network Drive\nThe **New\\-PSDrive** cmdlets creates a Windows PowerShell drive, but drives created this way are available only to Windows PowerShell. To create a new networked drive, you can use the **WScript.Network** COM object. The following command maps the share \\\\\\\\FPS01\\\\users to local drive B:\n\n```\n(New-Object -ComObject WScript.Network).MapNetworkDrive(\"B:\", \"\\\\FPS01\\users\")\n```\n\nThe **net use** command works as well:\n\n```\nnet use B: \\\\FPS01\\users\n```\n\nDrives mapped with either **WScript.Network** or net use are immediately available to Windows PowerShell.\n\n"}
<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pt-br" original="2/22/2016 3:09:46 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06f6ba62b807e09c724e575317bd2f75cadb9226</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Getting Started with PowerShell Desired State Configuration</source>
            <target state="new">Getting Started with PowerShell Desired State Configuration</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>This guide describes how to begin creating PowerShell Desired State Configuration documents and apply them to machines.</source>
            <target state="new">This guide describes how to begin creating PowerShell Desired State Configuration documents and apply them to machines.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>It assumes basic familiarity with PowerShell cmdlets, modules, and functions.</source>
            <target state="new">It assumes basic familiarity with PowerShell cmdlets, modules, and functions.</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Create a Configuration</source>
            <target state="new">Create a Configuration</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>**Configurations**<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> are documents that describe an environment.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>**Configurations**<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> are documents that describe an environment.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Environments consist of "<bpt id="2">&lt;strong&gt;</bpt>nodes<ept id="2">&lt;/strong&gt;</ept>", which are commonly virtual or physical machines.</source>
            <target state="new">Environments consist of "<bpt id="2">&lt;strong&gt;</bpt>nodes<ept id="2">&lt;/strong&gt;</ept>", which are commonly virtual or physical machines.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Configurations can come in a variety of forms.</source>
            <target state="new">Configurations can come in a variety of forms.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The easiest way to create a new configuration is to create a .ps1 (PowerShell script) file.</source>
            <target state="new">The easiest way to create a new configuration is to create a .ps1 (PowerShell script) file.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>To do this, open your editor of choice.</source>
            <target state="new">To do this, open your editor of choice.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>The PowerShell ISE is a good choice, since it understands DSC natively.</source>
            <target state="new">The PowerShell ISE is a good choice, since it understands DSC natively.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Save the following as a PS1:</source>
            <target state="new">Save the following as a PS1:</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Parts of a Configuration</source>
            <target state="new">Parts of a Configuration</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Configuration<ept id="1">&lt;/strong&gt;</ept> is a keyword that has been added to PowerShell 4.0.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Configuration<ept id="1">&lt;/strong&gt;</ept> is a keyword that has been added to PowerShell 4.0.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>It signifies a special kind of PowerShell function used by Desired State Configuration.</source>
            <target state="new">It signifies a special kind of PowerShell function used by Desired State Configuration.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>In this example, the function is named myFirstConfiguration.</source>
            <target state="new">In this example, the function is named myFirstConfiguration.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>The next line is a import statement, similar to importing a module.</source>
            <target state="new">The next line is a import statement, similar to importing a module.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>It will be discussed later on.</source>
            <target state="new">It will be discussed later on.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>"Node" defines the machine name this configuration will act on.</source>
            <target state="new">"Node" defines the machine name this configuration will act on.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Although this configuration is edited locally, configurations can reach out to remote nodes and configure them.</source>
            <target state="new">Although this configuration is edited locally, configurations can reach out to remote nodes and configure them.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Nodes can be machine names or IP addresses.</source>
            <target state="new">Nodes can be machine names or IP addresses.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>You can have multiple nodes in a single configuration document.</source>
            <target state="new">You can have multiple nodes in a single configuration document.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Using <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>configuration data<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you can also have the same configuration apply to multiple nodes.</source>
            <target state="new">Using <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>configuration data<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you can also have the same configuration apply to multiple nodes.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>In this case,  the node is "localhost" - which means the local computer.</source>
            <target state="new">In this case,  the node is "localhost" - which means the local computer.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The next item is a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>**resource**<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The next item is a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>**resource**<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Resources are building blocks of configurations.</source>
            <target state="new">Resources are building blocks of configurations.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Each resource is a module that defines the implementation logic of a single aspect of a machine.</source>
            <target state="new">Each resource is a module that defines the implementation logic of a single aspect of a machine.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>You can view every resource on your machine by running <bpt id="2">&lt;strong&gt;</bpt>Get-DscResource<ept id="2">&lt;/strong&gt;</ept> in PowerShell.</source>
            <target state="new">You can view every resource on your machine by running <bpt id="2">&lt;strong&gt;</bpt>Get-DscResource<ept id="2">&lt;/strong&gt;</ept> in PowerShell.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Resources must be present on the local machine and imported before they can be used in a configuration with <bpt id="2">&lt;strong&gt;</bpt>Import-DscResource<ept id="2">&lt;/strong&gt;</ept> which is on the second line of this configuration.</source>
            <target state="new">Resources must be present on the local machine and imported before they can be used in a configuration with <bpt id="2">&lt;strong&gt;</bpt>Import-DscResource<ept id="2">&lt;/strong&gt;</ept> which is on the second line of this configuration.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Enacting a Configuration<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Enacting a Configuration<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>If the script above is saved and run, no output will be produced.</source>
            <target state="new">If the script above is saved and run, no output will be produced.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>This is because a configuration is just a function, and the script above has defined the function but not yet run it.</source>
            <target state="new">This is because a configuration is just a function, and the script above has defined the function but not yet run it.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>After the function is defined, it must be invoked:</source>
            <target state="new">After the function is defined, it must be invoked:</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>When executed, configuration functions validate the configuration is valid.</source>
            <target state="new">When executed, configuration functions validate the configuration is valid.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>It should have no syntax errors, resources should have all mandatory parameters defined, and all resources should be imported before execution.</source>
            <target state="new">It should have no syntax errors, resources should have all mandatory parameters defined, and all resources should be imported before execution.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Once the configuration is executed, it creates a folder with the name of the configuration containing a <bpt id="2">&lt;strong&gt;</bpt>.MOF file<ept id="2">&lt;/strong&gt;</ept> for every node in the configuration.</source>
            <target state="new">Once the configuration is executed, it creates a folder with the name of the configuration containing a <bpt id="2">&lt;strong&gt;</bpt>.MOF file<ept id="2">&lt;/strong&gt;</ept> for every node in the configuration.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>The .MOF file is a standards-based management format which is used by PowerShell DSC to communicate over the network.</source>
            <target state="new">The .MOF file is a standards-based management format which is used by PowerShell DSC to communicate over the network.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>To enact the configuration:</source>
            <target state="new">To enact the configuration:</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>This creates a PowerShell job that reaches out to the nodes in the configuration and configures them.</source>
            <target state="new">This creates a PowerShell job that reaches out to the nodes in the configuration and configures them.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>To see the output of the job, use -wait.</source>
            <target state="new">To see the output of the job, use -wait.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>
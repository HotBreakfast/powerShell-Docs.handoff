{"nodes":[{"content":"Credentials Options in Configuration Data","pos":[2,43]},{"content":"Applies To: Windows PowerShell 5.0","pos":[45,79]},{"content":"Plain Text Passwords and Domain Users","pos":[84,121]},{"content":"DSC configurations containing a credential without encryption will generate an error messages about plain text passwords.","pos":[123,244]},{"content":"Also, DSC will generate a warning when using domain credentials.","pos":[245,309]},{"content":"To suppress these error and warning messages use the DSC configuration data keywords:","pos":[310,395]},{"content":"PsDscAllowPlainTextPassword","pos":[400,427]},{"content":"PsDscAllowDomainUser","pos":[434,454]},{"content":"Handling Credentials in DSC","pos":[461,488]},{"content":"DSC configuration resources run as <ph id=\"ph1\">`Local System`</ph> by default.","pos":[490,551]},{"content":"However, some resources need a credential, for example when the <ph id=\"ph1\">`Package`</ph> resource needs to install software under a specific user account.","pos":[552,691]},{"content":"Earlier resources used a hard-coded <ph id=\"ph1\">`Credential`</ph> property name to handle this.","pos":[693,771]},{"content":"WMF 5.0 added an automatic <ph id=\"ph1\">`PsDscRunAsCredential`</ph> property for all resources.","pos":[772,849]},{"content":"For information about using <ph id=\"ph1\">`PsDscRunAsCredential`</ph>, see <bpt id=\"p1\">[</bpt>Running DSC with user credentials<ept id=\"p1\">](runAsUser.md)</ept>.","pos":[850,956]},{"content":"Newer resources and custom resources can use this automatic property instead of creating their own property for credentials.","pos":[957,1081]},{"content":"Note that the design of some resources are to use multiple credentials for a specific reason, and they will have their own credential properties.","pos":[1084,1229]},{"pos":[1232,1392],"content":"To find the available credential properties on a resource use either <ph id=\"ph1\">`Get-DscResource -Name ResourceName -Syntax`</ph> or the Intellisense in the ISE (<ph id=\"ph2\">`CTRL+SPACE`</ph>)."},{"content":"This example uses a <bpt id=\"p1\">[</bpt>Group<ept id=\"p1\">](https://msdn.microsoft.com/en-us/powershell/dsc/groupresource)</ept> resource from the <ph id=\"ph1\">`PSDesiredStateConfiguration`</ph> built-in DSC resource module.","pos":[1794,1962]},{"content":"It can create local groups and add or remove members.","pos":[1963,2016]},{"content":"It accepts both the <ph id=\"ph1\">`Credential`</ph> property and the automatic <ph id=\"ph2\">`PsDscRunAsCredential`</ph> property.","pos":[2017,2109]},{"content":"However, the resource only uses the <ph id=\"ph1\">`Credential`</ph> property.","pos":[2110,2168]},{"content":"Read more about <ph id=\"ph1\">`PsDscRunAsCredential`</ph> in the <bpt id=\"p1\">[</bpt>WMF Release Notes<ept id=\"p1\">](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_runas)</ept>.","pos":[2169,2294]},{"content":"Example: The Group resource Credential property","pos":[2299,2346]},{"content":"DSC runs under <ph id=\"ph1\">`Local System`</ph>, so it already has permissions to change local users and groups.","pos":[2348,2442]},{"content":"If the member added is a local account, then no credential is necessary.","pos":[2443,2515]},{"content":"If the <ph id=\"ph1\">`Group`</ph> resource adds a domain account to the local group, then a credential is necessary.","pos":[2516,2613]},{"content":"Anonymous queries to Active Directory are not allowed.","pos":[2615,2669]},{"content":"The <ph id=\"ph1\">`Credential`</ph> property of the <ph id=\"ph2\">`Group`</ph> resource is the domain account used to query Active Directory.","pos":[2670,2773]},{"content":"For most purposes this could be a generic user account, because by default users can <bpt id=\"p1\">*</bpt>read<ept id=\"p1\">*</ept> most of the objects in Active Directory.","pos":[2774,2906]},{"content":"Example Configuration","pos":[2911,2932]},{"content":"The following example code uses DSC to populate a local group with a domain user:","pos":[2934,3015]},{"content":"This code generates both an error and warning message:","pos":[3569,3623]},{"content":"This example has two issues:","pos":[4555,4583]},{"content":"An error explains that plain text passwords are not recommended","pos":[4588,4651]},{"content":"A warning advises against using a domain credential","pos":[4656,4707]},{"content":"PsDscAllowPlainTextPassword","pos":[4712,4739]},{"content":"The first error message has a URL with documentation.","pos":[4741,4794]},{"content":"This link explains how to encrypt passwords using a <bpt id=\"p1\">[</bpt>ConfigurationData<ept id=\"p1\">](https://msdn.microsoft.com/en-us/powershell/dsc/configdata)</ept> structure and a certificate.","pos":[4795,4955]},{"content":"For more information on certificates and DSC <bpt id=\"p1\">[</bpt>read this post<ept id=\"p1\">](http://aka.ms/certs4dsc)</ept>.","pos":[4956,5043]},{"pos":[5045,5186],"content":"To force a plain text password, the resource requires the <ph id=\"ph1\">`PsDscAllowPlainTextPassword`</ph> keyword in the configuration data section as follows:"},{"pos":[5904,5982],"content":"Note that <ph id=\"ph1\">`NodeName`</ph> cannot equal asterisk, a specific node name is mandatory."},{"content":"Microsoft advises to avoid plain text passwords due to the significant security risk.","pos":[5987,6072]},{"content":"Domain Credentials","pos":[6079,6097]},{"content":"Running the example configuration script again (with or without encryption), still generates the warning that using a domain account for a credential is not recommended.","pos":[6099,6268]},{"content":"Using a local account eliminates potential exposure of domain credentials that could be used on other servers.","pos":[6269,6379]},{"content":"When using credentials with DSC resources, prefer a local account over a domain account when possible.","pos":[6383,6485]},{"content":"If there is a '\\' or '@' in the <ph id=\"ph1\">`Username`</ph> property of the credential, then DSC will treat it as a domain account.","pos":[6489,6603]},{"content":"There is an exception for \"localhost\", \"127.0.0.1\", and \"::1\" in the domain portion of the user name.","pos":[6604,6705]},{"content":"PSDscAllowDomainUser","pos":[6710,6730]},{"content":"In the DSC <ph id=\"ph1\">`Group`</ph> resource example above, querying an Active Directory domain <bpt id=\"p1\">*</bpt>requires<ept id=\"p1\">*</ept> a domain account.","pos":[6732,6839]},{"content":"In this case add the <ph id=\"ph1\">`PSDscAllowDomainUser`</ph> property to the <ph id=\"ph2\">`ConfigurationData`</ph> block as follows:","pos":[6840,6937]},{"content":"Now the configuration script will generate the MOF file with no errors or warnings.","pos":[7198,7281]}],"content":"# Credentials Options in Configuration Data\n>Applies To: Windows PowerShell 5.0\n\n## Plain Text Passwords and Domain Users\n\nDSC configurations containing a credential without encryption will generate an error messages about plain text passwords.\nAlso, DSC will generate a warning when using domain credentials.\nTo suppress these error and warning messages use the DSC configuration data keywords:\n* **PsDscAllowPlainTextPassword**\n* **PsDscAllowDomainUser**\n\n## Handling Credentials in DSC\n\nDSC configuration resources run as `Local System` by default.\nHowever, some resources need a credential, for example when the `Package` resource needs to install software under a specific user account.\n\nEarlier resources used a hard-coded `Credential` property name to handle this.\nWMF 5.0 added an automatic `PsDscRunAsCredential` property for all resources. For information about using `PsDscRunAsCredential`, see [Running DSC with user credentials](runAsUser.md).\nNewer resources and custom resources can use this automatic property instead of creating their own property for credentials.\n\n*Note that the design of some resources are to use multiple credentials for a specific reason, and they will have their own credential properties.*\n\nTo find the available credential properties on a resource use either `Get-DscResource -Name ResourceName -Syntax` or the Intellisense in the ISE (`CTRL+SPACE`).\n\n```PowerShell\nPS C:\\> Get-DscResource -Name Group -Syntax\nGroup [String] #ResourceName\n{\n    GroupName = [string]\n    [Credential = [PSCredential]]\n    [DependsOn = [string[]]]\n    [Description = [string]]\n    [Ensure = [string]{ Absent | Present }]\n    [Members = [string[]]]\n    [MembersToExclude = [string[]]]\n    [MembersToInclude = [string[]]]\n    [PsDscRunAsCredential = [PSCredential]]\n}\n```\n\nThis example uses a [Group](https://msdn.microsoft.com/en-us/powershell/dsc/groupresource) resource from the `PSDesiredStateConfiguration` built-in DSC resource module.\nIt can create local groups and add or remove members.\nIt accepts both the `Credential` property and the automatic `PsDscRunAsCredential` property.\nHowever, the resource only uses the `Credential` property.\nRead more about `PsDscRunAsCredential` in the [WMF Release Notes](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_runas).\n\n## Example: The Group resource Credential property\n\nDSC runs under `Local System`, so it already has permissions to change local users and groups.\nIf the member added is a local account, then no credential is necessary.\nIf the `Group` resource adds a domain account to the local group, then a credential is necessary.\n\nAnonymous queries to Active Directory are not allowed.\nThe `Credential` property of the `Group` resource is the domain account used to query Active Directory.\nFor most purposes this could be a generic user account, because by default users can *read* most of the objects in Active Directory.\n\n## Example Configuration\n\nThe following example code uses DSC to populate a local group with a domain user:\n\n```PowerShell\nConfiguration DomainCredentialExample\n{\n    param\n    (\n        [PSCredential] $DomainCredential\n    )\n    Import-DscResource -ModuleName PSDesiredStateConfiguration\n\n    node localhost\n    {\n        Group DomainUserToLocalGroup\n        {\n            GroupName        = 'ApplicationAdmins'\n            MembersToInclude = 'contoso\\alice'\n            Credential       = $DomainCredential\n        }\n    }\n}\n\n$cred = Get-Credential -UserName contoso\\genericuser -Message \"Password please\"\nDomainCredentialExample -DomainCredential $cred\n```\n\nThis code generates both an error and warning message:\n\n```\nConvertTo-MOFInstance : System.InvalidOperationException error processing\nproperty 'Credential' OF TYPE 'Group': Converting and storing encrypted\npasswords as plain text is not recommended. For more information on securing\ncredentials in MOF file, please refer to MSDN blog:\nhttp://go.microsoft.com/fwlink/?LinkId=393729\n\nAt line:11 char:9\n+   Group\nAt line:297 char:16\n+     $aliasId = ConvertTo-MOFInstance $keywordName $canonicalizedValue\n+                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (:) [Write-Error], InvalidOperationException\n    + FullyQualifiedErrorId : FailToProcessProperty,ConvertTo-MOFInstance\n\nWARNING: It is not recommended to use domain credential for node 'localhost'.\nIn order to suppress the warning, you can add a property named\n'PSDscAllowDomainUser' with a value of $true to your DSC configuration data\nfor node 'localhost'.\n```\n\nThis example has two issues:\n1.  An error explains that plain text passwords are not recommended\n2.  A warning advises against using a domain credential\n\n## PsDscAllowPlainTextPassword\n\nThe first error message has a URL with documentation.\nThis link explains how to encrypt passwords using a [ConfigurationData](https://msdn.microsoft.com/en-us/powershell/dsc/configdata) structure and a certificate.\nFor more information on certificates and DSC [read this post](http://aka.ms/certs4dsc).\n\nTo force a plain text password, the resource requires the `PsDscAllowPlainTextPassword` keyword in the configuration data section as follows:\n\n```PowerShell\nConfiguration DomainCredentialExample\n{\n    param\n    (\n        [PSCredential] $DomainCredential\n    )\n    Import-DscResource -ModuleName PSDesiredStateConfiguration\n\n    node localhost\n    {\n        Group DomainUserToLocalGroup\n        {\n            GroupName        = 'ApplicationAdmins'\n            MembersToInclude = 'contoso\\alice'\n            Credential       = $DomainCredential\n        }\n    }\n}\n\n$cd = @{\n    AllNodes = @(\n        @{\n            NodeName = 'localhost'\n            PSDscAllowPlainTextPassword = $true\n        }\n    )\n}\n\n$cred = Get-Credential -UserName contoso\\genericuser -Message \"Password please\"\nDomainCredentialExample -DomainCredential $cred -ConfigurationData $cd\n```\n\n*Note that `NodeName` cannot equal asterisk, a specific node name is mandatory.*\n\n**Microsoft advises to avoid plain text passwords due to the significant security risk.**\n\n## Domain Credentials\n\nRunning the example configuration script again (with or without encryption), still generates the warning that using a domain account for a credential is not recommended.\nUsing a local account eliminates potential exposure of domain credentials that could be used on other servers.\n\n**When using credentials with DSC resources, prefer a local account over a domain account when possible.**\n\nIf there is a '\\' or '@' in the `Username` property of the credential, then DSC will treat it as a domain account.\nThere is an exception for \"localhost\", \"127.0.0.1\", and \"::1\" in the domain portion of the user name.\n\n## PSDscAllowDomainUser\n\nIn the DSC `Group` resource example above, querying an Active Directory domain *requires* a domain account.\nIn this case add the `PSDscAllowDomainUser` property to the `ConfigurationData` block as follows:\n\n```PowerShell\n$cd = @{\n    AllNodes = @(\n        @{\n            NodeName = 'localhost'\n            PSDscAllowDomainUser = $true\n            # PSDscAllowPlainTextPassword = $true\n            CertificateFile = \"C:\\PublicKeys\\server1.cer\"\n        }\n    )\n}\n```\n\nNow the configuration script will generate the MOF file with no errors or warnings.\n"}
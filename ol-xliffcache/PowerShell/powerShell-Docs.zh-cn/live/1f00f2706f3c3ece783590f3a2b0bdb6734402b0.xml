{"nodes":[{"content":"DSC Improvements in WMF 5.1 (Preview)","pos":[13,50]},{"content":"Improvements in Desired State Configuration (DSC) in WMF 5.1","pos":[218,278]},{"content":"DSC Class resource improvements","pos":[283,314]},{"content":"In WMF 5.1, we have fixed the following known issues:","pos":[316,369]},{"content":"Get-DscConfiguration may return empty values (null) or errors if a complex/hashtable type is returned by Get() function of a class based DSC resource.","pos":[372,522]},{"content":"Get-DscConfiguration returns error if RunAs credential is used in DSC Configuration.","pos":[525,609]},{"content":"Class-based resource cannot be used in a Composite Configuration.","pos":[612,677]},{"content":"Start-DscConfiguration hangs if Class based resource has a property of its own type.","pos":[680,764]},{"content":"Class-based resource cannot be used as an exclusive resource.","pos":[767,828]},{"content":"DSC resource debugging improvements","pos":[834,869]},{"content":"In WMF 5.0, the PowerShell debugger did not stop at the Class Resource method (Get/Set/Test) directly.","pos":[871,973]},{"content":"In WMF 5.1, the debugger will stop at the Class Resource method in the same way as for MOF-based resources methods.","pos":[974,1089]},{"content":"DSC pull client supports TLS 1.1 and TLS 1.2","pos":[1094,1138]},{"content":"Previously, the DSC pull client only supported SSL3.0 and TLS1.0 over HTTPS connections.","pos":[1140,1228]},{"content":"When forced to use more secure protocols, the pull client would stop functioning.","pos":[1229,1310]},{"content":"In WMF 5.1, the DSC pull client no longer supports SSL 3.0 and adds support for the more secure TLS 1.1 and TLS 1.2 protocols.","pos":[1311,1437]},{"content":"Improved pull server registration","pos":[1444,1477]},{"content":"In the earlier versions of WMF, simultaneous registrations/reporting requests to a DSC pull perver while using the ESENT database would lead to LCM failing to register and/or report.","pos":[1482,1664]},{"content":"In such cases, the event logs on the pull server will have the error \"Instance Name already in use.\"","pos":[1665,1765]},{"content":"This was due to an incorrect pattern being used to access the ESENT database in a multi-threaded scenario.","pos":[1766,1872]},{"content":"In WMF 5.1, this issue has been fixed.","pos":[1873,1911]},{"content":"Concurrent registrations or reporting (involving ESENT database) will work fine in WMF 5.1.","pos":[1912,2003]},{"content":"This issue is applicable only to the ESENT database and does not apply to the OLEDB database.","pos":[2004,2097]},{"content":"Pull partial configuration naming convention","pos":[2102,2146]},{"content":"In the previous release, the naming convention for a partial configuration was that the MOF file name in the pull server/service should match the partial configuration name specified in the local configuration manager settings that in turn must match the configuration name embedded in the MOF file.","pos":[2147,2446]},{"pos":[2449,2580],"content":"See the snapshots below:- •   Local configuration settings which defines a partial configuration that a node is allowed to receive."},{"content":"Sample metaconfiguration","pos":[2584,2608]},{"content":"•   Sample partial configuration definition","pos":[2650,2693]},{"content":"•   ‘ConfigurationName’ embedded in the generated MOF file.","pos":[2943,3002]},{"content":"Sample generated mof file","pos":[3006,3031]},{"content":"•   FileName in the pull configuration repository","pos":[3072,3121]},{"content":"FileName in Configuration Repository","pos":[3126,3162]},{"content":"Azure Automation service name generated mof files as <ph id=\"ph1\">&lt;ConfigurationName&gt;</ph>.<ph id=\"ph2\">&lt;NodeName&gt;</ph>.mof.","pos":[3209,3297]},{"content":"So the configuration below will compile to PartialOne.Localhost.mof.","pos":[3298,3366]},{"content":"This made it impossible to pull one of your partial configuration from Azure automation service.","pos":[3368,3464]},{"content":"In WMF 5.1, partial configuration in the pull server/service can be named as <ph id=\"ph1\">&lt;ConfigurationName&gt;</ph>.<ph id=\"ph2\">&lt;NodeName&gt;</ph>.mof.","pos":[3713,3825]},{"content":"Moreover, if a machine is pulling a single configuration from a pull server/service then the configuration file on the pull server configuration repository can have any file name.","pos":[3826,4005]},{"content":"is naming flexibility allow you to manage your nodes are partially by Azure Automation Service, where some configuration for your node is coming from Azure Automation DSC and you have a partial configuration that you wanted to manage locally.","pos":[4006,4248]},{"content":"The metaconfiguration below will set up a node to be managed both locally as well as by Azure Automation Service.","pos":[4250,4363]},{"content":"Using PsDscRunAsCredential with DSC composite resources","pos":[5301,5356]},{"pos":[5361,5584],"content":"We have added support for using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>PsDscRunAsCredential<ept id=\"p2\">*</ept><ept id=\"p1\">](https://msdn.microsoft.com/cs-cz/powershell/dsc/runasuser)</ept> with DSC <bpt id=\"p3\">[</bpt>Composite<ept id=\"p3\">](https://msdn.microsoft.com/en-us/powershell/dsc/authoringresourcecomposite)</ept> resources."},{"content":"Users can now specify a value for PsDscRunAsCredential when using composite resources inside configurations.","pos":[5590,5698]},{"content":"When specified, all resources rin inside a composite resource as a RunAs user.","pos":[5699,5777]},{"content":"If a composite resource calls another composite resource, all of its resources are also executed as RunAs user.","pos":[5778,5889]},{"content":"RunAs credentials are propagated to any level of the composite resource hierarchy.","pos":[5891,5973]},{"content":"If any resource inside a composite resource specifies its own value for PsDscRunAsCredential, a merge error will result during configuration compilation.","pos":[5974,6127]},{"pos":[6129,6311],"content":"This example shows usage with <bpt id=\"p1\">[</bpt>WindowsFeatureSet<ept id=\"p1\">](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_newresources)</ept> composite resource included in PSDesiredStateConfiguration module."},{"content":"DSC module and onfiguration signing validations","pos":[7083,7130]},{"content":"In DSC, configurations and modules are distributed to managed computers from the pull server.","pos":[7131,7224]},{"content":"If the pull server is compromised, an attacker can potentially modify the configurations and modules on the pull server and have it distributed to all managed nodes, compromising all of them.","pos":[7225,7416]},{"content":"In WMF 5.1, DSC supports validating the digital signatures on catalog and configuration (.MOF) files.","pos":[7420,7521]},{"content":"This feature will prevent nodes from executing configurations or module files which are not signed by a trusted signer or which have been tampered with after they have been signed by trusted signer.","pos":[7522,7720]},{"content":"How to sign configuration and module","pos":[7728,7764]},{"pos":[7772,7959],"content":"Configuration Files (.MOFS):- The existing PowerShell cmdlet <bpt id=\"p1\">[</bpt>Set-AuthenticodeSignature<ept id=\"p1\">](https://technet.microsoft.com/library/hh849819.aspx)</ept> is extended to support signing of MOF files."},{"pos":[7964,8072],"content":"Modules:- Signing of modules is done by signing the corresponding module catalog using the following steps:-"},{"content":"Create a catalog file: A catalog file contains a collection of cryptographic hashes or thumbprints.","pos":[8081,8180]},{"content":"Each thumbprint corresponds to a file that is included in the module.","pos":[8181,8250]},{"content":"The new cmdlet <bpt id=\"p1\">[</bpt>New-FileCatalog<ept id=\"p1\">](https://technet.microsoft.com/library/cc732148.aspx)</ept>, has been added to enable users create a catalog file for their module.","pos":[8251,8408]},{"pos":[8416,8550],"content":"Sign the catalog file: Use <bpt id=\"p1\">[</bpt>Set-AuthenticodeSignature<ept id=\"p1\">](https://technet.microsoft.com/library/hh849819.aspx)</ept> to sign the catalog file."},{"content":"Place the catalog file inside the module folder.","pos":[8558,8606]},{"content":"By convention, Module catalog file should be placed under the module folder with the same name as the module.","pos":[8607,8716]},{"content":"LocalConfigurationManager settings to enable signing validations","pos":[8721,8785]},{"content":"Pull","pos":[8791,8795]},{"content":"The LocalConfigurationManager of a node performs signing validation of modules and configurations based on its current settings.","pos":[8796,8924]},{"content":"By default, signature validation is disabled.","pos":[8925,8971]},{"content":"Signature validation can enabled by adding the ‘SignatureValidation’ block to the meta-configuration definition of the node as shown below:-","pos":[8972,9112]},{"content":"Setting the above metaconfiguration on a node enables signature validation on downloaded configurations and modules.","pos":[10238,10354]},{"content":"The Local Configuration Manager will perform the following steps to verify the digital signatures.","pos":[10355,10454]},{"content":"Verify the signature on a configuration file (.MOF) is valid.","pos":[10458,10519]},{"content":"It uses the powershell cmdlet <bpt id=\"p1\">[</bpt>Get-AuthenticodeSignature<ept id=\"p1\">](https://technet.microsoft.com/library/hh849805.aspx)</ept>, which is extended in 5.1 to support MOF sigature validation.","pos":[10520,10692]},{"content":"Verify the certificate authority that autherized the signer is trusted.","pos":[10696,10767]},{"content":"Download module/resource dependencies of the configuration to a temp location.","pos":[10771,10849]},{"content":"Verify the signature of the catalog included inside the module.","pos":[10853,10916]},{"pos":[10923,11076],"content":"Find a <ph id=\"ph1\">&lt;moduleName&gt;</ph>.cat file and verify its signature using the cmdlet  <bpt id=\"p1\">[</bpt>Get-AuthenticodeSignature<ept id=\"p1\">](https://technet.microsoft.com/library/hh849805.aspx)</ept>."},{"content":"Verify the certification authority that authenticated the signer is trusted.","pos":[11083,11159]},{"pos":[11166,11315],"content":"Verify the content of the modules has not been tempered using the new cmdlet <bpt id=\"p1\">[</bpt>Test-FileCatalog<ept id=\"p1\">](https://technet.microsoft.com/library/cc732148.aspx)</ept>."},{"content":"Install-module to $env:ProgramFiles\\WindowsPowerShell\\Modules\\","pos":[11319,11381]},{"content":"Process configuration","pos":[11385,11406]},{"content":"Note: Signature validation on module-catalog and configuration is only performed when the configuration is applied to the system for the first time or when the module is downloaded and installed.","pos":[11410,11605]},{"content":"Consistency runs do not validate the signature of Current.mof or its module dependencies.","pos":[11606,11695]},{"content":"If verification has failed at any stage, for instance if the configuration pulled from the pull server is unsigned, then processing of the configuration will terminate with the error shown below and all tempoarary files will be deleted.","pos":[11696,11932]},{"content":"Sample Error Output Configuration","pos":[11936,11969]},{"content":"Similarily, pulling a module whose catalog is not signed will result in the following error:-","pos":[12013,12106]},{"content":"Sample Error Output Module","pos":[12110,12136]},{"content":"Push","pos":[12181,12185]},{"content":"A configuration delivered via push might be tampered with at its source before it delivered to the node.","pos":[12186,12290]},{"content":"The Local Configuration Manager will perform similar signature validation steps for pushed or published configuration(s).","pos":[12291,12412]},{"content":"Below is a complete example of signature validation for push.","pos":[12413,12474]},{"content":"Enable signature validation on the node.","pos":[12478,12518]},{"content":"Create a sample configuration file.","pos":[12951,12986]},{"content":"Try pushing the unsigned configuration file in to the node.","pos":[13165,13224]},{"content":"ErrorUnsignedMofPushed","pos":[13306,13328]},{"content":"Sign the configurtion file using code-signing cert.","pos":[13367,13418]},{"content":"SignMofFile","pos":[13422,13433]},{"content":"Try pushing the signed mof file.","pos":[13468,13500]},{"content":"SignMofFile","pos":[13504,13515]}],"content":"---\ntitle:   DSC Improvements in WMF 5.1 (Preview)\nms.date:  2016-07-13\nkeywords:  PowerShell, DSC, WMF\ndescription:  \nms.topic:  article\nauthor:  keithb\nmanager:  dongill\nms.prod:  powershell\nms.technology: WMF\n---\n\n#Improvements in Desired State Configuration (DSC) in WMF 5.1\n\n## DSC Class resource improvements\n\nIn WMF 5.1, we have fixed the following known issues:\n* Get-DscConfiguration may return empty values (null) or errors if a complex/hashtable type is returned by Get() function of a class based DSC resource.\n* Get-DscConfiguration returns error if RunAs credential is used in DSC Configuration.\n* Class-based resource cannot be used in a Composite Configuration.\n* Start-DscConfiguration hangs if Class based resource has a property of its own type.\n* Class-based resource cannot be used as an exclusive resource.\n\n\n## DSC resource debugging improvements\n\nIn WMF 5.0, the PowerShell debugger did not stop at the Class Resource method (Get/Set/Test) directly.\nIn WMF 5.1, the debugger will stop at the Class Resource method in the same way as for MOF-based resources methods.\n\n## DSC pull client supports TLS 1.1 and TLS 1.2 \nPreviously, the DSC pull client only supported SSL3.0 and TLS1.0 over HTTPS connections. When forced to use more secure protocols, the pull client would stop functioning. In WMF 5.1, the DSC pull client no longer supports SSL 3.0 and adds support for the more secure TLS 1.1 and TLS 1.2 protocols.  \n\n## Improved pull server registration ##\n\nIn the earlier versions of WMF, simultaneous registrations/reporting requests to a DSC pull perver while using the ESENT database would lead to LCM failing to register and/or report. In such cases, the event logs on the pull server will have the error \"Instance Name already in use.\"\nThis was due to an incorrect pattern being used to access the ESENT database in a multi-threaded scenario. In WMF 5.1, this issue has been fixed. Concurrent registrations or reporting (involving ESENT database) will work fine in WMF 5.1. This issue is applicable only to the ESENT database and does not apply to the OLEDB database. \n\n##Pull partial configuration naming convention\nIn the previous release, the naming convention for a partial configuration was that the MOF file name in the pull server/service should match the partial configuration name specified in the local configuration manager settings that in turn must match the configuration name embedded in the MOF file. \n\nSee the snapshots below:-\n•   Local configuration settings which defines a partial configuration that a node is allowed to receive.\n\n![Sample metaconfiguration](../../images/MetaConfigPartialOne.png)\n\n•   Sample partial configuration definition \n\n```Powershell\nConfiguration PartialOne\n{\n    Node('localhost')\n    {\n        File test \n        {\n            DestinationPath = \"$env:TEMP\\partialconfigexample.txt\"\n            Contents = 'Partial Config Example'\n        }\n    }\n}\nPartialOne\n```\n\n•   ‘ConfigurationName’ embedded in the generated MOF file.\n\n![Sample generated mof file](../../images/PartialGeneratedMof.png)\n\n•   FileName in the pull configuration repository \n\n![FileName in Configuration Repository](../../images/PartialInConfigRepository.png)\n\nAzure Automation service name generated mof files as <ConfigurationName>.<NodeName>.mof. So the configuration below will compile to PartialOne.Localhost.mof.\n\nThis made it impossible to pull one of your partial configuration from Azure automation service.\n\n```Powershell\nConfiguration PartialOne\n{\n    Node('localhost')\n    {\n        File test \n        {\n            DestinationPath = \"$env:TEMP\\partialconfigexample.txt\"\n            Contents = 'Partial Config Example'\n        }\n    }\n}\nPartialOne\n```\n\nIn WMF 5.1, partial configuration in the pull server/service can be named as <ConfigurationName>.<NodeName>.mof. Moreover, if a machine is pulling a single configuration from a pull server/service then the configuration file on the pull server configuration repository can have any file name. is naming flexibility allow you to manage your nodes are partially by Azure Automation Service, where some configuration for your node is coming from Azure Automation DSC and you have a partial configuration that you wanted to manage locally.\n\nThe metaconfiguration below will set up a node to be managed both locally as well as by Azure Automation Service.\n\n```Powershell\n  [DscLocalConfigurationManager()]\n   Configuration RegistrationMetaConfig\n   {\n        Settings\n        {\n            RefreshFrequencyMins = 30;\n            RefreshMode = \"PULL\";            \n        }\n\n        ConfigurationRepositoryWeb web\n        {\n            ServerURL =  $endPoint\n            RegistrationKey = $registrationKey\n            ConfigurationNames = $configurationName\n        }\n\n        # Partial configuration managed by Azure Automation Service.\n        PartialConfiguration PartialCOnfigurationManagedByAzureAutomation\n        {\n            ConfigurationSource = \"[ConfigurationRepositoryWeb]Web\"   \n        }\n    \n        # This partial configuration is managed locally.\n        PartialConfiguration OnPremConfig\n        {\n            RefreshMode = \"PUSH\"\n            ExclusiveResources = @(\"Script\")\n        }\n\n   }\n\n   RegistrationMetaConfig\n   slcm -Path .\\RegistrationMetaConfig -Verbose\n ```\n\n# Using PsDscRunAsCredential with DSC composite resources   \n\nWe have added support for using [*PsDscRunAsCredential*](https://msdn.microsoft.com/cs-cz/powershell/dsc/runasuser) with DSC [Composite](https://msdn.microsoft.com/en-us/powershell/dsc/authoringresourcecomposite) resources.    \n\nUsers can now specify a value for PsDscRunAsCredential when using composite resources inside configurations. When specified, all resources rin inside a composite resource as a RunAs user. If a composite resource calls another composite resource, all of its resources are also executed as RunAs user.  RunAs credentials are propagated to any level of the composite resource hierarchy. If any resource inside a composite resource specifies its own value for PsDscRunAsCredential, a merge error will result during configuration compilation.\n\nThis example shows usage with [WindowsFeatureSet](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_newresources) composite resource included in PSDesiredStateConfiguration module. \n\n\n\n```powershell\n\nConfiguration InstallWindowsFeature     \n{\n    Import-DscResource -ModuleName PSDesiredStateConfiguration\n\n    Node $AllNodes.NodeName\n    {\n        WindowsFeatureSet features \n        {  \n            Name = @(\"Telnet-Client\",\"SNMP-Service\")  \n            Ensure = \"Present\"  \n            IncludeAllSubFeature = $true  \n            PsDscRunAsCredential = Get-Credential   \n        }  \n    }\n\n}\n\n$configData = @{\n    AllNodes = @(\n        @{\n            NodeName             = 'localhost';\n            PSDscAllowDomainUser = $true\n            CertificateFile      = 'C:\\publicKeys\\targetNode.cer'\n            Thumbprint           = '7ee7f09d-4be0-41aa-a47f-96b9e3bdec25'\n        }\n    )\n}\n\n\nInstallWindowsFeature -ConfigurationData $configData \n\n```\n\n##DSC module and onfiguration signing validations\nIn DSC, configurations and modules are distributed to managed computers from the pull server. If the pull server is compromised, an attacker can potentially modify the configurations and modules on the pull server and have it distributed to all managed nodes, compromising all of them. \n\n In WMF 5.1, DSC supports validating the digital signatures on catalog and configuration (.MOF) files. This feature will prevent nodes from executing configurations or module files which are not signed by a trusted signer or which have been tampered with after they have been signed by trusted signer. \n\n\n\n###How to sign configuration and module \n***\n* Configuration Files (.MOFS):- \nThe existing PowerShell cmdlet [Set-AuthenticodeSignature](https://technet.microsoft.com/library/hh849819.aspx) is extended to support signing of MOF files.  \n* Modules:-\nSigning of modules is done by signing the corresponding module catalog using the following steps:- \n    1. Create a catalog file: A catalog file contains a collection of cryptographic hashes or thumbprints. Each thumbprint corresponds to a file that is included in the module. The new cmdlet [New-FileCatalog](https://technet.microsoft.com/library/cc732148.aspx),\nhas been added to enable users create a catalog file for their module.\n    2. Sign the catalog file: \nUse [Set-AuthenticodeSignature](https://technet.microsoft.com/library/hh849819.aspx) to sign the catalog file.\n    3. Place the catalog file inside the module folder.\nBy convention, Module catalog file should be placed under the module folder with the same name as the module.\n\n###LocalConfigurationManager settings to enable signing validations\n\n####Pull\nThe LocalConfigurationManager of a node performs signing validation of modules and configurations based on its current settings. \nBy default, signature validation is disabled. Signature validation can enabled by adding the ‘SignatureValidation’ block to the meta-configuration definition of the node as shown below:-\n\n```PowerShell\n[DSCLocalConfigurationManager()]\nConfiguration EnableSignatureValidation\n{\n    Settings\n    {\n        RefreshMode = 'PULL'        \n    } \n    \n    ConfigurationRepositoryWeb pullserver{\n      ConfigurationNames = 'sql'\n      ServerURL = 'http://localhost:8080/PSDSCPullServer/PSDSCPullServer.svc'\n      AllowUnsecureConnection = $true\n      RegistrationKey = 'd6750ff1-d8dd-49f7-8caf-7471ea9793fc' # Replace this with correct registration key.\n    }\n    SignatureValidation validations{\n        # By default,LCM will use default Windows trusted publisher store to validate the certificate chain. If TrustedStorePath property is specified, LCM will use this custom store for retrieving the trusted publishers to validate the content.\n        TrustedStorePath = 'Cert:\\LocalMachine\\DSCStore'            \n        SignedItemType =  'Configuration','Module'         # Those are list of DSC artifacts, for which LCM need to verify their digital signature before executing them on the node.       \n    }\n \n}\nEnableSignatureValidation\nSet-DscLocalConfigurationManager -Path .\\EnableSignatureValidation -Verbose \n ```\n\nSetting the above metaconfiguration on a node enables signature validation on downloaded configurations and modules. \nThe Local Configuration Manager will perform the following steps to verify the digital signatures.\n1. Verify the signature on a configuration file (.MOF) is valid. It uses the powershell cmdlet [Get-AuthenticodeSignature](https://technet.microsoft.com/library/hh849805.aspx), which is extended in 5.1 to support MOF sigature validation.\n2. Verify the certificate authority that autherized the signer is trusted.\n3. Download module/resource dependencies of the configuration to a temp location.\n4. Verify the signature of the catalog included inside the module.\n    * Find a <moduleName>.cat file and verify its signature using the cmdlet  [Get-AuthenticodeSignature](https://technet.microsoft.com/library/hh849805.aspx).\n    * Verify the certification authority that authenticated the signer is trusted.\n    * Verify the content of the modules has not been tempered using the new cmdlet [Test-FileCatalog](https://technet.microsoft.com/library/cc732148.aspx).\n5. Install-module to $env:ProgramFiles\\WindowsPowerShell\\Modules\\\n6. Process configuration\n\n> Note: Signature validation on module-catalog and configuration is only performed when the configuration is applied to the system for the first time or when the module is downloaded and installed. Consistency runs do not validate the signature of Current.mof or its module dependencies.\nIf verification has failed at any stage, for instance if the configuration pulled from the pull server is unsigned, then processing of the configuration will terminate with the error shown below and all tempoarary files will be deleted.\n\n![Sample Error Output Configuration](../../images/PullUnsignedConfigFail.png)\n\nSimilarily, pulling a module whose catalog is not signed will result in the following error:-\n\n![Sample Error Output Module](../../images/PullUnisgnedCatalog.png)\n\n####Push\nA configuration delivered via push might be tampered with at its source before it delivered to the node. The Local Configuration Manager will perform similar signature validation steps for pushed or published configuration(s).\nBelow is a complete example of signature validation for push.\n\n* Enable signature validation on the node.\n\n```Powershell\n[DSCLocalConfigurationManager()]\nConfiguration EnableSignatureValidation\n{\n    Settings\n    {\n        RefreshMode = 'PUSH'        \n    } \n    SignatureValidation validations{\n        TrustedStorePath = 'Cert:\\LocalMachine\\DSCStore'   \n        SignedItemType =  'Configuration','Module'             \n    }\n\n}\nEnableSignatureValidation\nSet-DscLocalConfigurationManager -Path .\\EnableSignatureValidation -Verbose\n``` \n* Create a sample configuration file.\n\n```Powershell\n# Sample configuration\nConfiguration Test{\n\n    File foo\n    {\n        DestinationPath =  \"$env:TEMP\\signingTest.txt\"\n        Contents = \"ABC\"\n    }\n}\nTest\n```\n\n* Try pushing the unsigned configuration file in to the node. \n\n```Powershell\nStart-DscConfiguration -Path .\\Test -Wait -Verbose -Force\n``` \n![ErrorUnsignedMofPushed](../../images/PushUnsignedMof.png)\n\n* Sign the configurtion file using code-signing cert.\n\n![SignMofFile](../../images/SignMofFile.png)\n\n* Try pushing the signed mof file.\n\n![SignMofFile](../../images/PushSignedMof.png)\n\n"}
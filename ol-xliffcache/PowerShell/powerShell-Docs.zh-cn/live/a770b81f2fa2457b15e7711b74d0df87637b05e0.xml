{
  "nodes": [
    {
      "content": "Using resources with multiple versions",
      "pos": [
        2,
        40
      ]
    },
    {
      "content": "Applies To: Windows PowerShell 5.0",
      "pos": [
        44,
        78
      ]
    },
    {
      "content": "In PowerShell 5.0, DSC resources can have multiple versions, and versions can be installed on a computer side-by-side.",
      "pos": [
        80,
        198
      ]
    },
    {
      "content": "This is implemented by having multiple versions of a resource module",
      "pos": [
        199,
        267
      ]
    },
    {
      "content": "that are contained in the same module folder.",
      "pos": [
        268,
        313
      ]
    },
    {
      "content": "Installing multiple resource versions side-by-side",
      "pos": [
        318,
        368
      ]
    },
    {
      "content": "You can use the <bpt id=\"p1\">**</bpt>MinimumVersion<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>MaximumVersion<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>RequiredVersion<ept id=\"p3\">**</ept> parameters of the <bpt id=\"p4\">[</bpt>Install-Module<ept id=\"p4\">](https://technet.microsoft.com/en-us/library/dn807162.aspx)</ept> cmdlet to specify",
      "pos": [
        370,
        561
      ]
    },
    {
      "content": "which version of a module to install.",
      "pos": [
        562,
        599
      ]
    },
    {
      "content": "Calling <bpt id=\"p1\">**</bpt>Install-Module<ept id=\"p1\">**</ept> without specifying a version installs the most recent version.",
      "pos": [
        600,
        689
      ]
    },
    {
      "content": "For example, there are multiple versions of the <bpt id=\"p1\">**</bpt>xFailOverCluster<ept id=\"p1\">**</ept> module, each of which contains an <bpt id=\"p2\">**</bpt>xCluster<ept id=\"p2\">**</ept> resouce.",
      "pos": [
        691,
        815
      ]
    },
    {
      "content": "The result of calling <bpt id=\"p1\">**</bpt>Install-Module<ept id=\"p1\">**</ept> without specifying the",
      "pos": [
        816,
        879
      ]
    },
    {
      "content": "version number is as follows:",
      "pos": [
        880,
        909
      ]
    },
    {
      "pos": [
        1420,
        1537
      ],
      "content": "Now, if you call <bpt id=\"p1\">**</bpt>Install-Module<ept id=\"p1\">**</ept> again, but specify a <bpt id=\"p2\">**</bpt>RequiredVersion<ept id=\"p2\">**</ept> of 1.1.0.0, it results in the following:"
    },
    {
      "content": "Specifying a resource version in a configuration",
      "pos": [
        2204,
        2252
      ]
    },
    {
      "content": "If you have multiple resources installed on a computer, you must specify the version of that resource when you use it in a configuration.",
      "pos": [
        2254,
        2391
      ]
    },
    {
      "content": "You do this by specifying the <bpt id=\"p1\">**</bpt>ModuleVersion<ept id=\"p1\">**</ept>",
      "pos": [
        2392,
        2439
      ]
    },
    {
      "content": "parameter of the <bpt id=\"p1\">**</bpt>Import-DscResource<ept id=\"p1\">**</ept> keyword.",
      "pos": [
        2441,
        2489
      ]
    },
    {
      "content": "If you fail to specify the version of a resource module of a resource of which you have more than one version installed, the configuration",
      "pos": [
        2490,
        2628
      ]
    },
    {
      "content": "generates an error.",
      "pos": [
        2629,
        2648
      ]
    },
    {
      "content": "The following configuration shows how to specify the version of the resource to call:",
      "pos": [
        2650,
        2735
      ]
    },
    {
      "pos": [
        3117,
        3464
      ],
      "content": "Note: The ModuleVersion parameter of Import-DscResource is not available in PowerShell 4.0. In PowerShell 4.0, you can specify a module version by passing a module specification \nobject to the ModuleName parameter of Import-DscResource. A module specification object is a hashtable that contains ModuleName and RequiredVersion  keys. For example:",
      "leadings": [
        "",
        ">"
      ],
      "nodes": [
        {
          "content": "Note: The ModuleVersion parameter of Import-DscResource is not available in PowerShell 4.0. In PowerShell 4.0, you can specify a module version by passing a module specification",
          "pos": [
            0,
            177
          ],
          "nodes": [
            {
              "content": "Note: The ModuleVersion parameter of Import-DscResource is not available in PowerShell 4.0.",
              "pos": [
                0,
                91
              ]
            },
            {
              "content": "In PowerShell 4.0, you can specify a module version by passing a module specification",
              "pos": [
                92,
                177
              ]
            }
          ]
        },
        {
          "content": "object to the ModuleName parameter of Import-DscResource. A module specification object is a hashtable that contains ModuleName and RequiredVersion  keys. For example:",
          "pos": [
            179,
            346
          ],
          "nodes": [
            {
              "content": "object to the ModuleName parameter of Import-DscResource.",
              "pos": [
                0,
                57
              ]
            },
            {
              "content": "A module specification object is a hashtable that contains ModuleName and RequiredVersion  keys.",
              "pos": [
                58,
                154
              ]
            },
            {
              "content": "For example:",
              "pos": [
                155,
                167
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        3868,
        3974
      ],
      "content": "This will also work in PowerShell 5.0, but it is recommended that you use the <bpt id=\"p1\">**</bpt>ModuleVersion<ept id=\"p1\">**</ept> parameter."
    },
    {
      "content": "See also",
      "pos": [
        3979,
        3987
      ]
    },
    {
      "content": "DSC Configurations",
      "pos": [
        3991,
        4009
      ]
    },
    {
      "content": "DSC Resources",
      "pos": [
        4033,
        4046
      ]
    }
  ],
  "content": "# Using resources with multiple versions\n\n> Applies To: Windows PowerShell 5.0\n\nIn PowerShell 5.0, DSC resources can have multiple versions, and versions can be installed on a computer side-by-side. This is implemented by having multiple versions of a resource module\nthat are contained in the same module folder.\n\n## Installing multiple resource versions side-by-side\n\nYou can use the **MinimumVersion**, **MaximumVersion**, and **RequiredVersion** parameters of the [Install-Module](https://technet.microsoft.com/en-us/library/dn807162.aspx) cmdlet to specify\nwhich version of a module to install. Calling **Install-Module** without specifying a version installs the most recent version.\n\nFor example, there are multiple versions of the **xFailOverCluster** module, each of which contains an **xCluster** resouce. The result of calling **Install-Module** without specifying the\nversion number is as follows:\n\n```powershell\nC:\\Program Files\\WindowsPowerShell\\Modules\\xFailOverCluster> Install-Module xFailOverCluster\nC:\\Program Files\\WindowsPowerShell\\Modules\\xFailOverCluster> Get-DscResource xCluster\n\nImplementedAs   Name                      ModuleName                     Version    Properties\n-------------   ----                      ----------                     -------    ----------\nPowerShell      xCluster                  xFailOverCluster               1.2.0.0    {DomainAdministratorCredential, ...\n```\n\nNow, if you call **Install-Module** again, but specify a **RequiredVersion** of 1.1.0.0, it results in the following:\n\n```powershell\nC:\\Program Files\\WindowsPowerShell\\Modules\\xFailOverCluster> Install-Module xFailOverCluster -RequiredVersion 1.1\nC:\\Program Files\\WindowsPowerShell\\Modules\\xFailOverCluster> Get-DscResource xCluster\n\nImplementedAs   Name                      ModuleName                     Version    Properties\n-------------   ----                      ----------                     -------    ----------\nPowerShell      xCluster                  xFailOverCluster               1.1        {DomainAdministratorCredential, Name, ...\nPowerShell      xCluster                  xFailOverCluster               1.2.0.0    {DomainAdministratorCredential, Name, ...\n```\n\n## Specifying a resource version in a configuration\n\nIf you have multiple resources installed on a computer, you must specify the version of that resource when you use it in a configuration. You do this by specifying the **ModuleVersion** \nparameter of the **Import-DscResource** keyword. If you fail to specify the version of a resource module of a resource of which you have more than one version installed, the configuration\ngenerates an error.\n\nThe following configuration shows how to specify the version of the resource to call:\n\n```powershell\nconfiguration VersionTest\n{\n    Import-DscResource -ModuleName xFailOverCluster -ModuleVersion 1.1\n\n    Node 'localhost'\n    {\n       xCluster ClusterTest\n       {\n            Name                          = 'TestCluster'\n            StaticIPAddress               = '10.0.0.3'\n            DomainAdministratorCredential = Get-Credential\n        }\n     }\n}     \n```\n\n>Note: The ModuleVersion parameter of Import-DscResource is not available in PowerShell 4.0. In PowerShell 4.0, you can specify a module version by passing a module specification \n>object to the ModuleName parameter of Import-DscResource. A module specification object is a hashtable that contains ModuleName and RequiredVersion  keys. For example:\n\n```powershell\nconfiguration VersionTest\n{\n    Import-DscResource -ModuleName (@{ModuleName='xFailOverCluster'; RequiredVersion='1.1'} )\n\n    Node 'localhost'\n    {\n       xCluster ClusterTest\n       {\n            Name                          = 'TestCluster'\n            StaticIPAddress               = '10.0.0.3'\n            DomainAdministratorCredential = Get-Credential\n        }\n     }\n}     \n```\n\nThis will also work in PowerShell 5.0, but it is recommended that you use the **ModuleVersion** parameter.\n\n## See also\n* [DSC Configurations](configurations.md)\n* [DSC Resources](resources.md)"
}
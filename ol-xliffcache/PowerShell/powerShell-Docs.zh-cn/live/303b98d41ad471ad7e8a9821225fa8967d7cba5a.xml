{
  "nodes": [
    {
      "pos": [
        2,
        34
      ],
      "content": "Authoring a DSC resource in C<ph id=\"ph1\">`#`</ph>"
    },
    {
      "pos": [
        38,
        96
      ],
      "content": "Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0"
    },
    {
      "content": "Typically, a Windows PowerShell Desired State Configuration (DSC) custom resource is implemented in a PowerShell script.",
      "pos": [
        98,
        218
      ]
    },
    {
      "content": "However, you can also implement the functionality of a DSC custom resource by writing cmdlets in C#.",
      "pos": [
        219,
        319
      ]
    },
    {
      "content": "For an introduction on writing cmdlets in C#, see <bpt id=\"p1\">[</bpt>Writing a Windows PowerShell Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dd878294.aspx)</ept>.",
      "pos": [
        320,
        467
      ]
    },
    {
      "pos": [
        469,
        735
      ],
      "content": "Aside from implementing the resource in C# as cmdlets, the process of creating the MOF schema, creating the folder structure, importing and using your custom DSC resource are the same as described in <bpt id=\"p2\">[</bpt>Writing a custom DSC resource with MOF<ept id=\"p2\">](authoringResourceMOF.md)</ept>."
    },
    {
      "pos": [
        740,
        771
      ],
      "content": "Writing a cmdlet-based resource"
    },
    {
      "pos": [
        772,
        868
      ],
      "content": "For this example, we will implement a simple resource that manages a text file and its contents."
    },
    {
      "pos": [
        874,
        896
      ],
      "content": "Writing the MOF schema"
    },
    {
      "pos": [
        898,
        943
      ],
      "content": "The following is the MOF resource definition."
    },
    {
      "pos": [
        1341,
        1377
      ],
      "content": "Setting up the Visual Studio project"
    },
    {
      "pos": [
        1383,
        1410
      ],
      "content": "Setting up a cmdlet project"
    },
    {
      "pos": [
        1415,
        1434
      ],
      "content": "Open Visual Studio."
    },
    {
      "pos": [
        1438,
        1479
      ],
      "content": "Create a C# project and provide the name."
    },
    {
      "pos": [
        1483,
        1545
      ],
      "content": "Select <bpt id=\"p3\">**</bpt>Class Library<ept id=\"p3\">**</ept> from the available project templates."
    },
    {
      "pos": [
        1549,
        1562
      ],
      "content": "Click <bpt id=\"p4\">**</bpt>Ok<ept id=\"p4\">**</ept>."
    },
    {
      "pos": [
        1566,
        1644
      ],
      "content": "Add an assembly reference to System.Automation.Management.dll to your project."
    },
    {
      "content": "Change the assembly name to match the resource name.",
      "pos": [
        1648,
        1700
      ]
    },
    {
      "content": "In this case, the assembly should be named <bpt id=\"p5\">**</bpt>MSFT_XDemoFile<ept id=\"p5\">**</ept>.",
      "pos": [
        1701,
        1763
      ]
    },
    {
      "pos": [
        1769,
        1792
      ],
      "content": "Writing the cmdlet code"
    },
    {
      "pos": [
        1794,
        1915
      ],
      "content": "The following C# code implements the <bpt id=\"p6\">**</bpt>Get-TargetResource<ept id=\"p6\">**</ept>, <bpt id=\"p7\">**</bpt>Set-TargetResource<ept id=\"p7\">**</ept>, and <bpt id=\"p8\">**</bpt>Test-TargetResource<ept id=\"p8\">**</ept> cmdlets."
    },
    {
      "pos": [
        5106,
        5128
      ],
      "content": "Deploying the resource"
    },
    {
      "content": "The compiled dll file should be saved in a file structure similar to a script-based resource.",
      "pos": [
        5130,
        5223
      ]
    },
    {
      "content": "The following is the folder structure for this resource.",
      "pos": [
        5224,
        5280
      ]
    },
    {
      "pos": [
        5599,
        5607
      ],
      "content": "See Also"
    },
    {
      "pos": [
        5613,
        5621
      ],
      "content": "Concepts"
    },
    {
      "pos": [
        5623,
        5661
      ],
      "content": "Writing a custom DSC resource with MOF"
    },
    {
      "pos": [
        5693,
        5708
      ],
      "content": "Other Resources"
    },
    {
      "pos": [
        5710,
        5745
      ],
      "content": "Writing a Windows PowerShell Cmdlet"
    }
  ],
  "content": "# Authoring a DSC resource in C`#`\n\n> Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nTypically, a Windows PowerShell Desired State Configuration (DSC) custom resource is implemented in a PowerShell script. However, you can also implement the functionality of a DSC custom resource by writing cmdlets in C#. For an introduction on writing cmdlets in C#, see [Writing a Windows PowerShell Cmdlet](https://technet.microsoft.com/en-us/library/dd878294.aspx).\n\nAside from implementing the resource in C# as cmdlets, the process of creating the MOF schema, creating the folder structure, importing and using your custom DSC resource are the same as described in [Writing a custom DSC resource with MOF](authoringResourceMOF.md).\n\n## Writing a cmdlet-based resource\nFor this example, we will implement a simple resource that manages a text file and its contents.\n\n### Writing the MOF schema\n\nThe following is the MOF resource definition.\n\n```\n[ClassVersion(\"1.0.0\"), FriendlyName(\"xDemoFile\")]\nclass MSFT_XDemoFile : OMI_BaseResource\n{\n                [Key, Description(\"path\")] String Path;\n                [Write, Description(\"Should the file be present\"), ValueMap{\"Present\",\"Absent\"}, Values{\"Present\",\"Absent\"}] String Ensure;\n                [Write, Description(\"Contentof file.\")] String Content;                   \n};\n```\n\n### Setting up the Visual Studio project\n#### Setting up a cmdlet project\n\n1. Open Visual Studio.\n1. Create a C# project and provide the name.\n1. Select **Class Library** from the available project templates.\n1. Click **Ok**.\n1. Add an assembly reference to System.Automation.Management.dll to your project.\n1. Change the assembly name to match the resource name. In this case, the assembly should be named **MSFT_XDemoFile**.\n\n### Writing the cmdlet code\n\nThe following C# code implements the **Get-TargetResource**, **Set-TargetResource**, and **Test-TargetResource** cmdlets.\n\n```C#\nGet-TargetResource\n       [OutputType(typeof(System.Collections.Hashtable))]\n       [Cmdlet(VerbsCommon.Get, \"TargetResource\")]\n       public class GetTargetResource : PSCmdlet\n       {\n              [Parameter(Mandatory = true)]\n              public string Path { get; set; }\n \n///<summary>\n/// Implement the logic to write the current state of the resource as a \n/// Hash table with keys being the resource properties \n/// and the Values are the corresponding current values on the target machine.\n \n///</summary>\n              protected override void ProcessRecord()\n              {\n// Download the zip file at the end of this blog to see sample implementation.\n }\n \nSet-TargetResouce\n         [OutputType(typeof(void))]\n    [Cmdlet(VerbsCommon.Set, \"TargetResource\")]\n    public class SetTargetResource : PSCmdlet\n    {\n        privatestring _ensure;\n        privatestring _content;\n        \n[Parameter(Mandatory = true)]\n        public string Path { get; set; }\n        \n[Parameter(Mandatory = false)]      \n       [ValidateSet(\"Present\", \"Absent\", IgnoreCase = true)]\n       public string Ensure {\n            get\n            {\n                // set the default to present.\n               return (this._ensure ?? \"Present\");\n            }\n            set\n            {\n                this._ensure = value;\n            }\n           } \n            public string Content {\n            get { return (string.IsNullOrEmpty(this._content) ? \"\" : this._content); }\n            set { this._content = value; }\n        }\n \n///<summary>\n        /// Implement the logic to set the state of the machine to the desired state.\n        ///</summary>\n        protected override void ProcessRecord()\n        {\n//Implement the set method of the resource \n/* Uncomment this section if your resource needs a machine reboot.\nPSVariable DscMachineStatus = new PSVariable(\"DSCMachineStatus\", 1, ScopedItemOptions.AllScope);\n                this.SessionState.PSVariable.Set(DscMachineStatus);\n*/     \n  }\n    }\nTest-TargetResource    \n       [Cmdlet(\"Test\", \"TargetResource\")]\n    [OutputType(typeof(Boolean))]\n    public class TestTargetResource : PSCmdlet\n    {   \n        \n        private string _ensure;\n        private string _content;\n \n        [Parameter(Mandatory = true)]\n        public string Path { get; set; }\n \n        [Parameter(Mandatory = false)]\n        [ValidateSet(\"Present\", \"Absent\", IgnoreCase = true)]\n        public string Ensure\n        {\n            get\n            {\n                // set the default to present.\n                return (this._ensure ?? \"Present\");\n            }\n            set\n            {\n                this._ensure = value;\n            }\n        }\n \n        [Parameter(Mandatory = false)]\n        public string Content\n        {\n            get { return (string.IsNullOrEmpty(this._content) ? \"â€œ:this._content);}\n            set { this._content = value; }\n        }\n \n///<summary>\n/// Write a Boolean value which indicates whether the current machine is in    \n/// desired state or not.\n        ///</summary>\n        protected override void ProcessRecord()\n        {\n                // Implement the test method of the resource.\n        }\n}\n```\n\n### Deploying the resource\n\nThe compiled dll file should be saved in a file structure similar to a script-based resource. The following is the folder structure for this resource.\n\n```\n$env: psmodulepath (folder)\n    |- MyDscResources (folder)\n        |- DSCResources (folder)\n            |- MSFT_XDemoFile (folder)\n                |- MSFT_XDemoFile.psd1 (file, optional)\n                |- MSFT_XDemoFile.dll (file, required)\n                |- MSFT_XDemoFile.schema.mof (file, required)\n```\n\n### See Also\n#### Concepts\n[Writing a custom DSC resource with MOF](authoringResourceMOF.md)\n#### Other Resources\n[Writing a Windows PowerShell Cmdlet](https://msdn.microsoft.com/en-us/library/dd878294.aspx)"
}
{
  "nodes": [
    {
      "content": "Securing the MOF File",
      "pos": [
        2,
        23
      ]
    },
    {
      "content": "Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0",
      "pos": [
        26,
        84
      ]
    },
    {
      "content": "DSC tells the target nodes what configuration they should have by sending a MOF file with that information to each node, where the Local Configuration Manager (LCM) implements the desired configuration.",
      "pos": [
        86,
        288
      ]
    },
    {
      "content": "Because this file contains the details of the configuration, it’s important to keep it secure.",
      "pos": [
        289,
        383
      ]
    },
    {
      "content": "To do this, you can set the Local Configuration Manager to check the credentials of a user.",
      "pos": [
        384,
        475
      ]
    },
    {
      "content": "This topic describes how to transmit those credentials securely to the target node by encrypting them with certificates.",
      "pos": [
        476,
        596
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        601,
        614
      ]
    },
    {
      "content": "To successfully encrypt the credentials used to secure a DSC configuration, make sure you have the following:",
      "pos": [
        616,
        725
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Some means of issuing and distributing certificates<ept id=\"p1\">**</ept>.",
      "pos": [
        729,
        785
      ]
    },
    {
      "content": "This topic and its examples assume you are using Active Directory Certification Authority.",
      "pos": [
        786,
        876
      ]
    },
    {
      "content": "For more background information on Active Directory Certificate Services, see <bpt id=\"p1\">[</bpt>Active Directory Certificate Services Overview<ept id=\"p1\">](https://technet.microsoft.com/library/hh831740.aspx)</ept> and <bpt id=\"p2\">[</bpt>Active Directory Certificate Services in Windows Server 2008<ept id=\"p2\">](https://technet.microsoft.com/windowsserver/dd448615.aspx)</ept>.",
      "pos": [
        877,
        1183
      ]
    },
    {
      "pos": [
        1186,
        1240
      ],
      "content": "<bpt id=\"p1\">**</bpt>Administrative access to the target node or nodes<ept id=\"p1\">**</ept>."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Each target node has an encryption-capable certificate saved its Personal Store<ept id=\"p1\">**</ept>.",
      "pos": [
        1243,
        1327
      ]
    },
    {
      "content": "In Windows PowerShell, the path to the store is Cert:\\LocalMachine\\My.",
      "pos": [
        1328,
        1398
      ]
    },
    {
      "content": "The examples in this topic use the “workstation authentication” template, which you can find (along with other certificate templates) at <bpt id=\"p1\">[</bpt>Default Certificate Templates<ept id=\"p1\">](https://technet.microsoft.com/library/cc740061(v=WS.10).aspx)</ept>.",
      "pos": [
        1399,
        1630
      ]
    },
    {
      "content": "If you will be running this configuration on a computer other than the target node, <bpt id=\"p1\">**</bpt>export the public key of the certificate<ept id=\"p1\">**</ept>, and then import it to the computer you will run the configuration from.",
      "pos": [
        1633,
        1834
      ]
    },
    {
      "content": "Make sure that you export only the <bpt id=\"p1\">**</bpt>public<ept id=\"p1\">**</ept> key; keep the private key secure.",
      "pos": [
        1835,
        1914
      ]
    },
    {
      "content": "Overall process",
      "pos": [
        1919,
        1934
      ]
    },
    {
      "content": "Set up the certificates, keys, and thumbprints, making sure that each target node has copies of the certificate and the configuration computer has the public key and thumbprint.",
      "pos": [
        1940,
        2117
      ]
    },
    {
      "content": "Create a configuration data block that contains the path and thumbprint of the public key.",
      "pos": [
        2122,
        2212
      ]
    },
    {
      "content": "Create a configuration script that defines your desired configuration for the target node and sets up decryption on the target nodes by commanding the Local Configuration manager to decrypt the configuration data using the certificate and its thumbprint.",
      "pos": [
        2217,
        2471
      ]
    },
    {
      "content": "Run the configuration, which will set the Local Configuration Manager settings and start the DSC configuration.",
      "pos": [
        2476,
        2587
      ]
    },
    {
      "content": "Diagram1",
      "pos": [
        2591,
        2599
      ]
    },
    {
      "content": "Certificate Requirements",
      "pos": [
        2646,
        2670
      ]
    },
    {
      "content": "To enact credential encryption, a public key certificate is required to be available on the <bpt id=\"p1\">_</bpt>Target Node<ept id=\"p1\">_</ept> that is <bpt id=\"p2\">**</bpt>trusted<ept id=\"p2\">**</ept> by the computer being used to author the DSC configuration.",
      "pos": [
        2672,
        2857
      ]
    },
    {
      "content": "This public key certificate has specific requirements that must be satisfied to allow it to be used for DSC Credential Encryption:",
      "pos": [
        2858,
        2988
      ]
    },
    {
      "pos": [
        2993,
        3082
      ],
      "content": "<bpt id=\"p1\">**</bpt>Key Usage<ept id=\"p1\">**</ept>: must contain 'DigitalSignature', 'KeyEncipherment' and 'DataEncipherment'."
    },
    {
      "pos": [
        3087,
        3146
      ],
      "content": "<bpt id=\"p1\">**</bpt>Enhanced Key Usage<ept id=\"p1\">**</ept>: must contain 'Document Encryption'."
    },
    {
      "pos": [
        3151,
        3221
      ],
      "content": "The Private Key for the certificate is available on the <bpt id=\"p1\">_</bpt>Target Node<ept id=\"p1\">_</ept>."
    },
    {
      "pos": [
        3224,
        3334
      ],
      "content": "Any existing certificate on the <bpt id=\"p1\">_</bpt>Target Node<ept id=\"p1\">_</ept> that meets these criteria may be used to secure DSC credentials."
    },
    {
      "content": "Creating the Certificate",
      "pos": [
        3340,
        3364
      ]
    },
    {
      "pos": [
        3366,
        3550
      ],
      "content": "The private key certificate can be created on the <bpt id=\"p1\">_</bpt>Target Node<ept id=\"p1\">_</ept> and the public key certificate copied to up to the computer being used to compile the DSC configuration into a MOF file."
    },
    {
      "content": "Alternately, the private key certificate can be created on the computer being used to compile the DSC configuration file, exported with the private key then imported on the <bpt id=\"p1\">_</bpt>Target Node<ept id=\"p1\">_</ept>.",
      "pos": [
        3552,
        3739
      ]
    },
    {
      "content": "This is the current method for implementing DSC credential encryption on Nano Server.",
      "pos": [
        3740,
        3825
      ]
    },
    {
      "content": "Configuration data",
      "pos": [
        3831,
        3849
      ]
    },
    {
      "content": "The configuration data block defines which target nodes to operate on, whether or not to encrypt the credentials, the means of encryption, and other information.",
      "pos": [
        3851,
        4012
      ]
    },
    {
      "content": "For more information on the configuration data block, see <bpt id=\"p1\">[</bpt>Separating Configuration and Environment Data<ept id=\"p1\">](configData.md)</ept>.",
      "pos": [
        4013,
        4134
      ]
    },
    {
      "content": "The elements that can be configured for each node that are related to credential encryption are:",
      "pos": [
        4136,
        4232
      ]
    },
    {
      "pos": [
        4235,
        4333
      ],
      "content": "<bpt id=\"p1\">**</bpt>NodeName<ept id=\"p1\">**</ept> - the name of the target node that the credential encryption is being configured for."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>PsDscAllowPlainTextPassword<ept id=\"p1\">**</ept> - whether unencrypted credentials will be allowed to be passed to this node.",
      "pos": [
        4336,
        4444
      ]
    },
    {
      "content": "This is <bpt id=\"p1\">**</bpt>not recommended<ept id=\"p1\">**</ept>.",
      "pos": [
        4445,
        4473
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Thumbprint<ept id=\"p1\">**</ept> - the thumbprint of the certificate that will be used to decrypt the credentials in the DSC Configuration on the <bpt id=\"p2\">_</bpt>Target Node<ept id=\"p2\">_</ept>.",
      "pos": [
        4476,
        4618
      ]
    },
    {
      "content": "This certificate must exist in the Local Machine certificate store on the Target Node.",
      "pos": [
        4621,
        4707
      ]
    },
    {
      "content": "**",
      "pos": [
        4707,
        4709
      ]
    },
    {
      "pos": [
        4712,
        4857
      ],
      "content": "<bpt id=\"p1\">**</bpt>CertificateFile<ept id=\"p1\">**</ept> - the certificate file (containing the public key only) that should be used to encrypt the credentials for the <bpt id=\"p2\">_</bpt>Target Node<ept id=\"p2\">_</ept>."
    },
    {
      "content": "This example shows a configuration data block that specifies a target node to act on named targetNode, the path to the public key certificate file (named targetNode.cer), and the thumbprint for the public key.",
      "pos": [
        4859,
        5068
      ]
    },
    {
      "content": "Configuration script",
      "pos": [
        5747,
        5767
      ]
    },
    {
      "content": "In the configuration script itself, use the <ph id=\"ph1\">`PsCredential`</ph> parameter to ensure that credentials are stored for the shortest possible time.",
      "pos": [
        5769,
        5907
      ]
    },
    {
      "content": "When you run the supplied example, DSC will prompt you for credentials and then encrypt the MOF file using the CertificateFile that is associated with the target node in the configuration data block.",
      "pos": [
        5908,
        6107
      ]
    },
    {
      "content": "This code example copies a file from a share that is secured to a user.",
      "pos": [
        6108,
        6179
      ]
    },
    {
      "content": "Setting up decryption",
      "pos": [
        6618,
        6639
      ]
    },
    {
      "content": "Before <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Start-DscConfiguration`</ph><ept id=\"p1\">](http://technet.microsoft.com/en-us/library/dn521623.aspx)</ept> can work, you have to tell the Local Configuration Manager on each target node which certificate to use to decrypt the credentials, using the CertificateID resource to verify the certificate’s thumbprint.",
      "pos": [
        6641,
        6937
      ]
    },
    {
      "content": "This example function will find the appropriate local certificate (you might have to customize it so it will find the exact certificate you want to use):",
      "pos": [
        6938,
        7091
      ]
    },
    {
      "content": "With the certificate identified by its thumbprint, the configuration script can be updated to use the value:",
      "pos": [
        7445,
        7553
      ]
    },
    {
      "content": "Running the configuration",
      "pos": [
        8115,
        8140
      ]
    },
    {
      "content": "At this point, you can run the configuration, which will output two files:",
      "pos": [
        8142,
        8216
      ]
    },
    {
      "content": "A *.meta.mof file that configures the Local Configuration Manager to decrypt the credentials using the certificate that is stored on the local machine store and identified by its thumbprint.",
      "pos": [
        8221,
        8411
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Set-DscLocalConfigurationManager`</ph><ept id=\"p1\">](http://technet.microsoft.com/en-us/library/dn521621.aspx)</ept> applies the *.meta.mof file.",
      "pos": [
        8412,
        8535
      ]
    },
    {
      "content": "A MOF file that actually applies the configuration.",
      "pos": [
        8539,
        8590
      ]
    },
    {
      "content": "Start-DscConfiguration applies the configuration.",
      "pos": [
        8591,
        8640
      ]
    },
    {
      "content": "These commands will accomplish those steps:",
      "pos": [
        8642,
        8685
      ]
    },
    {
      "content": "This example would push the DSC configuration to the target node.",
      "pos": [
        9087,
        9152
      ]
    },
    {
      "content": "The DSC configuration can also be applied using a DSC Pull Server if one is available.",
      "pos": [
        9153,
        9239
      ]
    },
    {
      "pos": [
        9241,
        9348
      ],
      "content": "See <bpt id=\"p1\">[</bpt>this page<ept id=\"p1\">](PullClient.md)</ept> for more information on applying DSC configurations using a DSC Pull Server."
    },
    {
      "content": "Credential Encryption Module Example",
      "pos": [
        9353,
        9389
      ]
    },
    {
      "content": "Here is a full example that incorporates all of these steps, plus a helper cmdlet that exports and copies the public keys:",
      "pos": [
        9391,
        9513
      ]
    }
  ],
  "content": "# Securing the MOF File\n\n>Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nDSC tells the target nodes what configuration they should have by sending a MOF file with that information to each node, where the Local Configuration Manager (LCM) implements the desired configuration. Because this file contains the details of the configuration, it’s important to keep it secure. To do this, you can set the Local Configuration Manager to check the credentials of a user. This topic describes how to transmit those credentials securely to the target node by encrypting them with certificates.\n\n## Prerequisites\n\nTo successfully encrypt the credentials used to secure a DSC configuration, make sure you have the following:\n\n* **Some means of issuing and distributing certificates**. This topic and its examples assume you are using Active Directory Certification Authority. For more background information on Active Directory Certificate Services, see [Active Directory Certificate Services Overview](https://technet.microsoft.com/library/hh831740.aspx) and [Active Directory Certificate Services in Windows Server 2008](https://technet.microsoft.com/windowsserver/dd448615.aspx).\n* **Administrative access to the target node or nodes**.\n* **Each target node has an encryption-capable certificate saved its Personal Store**. In Windows PowerShell, the path to the store is Cert:\\LocalMachine\\My. The examples in this topic use the “workstation authentication” template, which you can find (along with other certificate templates) at [Default Certificate Templates](https://technet.microsoft.com/library/cc740061(v=WS.10).aspx).\n* If you will be running this configuration on a computer other than the target node, **export the public key of the certificate**, and then import it to the computer you will run the configuration from. Make sure that you export only the **public** key; keep the private key secure.\n\n## Overall process\n\n 1. Set up the certificates, keys, and thumbprints, making sure that each target node has copies of the certificate and the configuration computer has the public key and thumbprint.\n 2. Create a configuration data block that contains the path and thumbprint of the public key.\n 3. Create a configuration script that defines your desired configuration for the target node and sets up decryption on the target nodes by commanding the Local Configuration manager to decrypt the configuration data using the certificate and its thumbprint.\n 4. Run the configuration, which will set the Local Configuration Manager settings and start the DSC configuration.\n\n![Diagram1](images/CredentialEncryptionDiagram1.png)\n\n## Certificate Requirements\n\nTo enact credential encryption, a public key certificate is required to be available on the _Target Node_ that is **trusted** by the computer being used to author the DSC configuration.\nThis public key certificate has specific requirements that must be satisfied to allow it to be used for DSC Credential Encryption:\n 1. **Key Usage**: must contain 'DigitalSignature', 'KeyEncipherment' and 'DataEncipherment'.\n 2. **Enhanced Key Usage**: must contain 'Document Encryption'.\n 3. The Private Key for the certificate is available on the _Target Node_.\n \nAny existing certificate on the _Target Node_ that meets these criteria may be used to secure DSC credentials.\n \n## Creating the Certificate\n\nThe private key certificate can be created on the _Target Node_ and the public key certificate copied to up to the computer being used to compile the DSC configuration into a MOF file.\n\nAlternately, the private key certificate can be created on the computer being used to compile the DSC configuration file, exported with the private key then imported on the _Target Node_. This is the current method for implementing DSC credential encryption on Nano Server. \n\n## Configuration data\n\nThe configuration data block defines which target nodes to operate on, whether or not to encrypt the credentials, the means of encryption, and other information. For more information on the configuration data block, see [Separating Configuration and Environment Data](configData.md).\n\nThe elements that can be configured for each node that are related to credential encryption are:\n* **NodeName** - the name of the target node that the credential encryption is being configured for.\n* **PsDscAllowPlainTextPassword** - whether unencrypted credentials will be allowed to be passed to this node. This is **not recommended**.\n* **Thumbprint** - the thumbprint of the certificate that will be used to decrypt the credentials in the DSC Configuration on the _Target Node_. **This certificate must exist in the Local Machine certificate store on the Target Node.**\n* **CertificateFile** - the certificate file (containing the public key only) that should be used to encrypt the credentials for the _Target Node_.\n\nThis example shows a configuration data block that specifies a target node to act on named targetNode, the path to the public key certificate file (named targetNode.cer), and the thumbprint for the public key.\n\n```powershell\n$ConfigData= @{ \n    AllNodes = @(     \n            @{  \n                # The name of the node we are describing \n                NodeName = \"targetNode\" \n\n                # The path to the .cer file containing the \n                # public key of the Encryption Certificate \n                # used to encrypt credentials for this node \n                CertificateFile = \"C:\\publicKeys\\targetNode.cer\" \n\n         \n                # The thumbprint of the Encryption Certificate \n                # used to decrypt the credentials on target node \n                Thumbprint = \"AC23EA3A9E291A75757A556D0B71CBBF8C4F6FD8\" \n            }; \n        );    \n    }\n```\n\n## Configuration script\n\nIn the configuration script itself, use the `PsCredential` parameter to ensure that credentials are stored for the shortest possible time. When you run the supplied example, DSC will prompt you for credentials and then encrypt the MOF file using the CertificateFile that is associated with the target node in the configuration data block. This code example copies a file from a share that is secured to a user.\n\n```\nconfiguration CredentialEncryptionExample \n{ \n    param( \n        [Parameter(Mandatory=$true)] \n        [ValidateNotNullorEmpty()] \n        [PsCredential] $credential \n        ) \n    \n\n    Node $AllNodes.NodeName \n    { \n        File exampleFile \n        { \n            SourcePath = \"\\\\Server\\share\\path\\file.ext\" \n            DestinationPath = \"C:\\destinationPath\" \n            Credential = $credential \n        } \n    } \n}\n```\n\n## Setting up decryption\n\nBefore [`Start-DscConfiguration`](http://technet.microsoft.com/en-us/library/dn521623.aspx) can work, you have to tell the Local Configuration Manager on each target node which certificate to use to decrypt the credentials, using the CertificateID resource to verify the certificate’s thumbprint. This example function will find the appropriate local certificate (you might have to customize it so it will find the exact certificate you want to use):\n\n```powershell\n# Get the certificate that works for encryption \nfunction Get-LocalEncryptionCertificateThumbprint \n{ \n    (dir Cert:\\LocalMachine\\my) | %{\n        # Verify the certificate is for Encryption and valid \n        if ($_.PrivateKey.KeyExchangeAlgorithm -and $_.Verify()) \n        { \n            return $_.Thumbprint \n        } \n    } \n}\n```\n\nWith the certificate identified by its thumbprint, the configuration script can be updated to use the value:\n\n```powershell\nconfiguration CredentialEncryptionExample \n{ \n    param( \n        [Parameter(Mandatory=$true)] \n        [ValidateNotNullorEmpty()] \n        [PsCredential] $credential \n        ) \n    \n\n    Node $AllNodes.NodeName \n    { \n        File exampleFile \n        { \n            SourcePath = \"\\\\Server\\share\\path\\file.ext\" \n            DestinationPath = \"C:\\destinationPath\" \n            Credential = $credential \n        } \n        \n        LocalConfigurationManager \n        { \n             CertificateId = $node.Thumbprint \n        } \n    } \n}\n```\n\n## Running the configuration\n\nAt this point, you can run the configuration, which will output two files:\n\n * A *.meta.mof file that configures the Local Configuration Manager to decrypt the credentials using the certificate that is stored on the local machine store and identified by its thumbprint. [`Set-DscLocalConfigurationManager`](http://technet.microsoft.com/en-us/library/dn521621.aspx) applies the *.meta.mof file.\n * A MOF file that actually applies the configuration. Start-DscConfiguration applies the configuration.\n\nThese commands will accomplish those steps:\n\n```powershell\nWrite-Host \"Generate DSC Configuration...\"\nCredentialEncryptionExample -ConfigurationData $ConfigData -OutputPath .\\CredentialEncryptionExample\n\nWrite-Host \"Setting up LCM to decrypt credentials...\"\nSet-DscLocalConfigurationManager .\\CredentialEncryptionExample -Verbose \n \nWrite-Host \"Starting Configuration...\"\nStart-DscConfiguration .\\CredentialEncryptionExample -wait -Verbose\n```\n\nThis example would push the DSC configuration to the target node.\nThe DSC configuration can also be applied using a DSC Pull Server if one is available.\n\nSee [this page](PullClient.md) for more information on applying DSC configurations using a DSC Pull Server.\n\n## Credential Encryption Module Example\n\nHere is a full example that incorporates all of these steps, plus a helper cmdlet that exports and copies the public keys:\n\n```powershell\n# A simple example of using credentials\nconfiguration CredentialEncryptionExample\n{\n    param(\n        [Parameter(Mandatory=$true)]\n        [ValidateNotNullorEmpty()]\n        [PsCredential] $credential\n        )\n    \n\n    Node $AllNodes.NodeName\n    {\n        File exampleFile\n        {\n            SourcePath = \"\\\\server\\share\\file.txt\"\n            DestinationPath = \"C:\\Users\\user\"\n            Credential = $credential\n        }\n        \n        LocalConfigurationManager\n        {\n            CertificateId = $node.Thumbprint\n        }\n    }\n}\n\n# A Helper to invoke the configuration, with the correct public key \n# To encrypt the configuration credentials\nfunction Start-CredentialEncryptionExample\n{\n    [CmdletBinding()]\n    param ($computerName)\n\n\n    [string] $thumbprint = Get-EncryptionCertificate -computerName $computerName -Verbose\n    Write-Verbose \"using cert: $thumbprint\"\n\n    $certificatePath = join-path -Path \"$env:SystemDrive\\$script:publicKeyFolder\" -childPath \"$computername.EncryptionCertificate.cer\"         \n\n    $ConfigData=    @{\n        AllNodes = @(     \n                        @{  \n                            # The name of the node we are describing\n                            NodeName = \"$computerName\"\n\n                            # The path to the .cer file containing the\n                            # public key of the Encryption Certificate\n                            CertificateFile = \"$certificatePath\"\n\n                            # The thumbprint of the Encryption Certificate\n                            # used to decrypt the credentials\n                            Thumbprint = $thumbprint\n                        };\n                    );    \n    }\n\n    Write-Verbose \"Generate DSC Configuration...\"\n    CredentialEncryptionExample -ConfigurationData $ConfigData -OutputPath .\\CredentialEncryptionExample `\n        -credential (Get-Credential -UserName \"$env:USERDOMAIN\\$env:USERNAME\" -Message \"Enter credentials for configuration\") \n\n    Write-Verbose \"Setting up LCM to decrypt credentials...\"\n    Set-DscLocalConfigurationManager .\\CredentialEncryptionExample -Verbose \n\n    Write-Verbose \"Starting Configuration...\"\n    Start-DscConfiguration .\\CredentialEncryptionExample -wait -Verbose\n\n}\n\n\n#region HelperFunctions\n\n# The folder name for the exported public keys\n$script:publicKeyFolder = \"publicKeys\"\n\n# Get the certificate that works for encryptions\nfunction Get-EncryptionCertificate\n{\n    [CmdletBinding()]\n    param ($computerName)\n    $returnValue= Invoke-Command -ComputerName $computerName -ScriptBlock {\n            $certificates = dir Cert:\\LocalMachine\\my\n\n            $certificates | %{\n                    # Verify the certificate is for Encryption and valid\n                    if ($_.PrivateKey.KeyExchangeAlgorithm -and $_.Verify())\n                    {\n                        # Create the folder to hold the exported public key\n                        $folder= Join-Path -Path $env:SystemDrive\\ -ChildPath $using:publicKeyFolder\n                        if (! (Test-Path $folder))\n                        {\n                            md $folder | Out-Null\n                        }\n\n                        # Export the public key to a well known location\n                        $certPath = Export-Certificate -Cert $_ -FilePath (Join-Path -path $folder -childPath \"EncryptionCertificate.cer\") \n\n                        # Return the thumbprint, and exported certificate path\n                        return @($_.Thumbprint,$certPath);\n                    }\n                  }\n        }\n    Write-Verbose \"Identified and exported cert...\"\n    # Copy the exported certificate locally\n    $destinationPath = join-path -Path \"$env:SystemDrive\\$script:publicKeyFolder\" -childPath \"$computername.EncryptionCertificate.cer\"\n    Copy-Item -Path (join-path -path \\\\$computername -childPath $returnValue[1].FullName.Replace(\":\",\"$\"))  $destinationPath | Out-Null\n\n    # Return the thumbprint\n    return $returnValue[0]\n}\n\nStart-CredentialEncryptionExample\n```"
}
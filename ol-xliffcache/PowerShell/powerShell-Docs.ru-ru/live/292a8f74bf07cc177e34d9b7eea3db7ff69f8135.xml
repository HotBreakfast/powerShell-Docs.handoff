{
  "nodes": [
    {
      "content": "Working with Files and Folders",
      "pos": [
        11,
        41
      ]
    },
    {
      "content": "Working with Files and Folders",
      "pos": [
        176,
        206
      ]
    },
    {
      "content": "Navigating through Windows PowerShell drives and manipulating the items on them is similar to manipulating files and folders on Windows physical disk drives.",
      "pos": [
        207,
        364
      ]
    },
    {
      "content": "We will discuss how to deal with specific file and folder manipulation tasks in this section.",
      "pos": [
        365,
        458
      ]
    },
    {
      "content": "Listing All the Files and Folders Within a Folder",
      "pos": [
        464,
        513
      ]
    },
    {
      "content": "You can get all items directly within a folder by using <bpt id=\"p1\">**</bpt>Get\\-ChildItem<ept id=\"p1\">**</ept>.",
      "pos": [
        514,
        589
      ]
    },
    {
      "content": "Add the optional <bpt id=\"p1\">**</bpt>Force<ept id=\"p1\">**</ept> parameter to display hidden or system items.",
      "pos": [
        590,
        661
      ]
    },
    {
      "content": "For example, this command displays the direct contents of Windows PowerShell Drive C (which is the same as the Windows physical drive C):",
      "pos": [
        662,
        799
      ]
    },
    {
      "content": "The command lists only the directly contained items, much like using Cmd.exe's <bpt id=\"p1\">**</bpt>DIR<ept id=\"p1\">**</ept> command or <bpt id=\"p2\">**</bpt>ls<ept id=\"p2\">**</ept> in a UNIX shell.",
      "pos": [
        835,
        956
      ]
    },
    {
      "content": "In order to show contained items, you need to specify the <bpt id=\"p1\">**</bpt>\\-Recurse<ept id=\"p1\">**</ept> parameter as well.",
      "pos": [
        957,
        1047
      ]
    },
    {
      "content": "(This can take an extremely long time to complete.) To list everything on the C drive:",
      "pos": [
        1048,
        1134
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Get\\-ChildItem<ept id=\"p1\">**</ept> can filter items with its <bpt id=\"p2\">**</bpt>Path<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Filter<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Include<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>Exclude<ept id=\"p5\">**</ept> parameters, but those are typically based only on name.",
      "pos": [
        1179,
        1330
      ]
    },
    {
      "content": "You can perform complex filtering based on other properties of items by using <bpt id=\"p1\">**</bpt>Where\\-Object<ept id=\"p1\">**</ept>.",
      "pos": [
        1331,
        1427
      ]
    },
    {
      "content": "The following command finds all executables within the Program Files folder that were last modified after October 1, 2005 and which are neither smaller than 1 megabyte nor larger than 10 megabytes:",
      "pos": [
        1429,
        1626
      ]
    },
    {
      "content": "Copying Files and Folders",
      "pos": [
        1819,
        1844
      ]
    },
    {
      "content": "Copying is done with <bpt id=\"p1\">**</bpt>Copy\\-Item<ept id=\"p1\">**</ept>.",
      "pos": [
        1845,
        1881
      ]
    },
    {
      "content": "The following command backs up C:\\\\boot.ini to C:\\\\boot.bak:",
      "pos": [
        1882,
        1942
      ]
    },
    {
      "content": "If the destination file already exists, the copy attempt fails.",
      "pos": [
        2006,
        2069
      ]
    },
    {
      "content": "To overwrite a pre\\-existing destination, use the Force parameter:",
      "pos": [
        2070,
        2136
      ]
    },
    {
      "content": "This command works even when the destination is read\\-only.",
      "pos": [
        2207,
        2266
      ]
    },
    {
      "content": "Folder copying works the same way.",
      "pos": [
        2268,
        2302
      ]
    },
    {
      "content": "This command copies the folder C:\\\\temp\\\\test1 to the new folder c:\\\\temp\\\\DeleteMe recursively:",
      "pos": [
        2303,
        2399
      ]
    },
    {
      "content": "You can also copy a selection of items.",
      "pos": [
        2460,
        2499
      ]
    },
    {
      "content": "The following command copies all .txt files contained anywhere in c:\\\\data to c:\\\\temp\\\\text:",
      "pos": [
        2500,
        2593
      ]
    },
    {
      "content": "You can still use other tools to perform file system copies.",
      "pos": [
        2677,
        2737
      ]
    },
    {
      "content": "XCOPY, ROBOCOPY, and COM objects, such as the <bpt id=\"p1\">**</bpt>Scripting.FileSystemObject,<ept id=\"p1\">**</ept> all work in Windows PowerShell.",
      "pos": [
        2738,
        2847
      ]
    },
    {
      "content": "For example, you can use the Windows Script Host <bpt id=\"p1\">**</bpt>Scripting.FileSystem COM<ept id=\"p1\">**</ept> class to back up C:\\\\boot.ini to C:\\\\boot.bak:",
      "pos": [
        2848,
        2972
      ]
    },
    {
      "content": "Creating Files and Folders",
      "pos": [
        3077,
        3103
      ]
    },
    {
      "content": "Creating new items works the same on all Windows PowerShell providers.",
      "pos": [
        3104,
        3174
      ]
    },
    {
      "content": "If a Windows PowerShell provider has more than one type of item—for example, the FileSystem Windows PowerShell provider distinguishes between directories and files—you need to specify the item type.",
      "pos": [
        3175,
        3373
      ]
    },
    {
      "content": "This command creates a new folder C:\\\\temp\\\\New Folder:",
      "pos": [
        3375,
        3430
      ]
    },
    {
      "content": "This command creates a new empty file C:\\\\temp\\\\New Folder\\\\file.txt",
      "pos": [
        3499,
        3567
      ]
    },
    {
      "content": "Removing All Files and Folders Within a Folder",
      "pos": [
        3644,
        3690
      ]
    },
    {
      "content": "You can remove contained items using <bpt id=\"p1\">**</bpt>Remove\\-Item<ept id=\"p1\">**</ept>, but you will be prompted to confirm the removal if the item contains anything else.",
      "pos": [
        3691,
        3829
      ]
    },
    {
      "content": "For example, if you attempt to delete the folder C:\\\\temp\\\\DeleteMe that contains other items, Windows PowerShell prompts you for confirmation before deleting the folder:",
      "pos": [
        3830,
        4000
      ]
    },
    {
      "pos": [
        4321,
        4414
      ],
      "content": "If you do not want to be prompted for each contained item, specify the <bpt id=\"p1\">**</bpt>Recurse<ept id=\"p1\">**</ept> parameter:"
    },
    {
      "content": "Mapping a Local Folder as a Windows Accessible Drive",
      "pos": [
        4467,
        4519
      ]
    },
    {
      "content": "You can also map a local folder, using the <bpt id=\"p1\">**</bpt>subst<ept id=\"p1\">**</ept> command.",
      "pos": [
        4520,
        4581
      ]
    },
    {
      "content": "The following command creates a local drive P: rooted in the local Program Files directory:",
      "pos": [
        4582,
        4673
      ]
    },
    {
      "pos": [
        4711,
        4852
      ],
      "content": "Just as with network drives, drives mapped within Windows PowerShell using <bpt id=\"p1\">**</bpt>subst<ept id=\"p1\">**</ept> are immediately visible to the Windows PowerShell shell."
    },
    {
      "content": "Reading a Text File into an Array",
      "pos": [
        4858,
        4891
      ]
    },
    {
      "content": "One of the more common storage formats for text data is in a file with separate lines treated as distinct data elements.",
      "pos": [
        4892,
        5012
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Get\\-Content<ept id=\"p1\">**</ept> cmdlet can be used to read an entire file in one step, as shown here:",
      "pos": [
        5013,
        5103
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Get\\-Content<ept id=\"p1\">**</ept> already treats the data read from the file as an array, with one element per line of file content.",
      "pos": [
        5500,
        5615
      ]
    },
    {
      "content": "You can confirm this by checking the <bpt id=\"p1\">**</bpt>Length<ept id=\"p1\">**</ept> of the returned content:",
      "pos": [
        5616,
        5688
      ]
    },
    {
      "content": "This command is most useful for getting lists of information into Windows PowerShell directly.",
      "pos": [
        5744,
        5838
      ]
    },
    {
      "content": "For example, you might store a list of computer names or IP addresses in a file C:\\\\temp\\\\domainMembers.txt, with one name on each line of the file.",
      "pos": [
        5839,
        5987
      ]
    },
    {
      "content": "You can use <bpt id=\"p1\">**</bpt>Get\\-Content<ept id=\"p1\">**</ept> to retrieve the file contents and put them in the variable <bpt id=\"p2\">**</bpt>$Computers<ept id=\"p2\">**</ept>:",
      "pos": [
        5988,
        6091
      ]
    },
    {
      "pos": [
        6159,
        6233
      ],
      "content": "<bpt id=\"p1\">**</bpt>$Computers<ept id=\"p1\">**</ept> is now an array containing a computer name in each element."
    }
  ],
  "content": "---\ntitle: Working with Files and Folders\nms.custom: na\nms.reviewer: na\nms.suite: na\nms.tgt_pltfrm: na\nms.topic: article\nms.assetid: c0ceb96b-e708-45f3-803b-d1f61a48f4c1\n---\n# Working with Files and Folders\nNavigating through Windows PowerShell drives and manipulating the items on them is similar to manipulating files and folders on Windows physical disk drives. We will discuss how to deal with specific file and folder manipulation tasks in this section.\n\n### Listing All the Files and Folders Within a Folder\nYou can get all items directly within a folder by using **Get\\-ChildItem**. Add the optional **Force** parameter to display hidden or system items. For example, this command displays the direct contents of Windows PowerShell Drive C (which is the same as the Windows physical drive C):\n\n```\nGet-ChildItem -Force C:\\\n```\n\nThe command lists only the directly contained items, much like using Cmd.exe's **DIR** command or **ls** in a UNIX shell. In order to show contained items, you need to specify the **\\-Recurse** parameter as well. (This can take an extremely long time to complete.) To list everything on the C drive:\n\n```\nGet-ChildItem -Force C:\\ -Recurse\n```\n\n**Get\\-ChildItem** can filter items with its **Path**, **Filter**, **Include**, and **Exclude** parameters, but those are typically based only on name. You can perform complex filtering based on other properties of items by using **Where\\-Object**.\n\nThe following command finds all executables within the Program Files folder that were last modified after October 1, 2005 and which are neither smaller than 1 megabyte nor larger than 10 megabytes:\n\n```\nGet-ChildItem -Path $env:ProgramFiles -Recurse -Include *.exe | Where-Object -FilterScript {($_.LastWriteTime -gt \"2005-10-01\") -and ($_.Length -ge 1m) -and ($_.Length -le 10m)}\n```\n\n### Copying Files and Folders\nCopying is done with **Copy\\-Item**. The following command backs up C:\\\\boot.ini to C:\\\\boot.bak:\n\n```\nCopy-Item -Path c:\\boot.ini -Destination c:\\boot.bak\n```\n\nIf the destination file already exists, the copy attempt fails. To overwrite a pre\\-existing destination, use the Force parameter:\n\n```\nCopy-Item -Path c:\\boot.ini -Destination c:\\boot.bak -Force\n```\n\nThis command works even when the destination is read\\-only.\n\nFolder copying works the same way. This command copies the folder C:\\\\temp\\\\test1 to the new folder c:\\\\temp\\\\DeleteMe recursively:\n\n```\nCopy-Item C:\\temp\\test1 -Recurse c:\\temp\\DeleteMe\n```\n\nYou can also copy a selection of items. The following command copies all .txt files contained anywhere in c:\\\\data to c:\\\\temp\\\\text:\n\n```\nCopy-Item -Filter *.txt -Path c:\\data -Recurse -Destination c:\\temp\\text\n```\n\nYou can still use other tools to perform file system copies. XCOPY, ROBOCOPY, and COM objects, such as the **Scripting.FileSystemObject,** all work in Windows PowerShell. For example, you can use the Windows Script Host **Scripting.FileSystem COM** class to back up C:\\\\boot.ini to C:\\\\boot.bak:\n\n```\n(New-Object -ComObject Scripting.FileSystemObject).CopyFile(\"c:\\boot.ini\", \"c:\\boot.bak\")\n```\n\n### Creating Files and Folders\nCreating new items works the same on all Windows PowerShell providers. If a Windows PowerShell provider has more than one type of item—for example, the FileSystem Windows PowerShell provider distinguishes between directories and files—you need to specify the item type.\n\nThis command creates a new folder C:\\\\temp\\\\New Folder:\n\n```\nNew-Item -Path 'C:\\temp\\New Folder' -ItemType \"directory\"\n```\n\nThis command creates a new empty file C:\\\\temp\\\\New Folder\\\\file.txt\n\n```\nNew-Item -Path 'C:\\temp\\New Folder\\file.txt' -ItemType \"file\"\n```\n\n### Removing All Files and Folders Within a Folder\nYou can remove contained items using **Remove\\-Item**, but you will be prompted to confirm the removal if the item contains anything else. For example, if you attempt to delete the folder C:\\\\temp\\\\DeleteMe that contains other items, Windows PowerShell prompts you for confirmation before deleting the folder:\n\n```\nRemove-Item C:\\temp\\DeleteMe\n\nConfirm\nThe item at C:\\temp\\DeleteMe has children and the -recurse parameter was not\nspecified. If you continue, all children will be removed with the item. Are you\nsure you want to continue?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help\n(default is \"Y\"):\n```\n\nIf you do not want to be prompted for each contained item, specify the **Recurse** parameter:\n\n```\nRemove-Item C:\\temp\\DeleteMe -Recurse\n```\n\n### Mapping a Local Folder as a Windows Accessible Drive\nYou can also map a local folder, using the **subst** command. The following command creates a local drive P: rooted in the local Program Files directory:\n\n```\nsubst p: $env:programfiles\n```\n\nJust as with network drives, drives mapped within Windows PowerShell using **subst** are immediately visible to the Windows PowerShell shell.\n\n### Reading a Text File into an Array\nOne of the more common storage formats for text data is in a file with separate lines treated as distinct data elements. The **Get\\-Content** cmdlet can be used to read an entire file in one step, as shown here:\n\n```\nPS> Get-Content -Path C:\\boot.ini\n[boot loader]\ntimeout=5\ndefault=multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS\n[operating systems]\nmulti(0)disk(0)rdisk(0)partition(1)\\WINDOWS=\"Microsoft Windows XP Professional\"\n /noexecute=AlwaysOff /fastdetect\nmulti(0)disk(0)rdisk(0)partition(1)\\WINDOWS=\" Microsoft Windows XP Professional \nwith Data Execution Prevention\" /noexecute=optin /fastdetect\n```\n\n**Get\\-Content** already treats the data read from the file as an array, with one element per line of file content. You can confirm this by checking the **Length** of the returned content:\n\n```\nPS> (Get-Content -Path C:\\boot.ini).Length\n6\n```\n\nThis command is most useful for getting lists of information into Windows PowerShell directly. For example, you might store a list of computer names or IP addresses in a file C:\\\\temp\\\\domainMembers.txt, with one name on each line of the file. You can use **Get\\-Content** to retrieve the file contents and put them in the variable **$Computers**:\n\n```\n$Computers = Get-Content -Path C:\\temp\\DomainMembers.txt\n```\n\n**$Computers** is now an array containing a computer name in each element.\n\n"
}
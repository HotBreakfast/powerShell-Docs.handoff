{"nodes":[{"content":"Working with Registry Entries","pos":[12,41]},{"content":"Working with Registry Entries","pos":[239,268]},{"content":"Because registry entries are properties of keys and, as such, cannot be directly browsed, we need to take a slightly different approach when working with them.","pos":[269,428]},{"content":"Listing Registry Entries","pos":[434,458]},{"content":"There are many different ways to examine registry entries.","pos":[459,517]},{"content":"The simplest way is to get the property names associated with a key.","pos":[518,586]},{"content":"For example, to see the names of the entries in the registry key <bpt id=\"p1\">**</bpt>HKEY<ph id=\"ph1\">\\_</ph>LOCAL<ph id=\"ph2\">\\_</ph>MACHINE<ph id=\"ph3\">\\\\</ph>Software<ph id=\"ph4\">\\\\</ph>Microsoft<ph id=\"ph5\">\\\\</ph>Windows<ph id=\"ph6\">\\\\</ph>CurrentVersion<ept id=\"p1\">**</ept>, use <bpt id=\"p2\">**</bpt>Get<ph id=\"ph7\">\\-</ph>Item<ept id=\"p2\">**</ept>.","pos":[587,742]},{"content":"Registry keys have a property with the generic name of \"Property\" that is a list of registry entries in the key.","pos":[743,855]},{"content":"The following command selects the Property property and expands the items so that they are displayed in a list:","pos":[856,967]},{"pos":[1181,1261],"content":"To view the registry entries in a more readable form, use <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>ItemProperty<ept id=\"p1\">**</ept>:"},{"pos":[2155,2312],"content":"The Windows PowerShell<ph id=\"ph1\">\\-</ph>related properties for the key are all prefixed with \"PS\", such as <bpt id=\"p1\">**</bpt>PSPath<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>PSParentPath<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>PSChildName<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>PSProvider<ept id=\"p4\">**</ept>."},{"content":"You can use the \"<bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>\" notation for referring to the current location.","pos":[2314,2385]},{"content":"You can use <bpt id=\"p1\">**</bpt>Set<ph id=\"ph1\">\\-</ph>Location<ept id=\"p1\">**</ept> to change to the <bpt id=\"p2\">**</bpt>CurrentVersion<ept id=\"p2\">**</ept> registry container first:","pos":[2386,2477]},{"pos":[2578,2655],"content":"Alternatively, you can use the built<ph id=\"ph1\">\\-</ph>in HKLM PSDrive with <bpt id=\"p1\">**</bpt>Set<ph id=\"ph2\">\\-</ph>Location<ept id=\"p1\">**</ept>:"},{"pos":[2733,2850],"content":"You can then use the \"<bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>\" notation for the current location to list the properties without specifying a full path:"},{"pos":[3013,3238],"content":"Path expansion works the same as it does within the file system, so from this location you can get the <bpt id=\"p1\">**</bpt>ItemProperty<ept id=\"p1\">**</ept> listing for <bpt id=\"p2\">**</bpt>HKLM:<ph id=\"ph1\">\\\\</ph>SOFTWARE<ph id=\"ph2\">\\\\</ph>Microsoft<ph id=\"ph3\">\\\\</ph>Windows<ph id=\"ph4\">\\\\</ph>Help<ept id=\"p2\">**</ept> by using <bpt id=\"p3\">**</bpt>Get<ph id=\"ph5\">\\-</ph>ItemProperty <ph id=\"ph6\">\\-</ph>Path ..<ph id=\"ph7\">\\\\</ph>Help<ept id=\"p3\">**</ept>."},{"content":"Getting a Single Registry Entry","pos":[3244,3275]},{"content":"If you want to retrieve a specific entry in a registry key, you can use one of several possible approaches.","pos":[3276,3383]},{"content":"This example finds the value of <bpt id=\"p1\">**</bpt>DevicePath<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>HKEY<ph id=\"ph1\">\\_</ph>LOCAL<ph id=\"ph2\">\\_</ph>MACHINE<ph id=\"ph3\">\\\\</ph>SOFTWARE<ph id=\"ph4\">\\\\</ph>Microsoft<ph id=\"ph5\">\\\\</ph>Windows<ph id=\"ph6\">\\\\</ph>CurrentVersion<ept id=\"p2\">**</ept>.","pos":[3384,3505]},{"pos":[3507,3670],"content":"Using <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>ItemProperty<ept id=\"p1\">**</ept>, use the <bpt id=\"p2\">**</bpt>Path<ept id=\"p2\">**</ept> parameter to specify the name of the key, and the <bpt id=\"p3\">**</bpt>Name<ept id=\"p3\">**</ept> parameter to specify the name of the <bpt id=\"p4\">**</bpt>DevicePath<ept id=\"p4\">**</ept> entry."},{"pos":[4145,4248],"content":"This command returns the standard Windows PowerShell properties as well as the <bpt id=\"p1\">**</bpt>DevicePath<ept id=\"p1\">**</ept> property."},{"pos":[4252,4510],"content":"[!NOTE]\nAlthough **Get\\-ItemProperty** has **Filter**, **Include**, and **Exclude** parameters, they cannot be used to filter by property name. These parameters refer to registry keys—which are item paths—and not registry entries—which are item properties.","leadings":["","> "],"nodes":[{"content":"Although **Get\\-ItemProperty** has **Filter**, **Include**, and **Exclude** parameters, they cannot be used to filter by property name. These parameters refer to registry keys—which are item paths—and not registry entries—which are item properties.","pos":[8,256],"nodes":[{"content":"Although <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>ItemProperty<ept id=\"p1\">**</ept> has <bpt id=\"p2\">**</bpt>Filter<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Include<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>Exclude<ept id=\"p4\">**</ept> parameters, they cannot be used to filter by property name.","pos":[0,135]},{"content":"These parameters refer to registry keys—which are item paths—and not registry entries—which are item properties.","pos":[136,248]}]}]},{"content":"Another option is to use the Reg.exe command line tool.","pos":[4512,4567]},{"content":"For help with reg.exe, type <bpt id=\"p1\">**</bpt>reg.exe <ph id=\"ph1\">\\/</ph>?<ept id=\"p1\">**</ept>","pos":[4568,4611]},{"content":"at a command prompt.","pos":[4612,4632]},{"content":"To find the DevicePath entry, use reg.exe as shown in the following command:","pos":[4633,4709]},{"content":"You can also use the <bpt id=\"p1\">**</bpt>WshShell COM<ept id=\"p1\">**</ept> object as well to find some registry entries, although this method does not work with large binary data or with registry entry names that include characters such as \"<ph id=\"ph1\">\\\\</ph>\").","pos":[4929,5138]},{"content":"Append the property name to the item path with a <ph id=\"ph1\">\\\\</ph> separator:","pos":[5139,5201]},{"content":"Creating New Registry Entries","pos":[5344,5373]},{"content":"To add a new entry named \"PowerShellPath\" to the <bpt id=\"p1\">**</bpt>CurrentVersion<ept id=\"p1\">**</ept> key, use <bpt id=\"p2\">**</bpt>New<ph id=\"ph1\">\\-</ph>ItemProperty<ept id=\"p2\">**</ept> with the path to the key, the entry name, and the value of the entry.","pos":[5374,5542]},{"content":"For this example, we will take the value of the Windows PowerShell variable <bpt id=\"p1\">**</bpt>$PSHome<ept id=\"p1\">**</ept>, which stores the path to the installation directory for Windows PowerShell.","pos":[5543,5707]},{"content":"You can add the new entry to the key by using the following command, and the command also returns information about the new entry:","pos":[5709,5839]},{"pos":[6396,6521],"content":"The <bpt id=\"p1\">**</bpt>PropertyType<ept id=\"p1\">**</ept> must be the name of a <bpt id=\"p2\">**</bpt>Microsoft.Win32.RegistryValueKind<ept id=\"p2\">**</ept> enumeration member from the following table:"},{"content":"PropertyType Value","pos":[6524,6542]},{"content":"Meaning","pos":[6543,6550]},{"content":"Binary","pos":[6590,6596]},{"content":"Binary data","pos":[6597,6608]},{"content":"DWord","pos":[6611,6616]},{"content":"A number that is a valid UInt32","pos":[6617,6648]},{"content":"ExpandString","pos":[6651,6663]},{"content":"A string that can contain environment variables that are dynamically expanded","pos":[6664,6741]},{"content":"MultiString","pos":[6744,6755]},{"content":"A multiline string","pos":[6756,6774]},{"content":"String","pos":[6777,6783]},{"content":"Any string value","pos":[6784,6800]},{"content":"QWord","pos":[6803,6808]},{"content":"8 bytes of binary data","pos":[6809,6831]},{"pos":[6836,6957],"content":"[!NOTE]\nYou can add a registry entry to multiple locations by specifying an array of values for the **Path** parameter:","leadings":["","> "],"nodes":[{"content":"You can add a registry entry to multiple locations by specifying an array of values for the <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept> parameter:","pos":[8,119]}]},{"pos":[7145,7276],"content":"You can also overwrite a pre<ph id=\"ph1\">\\-</ph>existing registry entry value by adding the <bpt id=\"p1\">**</bpt>Force<ept id=\"p1\">**</ept> parameter to any <bpt id=\"p2\">**</bpt>New<ph id=\"ph2\">\\-</ph>ItemProperty<ept id=\"p2\">**</ept> command."},{"content":"Renaming Registry Entries","pos":[7282,7307]},{"pos":[7308,7389],"content":"To rename the <bpt id=\"p1\">**</bpt>PowerShellPath<ept id=\"p1\">**</ept> entry to \"PSHome,\" use <bpt id=\"p2\">**</bpt>Rename<ph id=\"ph1\">\\-</ph>ItemProperty<ept id=\"p2\">**</ept>:"},{"pos":[7511,7587],"content":"To display the renamed value, add the <bpt id=\"p1\">**</bpt>PassThru<ept id=\"p1\">**</ept> parameter to the command."},{"content":"Deleting Registry Entries","pos":[7723,7748]},{"pos":[7749,7841],"content":"To delete both the PSHome and PowerShellPath registry entries, use <bpt id=\"p1\">**</bpt>Remove<ph id=\"ph1\">\\-</ph>ItemProperty<ept id=\"p1\">**</ept>:"}],"content":"---\ntitle:  Working with Registry Entries\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  fd254570-27ac-4cc9-81d4-011afd29b7dc\n---\n\n# Working with Registry Entries\nBecause registry entries are properties of keys and, as such, cannot be directly browsed, we need to take a slightly different approach when working with them.\n\n### Listing Registry Entries\nThere are many different ways to examine registry entries. The simplest way is to get the property names associated with a key. For example, to see the names of the entries in the registry key **HKEY\\_LOCAL\\_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion**, use **Get\\-Item**. Registry keys have a property with the generic name of \"Property\" that is a list of registry entries in the key. The following command selects the Property property and expands the items so that they are displayed in a list:\n\n```\nPS> Get-Item -Path Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion | Select-Object -ExpandProperty Property\nDevicePath\nMediaPathUnexpanded\nProgramFilesDir\nCommonFilesDir\nProductId\n```\n\nTo view the registry entries in a more readable form, use **Get\\-ItemProperty**:\n\n```\nPS> Get-ItemProperty -Path Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n\nPSPath              : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SO\n                      FTWARE\\Microsoft\\Windows\\CurrentVersion\nPSParentPath        : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SO\n                      FTWARE\\Microsoft\\Windows\nPSChildName         : CurrentVersion\nPSDrive             : HKLM\nPSProvider          : Microsoft.PowerShell.Core\\Registry\nDevicePath          : C:\\WINDOWS\\inf\nMediaPathUnexpanded : C:\\WINDOWS\\Media\nProgramFilesDir     : C:\\Program Files\nCommonFilesDir      : C:\\Program Files\\Common Files\nProductId           : 76487-338-1167776-22465\nWallPaperDir        : C:\\WINDOWS\\Web\\Wallpaper\nMediaPath           : C:\\WINDOWS\\Media\nProgramFilesPath    : C:\\Program Files\nPF_AccessoriesName  : Accessories\n(default)           :\n```\n\nThe Windows PowerShell\\-related properties for the key are all prefixed with \"PS\", such as **PSPath**, **PSParentPath**, **PSChildName**, and **PSProvider**.\n\nYou can use the \"**.**\" notation for referring to the current location. You can use **Set\\-Location** to change to the **CurrentVersion** registry container first:\n\n```\nSet-Location -Path Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n```\n\nAlternatively, you can use the built\\-in HKLM PSDrive with **Set\\-Location**:\n\n```\nSet-Location -Path hklm:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n```\n\nYou can then use the \"**.**\" notation for the current location to list the properties without specifying a full path:\n\n```\nPS> Get-ItemProperty -Path .\n...\nDevicePath          : C:\\WINDOWS\\inf\nMediaPathUnexpanded : C:\\WINDOWS\\Media\nProgramFilesDir     : C:\\Program Files\n...\n```\n\nPath expansion works the same as it does within the file system, so from this location you can get the **ItemProperty** listing for **HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\Help** by using **Get\\-ItemProperty \\-Path ..\\\\Help**.\n\n### Getting a Single Registry Entry\nIf you want to retrieve a specific entry in a registry key, you can use one of several possible approaches. This example finds the value of **DevicePath** in **HKEY\\_LOCAL\\_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion**.\n\nUsing **Get\\-ItemProperty**, use the **Path** parameter to specify the name of the key, and the **Name** parameter to specify the name of the **DevicePath** entry.\n\n```\nPS> Get-ItemProperty -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion -Name DevicePath\n\nPSPath       : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\Software\\\n               Microsoft\\Windows\\CurrentVersion\nPSParentPath : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\Software\\\n               Microsoft\\Windows\nPSChildName  : CurrentVersion\nPSDrive      : HKLM\nPSProvider   : Microsoft.PowerShell.Core\\Registry\nDevicePath   : C:\\WINDOWS\\inf\n```\n\nThis command returns the standard Windows PowerShell properties as well as the **DevicePath** property.\n\n> [!NOTE]\n> Although **Get\\-ItemProperty** has **Filter**, **Include**, and **Exclude** parameters, they cannot be used to filter by property name. These parameters refer to registry keys—which are item paths—and not registry entries—which are item properties.\n\nAnother option is to use the Reg.exe command line tool. For help with reg.exe, type **reg.exe \\/?** at a command prompt. To find the DevicePath entry, use reg.exe as shown in the following command:\n\n```\nPS> reg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion /v DevicePath\n\n! REG.EXE VERSION 3.0\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n    DevicePath  REG_EXPAND_SZ   %SystemRoot%\\inf\n```\n\nYou can also use the **WshShell COM** object as well to find some registry entries, although this method does not work with large binary data or with registry entry names that include characters such as \"\\\\\"). Append the property name to the item path with a \\\\ separator:\n\n```\nPS> (New-Object -ComObject WScript.Shell).RegRead(\"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\DevicePath\")\n%SystemRoot%\\inf\n```\n\n### Creating New Registry Entries\nTo add a new entry named \"PowerShellPath\" to the **CurrentVersion** key, use **New\\-ItemProperty** with the path to the key, the entry name, and the value of the entry. For this example, we will take the value of the Windows PowerShell variable **$PSHome**, which stores the path to the installation directory for Windows PowerShell.\n\nYou can add the new entry to the key by using the following command, and the command also returns information about the new entry:\n\n```\nPS> New-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion -Name PowerShellPath -PropertyType String -Value $PSHome\n\nPSPath         : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SOFTWAR\n                 E\\Microsoft\\Windows\\CurrentVersion\nPSParentPath   : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SOFTWAR\n                 E\\Microsoft\\Windows\nPSChildName    : CurrentVersion\nPSDrive        : HKLM\nPSProvider     : Microsoft.PowerShell.Core\\Registry\nPowerShellPath : C:\\Program Files\\Windows PowerShell\\v1.0\n```\n\nThe **PropertyType** must be the name of a **Microsoft.Win32.RegistryValueKind** enumeration member from the following table:\n\n|PropertyType Value|Meaning|\n|----------------------|-----------|\n|Binary|Binary data|\n|DWord|A number that is a valid UInt32|\n|ExpandString|A string that can contain environment variables that are dynamically expanded|\n|MultiString|A multiline string|\n|String|Any string value|\n|QWord|8 bytes of binary data|\n\n> [!NOTE]\n> You can add a registry entry to multiple locations by specifying an array of values for the **Path** parameter:\n\n```\nNew-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion, HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion -Name PowerShellPath -PropertyType String -Value $PSHome\n```\n\nYou can also overwrite a pre\\-existing registry entry value by adding the **Force** parameter to any **New\\-ItemProperty** command.\n\n### Renaming Registry Entries\nTo rename the **PowerShellPath** entry to \"PSHome,\" use **Rename\\-ItemProperty**:\n\n```\nRename-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion -Name PowerShellPath -NewName PSHome\n```\n\nTo display the renamed value, add the **PassThru** parameter to the command.\n\n```\nRename-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion -Name PowerShellPath -NewName PSHome -passthru\n```\n\n### Deleting Registry Entries\nTo delete both the PSHome and PowerShellPath registry entries, use **Remove\\-ItemProperty**:\n\n```\nRemove-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion -Name PSHome\nRemove-ItemProperty -Path HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion -Name PowerShellPath\n```\n\n"}
{
  "nodes": [
    {
      "pos": [
        2,
        33
      ],
      "content": "DSC for Linux nxScript Resource"
    },
    {
      "pos": [
        35,
        167
      ],
      "content": "The <bpt id=\"p1\">**</bpt>nxScript<ept id=\"p1\">**</ept> resource in PowerShell Desired State Configuration (DSC) provides a mechanism to run Linux scripts on a Linux node."
    },
    {
      "pos": [
        172,
        178
      ],
      "content": "Syntax"
    },
    {
      "pos": [
        385,
        395
      ],
      "content": "Properties"
    },
    {
      "pos": [
        400,
        408
      ],
      "content": "Property"
    },
    {
      "pos": [
        412,
        423
      ],
      "content": "Description"
    },
    {
      "pos": [
        439,
        448
      ],
      "content": "GetScript"
    },
    {
      "content": "Provides a script that runs when you invoke the <bpt id=\"p2\">[</bpt>Get-DscConfiguration<ept id=\"p2\">](https://technet.microsoft.com/en-us/library/dn521625.aspx)</ept> cmdlet.",
      "pos": [
        450,
        587
      ]
    },
    {
      "content": "The script must begin with a shebang, such as #!/bin/bash.",
      "pos": [
        588,
        646
      ]
    },
    {
      "pos": [
        651,
        660
      ],
      "content": "SetScript"
    },
    {
      "content": "Provides a script.",
      "pos": [
        662,
        680
      ]
    },
    {
      "content": "When you invoke the <bpt id=\"p3\">[</bpt>Start-DscConfiguration<ept id=\"p3\">](https://technet.microsoft.com/en-us/library/dn521623.aspx)</ept> cmdlet, the <bpt id=\"p4\">**</bpt>TestScript<ept id=\"p4\">**</ept> runs first.",
      "pos": [
        681,
        823
      ]
    },
    {
      "content": "If the <bpt id=\"p5\">**</bpt>TestScript<ept id=\"p5\">**</ept> block returns an exit code other than 0, the <bpt id=\"p6\">**</bpt>SetScript<ept id=\"p6\">**</ept> block will run.",
      "pos": [
        824,
        920
      ]
    },
    {
      "content": "If the <bpt id=\"p7\">**</bpt>TestScript<ept id=\"p7\">**</ept> returns an exit code of 0, the <bpt id=\"p8\">**</bpt>SetScript<ept id=\"p8\">**</ept> will not run.",
      "pos": [
        921,
        1001
      ]
    },
    {
      "content": "The script must begin with a shebang, such as <ph id=\"ph1\">`#!/bin/bash`</ph>.",
      "pos": [
        1002,
        1062
      ]
    },
    {
      "pos": [
        1067,
        1077
      ],
      "content": "TestScript"
    },
    {
      "content": "Provides a script.",
      "pos": [
        1079,
        1097
      ]
    },
    {
      "content": "When you invoke the <bpt id=\"p9\">[</bpt>Start-DscConfiguration<ept id=\"p9\">](https://technet.microsoft.com/en-us/library/dn521623.aspx)</ept> cmdlet, this script runs.",
      "pos": [
        1098,
        1227
      ]
    },
    {
      "content": "If it returns an exit code other than 0, the SetScript will run.",
      "pos": [
        1228,
        1292
      ]
    },
    {
      "content": "If it returns an exit code of 0, the <bpt id=\"p10\">**</bpt>SetScript<ept id=\"p10\">**</ept> will not run.",
      "pos": [
        1293,
        1357
      ]
    },
    {
      "content": "The <bpt id=\"p11\">**</bpt>TestScript<ept id=\"p11\">**</ept> also runs when you invoke the <bpt id=\"p12\">[</bpt>Test-DscConfiguration<ept id=\"p12\">](https://technet.microsoft.com/en-us/library/dn407382.aspx)</ept> cmdlet.",
      "pos": [
        1358,
        1497
      ]
    },
    {
      "content": "However, in this case, the <bpt id=\"p13\">**</bpt>SetScript<ept id=\"p13\">**</ept> will not run, no matter what exit code is returned from the <bpt id=\"p14\">**</bpt>TestScript<ept id=\"p14\">**</ept>.",
      "pos": [
        1498,
        1614
      ]
    },
    {
      "content": "The <bpt id=\"p15\">**</bpt>TestScript<ept id=\"p15\">**</ept> must return an exit code of 0 if the actual configuration matches the current desired state configuration, and an exit code other than 0 if it does not match.",
      "pos": [
        1615,
        1792
      ]
    },
    {
      "content": "(The current desired state configuration is the last configuration enacted on the node that is using DSC).",
      "pos": [
        1793,
        1899
      ]
    },
    {
      "content": "The script must begin with a shebang, such as 1#!/bin/bash.1",
      "pos": [
        1900,
        1960
      ]
    },
    {
      "pos": [
        1965,
        1969
      ],
      "content": "User"
    },
    {
      "pos": [
        1971,
        2001
      ],
      "content": "The user to run the script as."
    },
    {
      "pos": [
        2006,
        2011
      ],
      "content": "Group"
    },
    {
      "pos": [
        2013,
        2044
      ],
      "content": "The group to run the script as."
    },
    {
      "pos": [
        2049,
        2058
      ],
      "content": "DependsOn"
    },
    {
      "content": "Indicates that the configuration of another resource must run before this resource is configured.",
      "pos": [
        2061,
        2158
      ]
    },
    {
      "content": "For example, if the <bpt id=\"p16\">**</bpt>ID<ept id=\"p16\">**</ept> of the resource configuration script block that you want to run first is <bpt id=\"p17\">**</bpt>ResourceName<ept id=\"p17\">**</ept> and its type is <bpt id=\"p18\">**</bpt>ResourceType<ept id=\"p18\">**</ept>, the syntax for using this property is <ph id=\"ph2\">`DependsOn = \"[ResourceType]ResourceName\"`</ph>.",
      "pos": [
        2159,
        2391
      ]
    },
    {
      "pos": [
        2398,
        2405
      ],
      "content": "Example"
    },
    {
      "pos": [
        2407,
        2526
      ],
      "content": "The following example demonstrates the use of the <bpt id=\"p19\">**</bpt>nxScript<ept id=\"p19\">**</ept> resource to perform additional configuration management."
    }
  ],
  "content": "# DSC for Linux nxScript Resource\n\nThe **nxScript** resource in PowerShell Desired State Configuration (DSC) provides a mechanism to run Linux scripts on a Linux node.\n\n## Syntax\n\n```\nnxScript <string> #ResourceName\n{\n    GetScript = <string>\n    SetScript = <string>\n    TestScript = <string>\n    [ User = <string> ]\n    { Group = <string> ]\n    [ DependsOn = <string[]> ]\n\n}\n```\n\n## Properties\n\n|  Property |  Description | \n|---|---|\n| GetScript| Provides a script that runs when you invoke the [Get-DscConfiguration](https://technet.microsoft.com/en-us/library/dn521625.aspx) cmdlet. The script must begin with a shebang, such as #!/bin/bash.| \n| SetScript| Provides a script. When you invoke the [Start-DscConfiguration](https://technet.microsoft.com/en-us/library/dn521623.aspx) cmdlet, the **TestScript** runs first. If the **TestScript** block returns an exit code other than 0, the **SetScript** block will run. If the **TestScript** returns an exit code of 0, the **SetScript** will not run. The script must begin with a shebang, such as `#!/bin/bash`.| \n| TestScript| Provides a script. When you invoke the [Start-DscConfiguration](https://technet.microsoft.com/en-us/library/dn521623.aspx) cmdlet, this script runs. If it returns an exit code other than 0, the SetScript will run. If it returns an exit code of 0, the **SetScript** will not run. The **TestScript** also runs when you invoke the [Test-DscConfiguration](https://technet.microsoft.com/en-us/library/dn407382.aspx) cmdlet. However, in this case, the **SetScript** will not run, no matter what exit code is returned from the **TestScript**. The **TestScript** must return an exit code of 0 if the actual configuration matches the current desired state configuration, and an exit code other than 0 if it does not match. (The current desired state configuration is the last configuration enacted on the node that is using DSC). The script must begin with a shebang, such as 1#!/bin/bash.1| \n| User| The user to run the script as.| \n| Group| The group to run the script as.| \n| DependsOn | Indicates that the configuration of another resource must run before this resource is configured. For example, if the **ID** of the resource configuration script block that you want to run first is **ResourceName** and its type is **ResourceType**, the syntax for using this property is `DependsOn = \"[ResourceType]ResourceName\"`.| \n\n## Example\n\nThe following example demonstrates the use of the **nxScript** resource to perform additional configuration management.\n\n```\nImport-DSCResource -Module nx \n\nNode $node {\nnxScript KeepDirEmpty{\n\n    GetScript = @\"\n#!/bin/bash\nls /tmp/mydir/ | wc -l\n\"@\n\n    SetScript = @\"\n#!/bin/bash\nrm -rf /tmp/mydir/*\n\"@\n\n    TestScript = @'\n#!/bin/bash\nfilecount=`ls /tmp/mydir | wc -l`\nif [ $filecount -gt 0 ]\nthen\n    exit 1\nelse\n    exit 0\nfi\n'@\n} \n}\n```\n"
}
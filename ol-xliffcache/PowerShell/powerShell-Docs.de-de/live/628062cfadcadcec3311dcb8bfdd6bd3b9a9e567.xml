{"nodes":[{"content":"Creating a Custom Input Box","pos":[12,39]},{"content":"Creating a Custom Input Box","pos":[237,264]},{"content":"Script a graphical custom input box by using Microsoft .NET Framework form\\-building features in Windows PowerShell 3.0 and later releases.","pos":[265,404]},{"content":"Create a custom, graphical input box","pos":[409,445]},{"content":"Copy and then paste the following into Windows PowerShell ISE, and then save it as a Windows PowerShell script (.ps1).","pos":[446,564]},{"content":"The script begins by loading two .NET Framework classes: <bpt id=\"p1\">**</bpt>System.Drawing<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>System.Windows.Forms<ept id=\"p2\">**</ept>.","pos":[2129,2234]},{"content":"You then start a new instance of the .NET Framework class <bpt id=\"p1\">**</bpt>System.Windows.Forms.Form<ept id=\"p1\">**</ept>; that provides a blank form or window to which you can start adding controls.","pos":[2235,2400]},{"content":"After you create an instance of the Form class, assign values to three properties of this class.","pos":[2456,2552]},{"content":"Text.","pos":[2560,2565]},{"content":"This becomes the title of the window.","pos":[2568,2605]},{"content":"Size.","pos":[2613,2618]},{"content":"This is the size of the form, in pixels.","pos":[2621,2661]},{"content":"The preceding script creates a form that’s 300 pixels wide by 200 pixels tall.","pos":[2662,2740]},{"content":"StartingPosition.","pos":[2748,2765]},{"content":"This optional property is set to <bpt id=\"p1\">**</bpt>CenterScreen<ept id=\"p1\">**</ept> in the preceding script.","pos":[2768,2842]},{"content":"If you don’t add this property, Windows selects a location when the form is opened.","pos":[2843,2926]},{"content":"By setting the <bpt id=\"p1\">**</bpt>StartingPosition<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>CenterScreen<ept id=\"p2\">**</ept>, you’re automatically displaying the form in the middle of the screen each time it loads.","pos":[2927,3072]},{"content":"Next, create an <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> button for your form.","pos":[3205,3249]},{"content":"Specify the size and behavior of the <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> button.","pos":[3250,3301]},{"content":"In this example, the button position is 120 pixels from the form’s top edge, and 75 pixels from the left edge.","pos":[3302,3412]},{"content":"The button height is 23 pixels, while the button length is 75 pixels.","pos":[3413,3482]},{"content":"The script uses predefined Windows Forms types to determine the button behaviors.","pos":[3483,3564]},{"content":"Similarly, you create a <bpt id=\"p1\">**</bpt>Cancel<ept id=\"p1\">**</ept> button.","pos":[3890,3932]},{"content":"The <bpt id=\"p1\">**</bpt>Cancel<ept id=\"p1\">**</ept> button is 120 pixels from the top, but 150 pixels from the left edge of the window.","pos":[3933,4031]},{"content":"Next, provide label text on your window that describes the information you want users to provide.","pos":[4394,4491]},{"content":"Add the control (in this case, a text box) that lets users provide the information you’ve described in your label text.","pos":[4753,4872]},{"content":"There are many other controls you can apply besides text boxes; for more controls, see <bpt id=\"p1\">[</bpt>System.Windows.Forms Namespace<ept id=\"p1\">](http://msdn.microsoft.com/library/k50ex0x9(v=vs.110).aspx)</ept> on MSDN.","pos":[4873,5060]},{"pos":[5268,5379],"content":"Set the <bpt id=\"p1\">**</bpt>Topmost<ept id=\"p1\">**</ept> property to <bpt id=\"p2\">**</bpt>$True<ept id=\"p2\">**</ept> to force the window to open atop other open windows and dialog boxes."},{"content":"Next, add this line of code to activate the form, and set the focus to the text box that you created.","pos":[5412,5513]},{"content":"Add the following line of code to display the form in Windows.","pos":[5561,5623]},{"pos":[5663,5850],"content":"Finally, the code inside the <bpt id=\"p1\">**</bpt>If<ept id=\"p1\">**</ept> block instructs Windows what to do with the form after users provide text in the text box, and then click the <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept> button or press the <bpt id=\"p3\">**</bpt>Enter<ept id=\"p3\">**</ept> key."},{"content":"See Also","pos":[5955,5963]},{"pos":[5964,6294],"content":"<bpt id=\"p1\">[</bpt>Hey Scripting Guy:  Why don’t these PowerShell GUI examples work?<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=506644)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">[</bpt>GitHub: Dave Wyatt's WinFormsExampleUpdates<ept id=\"p2\">](https://github.com/dlwyatt/WinFormsExampleUpdates)</ept><ph id=\"ph2\">\n</ph><bpt id=\"p3\">[</bpt>Windows PowerShell Tip of the Week:  Creating a Custom Input Box<ept id=\"p3\">](http://technet.microsoft.com/library/ff730941.aspx)</ept>"}],"content":"---\ntitle:  Creating a Custom Input Box\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  0b12e56c-299f-40ee-afbf-d30d23ed2565\n---\n\n# Creating a Custom Input Box\nScript a graphical custom input box by using Microsoft .NET Framework form\\-building features in Windows PowerShell 3.0 and later releases.\n\n## Create a custom, graphical input box\nCopy and then paste the following into Windows PowerShell ISE, and then save it as a Windows PowerShell script (.ps1).\n\n```\nAdd-Type -AssemblyName System.Windows.Forms\nAdd-Type -AssemblyName System.Drawing\n\n$form = New-Object System.Windows.Forms.Form \n$form.Text = \"Data Entry Form\"\n$form.Size = New-Object System.Drawing.Size(300,200) \n$form.StartPosition = \"CenterScreen\"\n\n$OKButton = New-Object System.Windows.Forms.Button\n$OKButton.Location = New-Object System.Drawing.Point(75,120)\n$OKButton.Size = New-Object System.Drawing.Size(75,23)\n$OKButton.Text = \"OK\"\n$OKButton.DialogResult = [System.Windows.Forms.DialogResult]::OK\n$form.AcceptButton = $OKButton\n$form.Controls.Add($OKButton)\n\n$CancelButton = New-Object System.Windows.Forms.Button\n$CancelButton.Location = New-Object System.Drawing.Point(150,120)\n$CancelButton.Size = New-Object System.Drawing.Size(75,23)\n$CancelButton.Text = \"Cancel\"\n$CancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel\n$form.CancelButton = $CancelButton\n$form.Controls.Add($CancelButton)\n\n$label = New-Object System.Windows.Forms.Label\n$label.Location = New-Object System.Drawing.Point(10,20) \n$label.Size = New-Object System.Drawing.Size(280,20) \n$label.Text = \"Please enter the information in the space below:\"\n$form.Controls.Add($label) \n\n$textBox = New-Object System.Windows.Forms.TextBox \n$textBox.Location = New-Object System.Drawing.Point(10,40) \n$textBox.Size = New-Object System.Drawing.Size(260,20) \n$form.Controls.Add($textBox) \n\n$form.Topmost = $True\n\n$form.Add_Shown({$textBox.Select()})\n$result = $form.ShowDialog()\n\nif ($result -eq [System.Windows.Forms.DialogResult]::OK)\n{\n    $x = $textBox.Text\n    $x\n}\n```\n\nThe script begins by loading two .NET Framework classes: **System.Drawing** and **System.Windows.Forms**. You then start a new instance of the .NET Framework class **System.Windows.Forms.Form**; that provides a blank form or window to which you can start adding controls.\n\n```\n$form = New-Object System.Windows.Forms.Form\n```\n\nAfter you create an instance of the Form class, assign values to three properties of this class.\n\n-   **Text.** This becomes the title of the window.\n\n-   **Size.** This is the size of the form, in pixels. The preceding script creates a form that’s 300 pixels wide by 200 pixels tall.\n\n-   **StartingPosition.** This optional property is set to **CenterScreen** in the preceding script. If you don’t add this property, Windows selects a location when the form is opened. By setting the **StartingPosition** to **CenterScreen**, you’re automatically displaying the form in the middle of the screen each time it loads.\n\n```\n$form.Text = \"Data Entry Form\"\n$form.Size = New-Object System.Drawing.Size(300,200) \n$form.StartPosition = \"CenterScreen\"\n```\n\nNext, create an **OK** button for your form. Specify the size and behavior of the **OK** button. In this example, the button position is 120 pixels from the form’s top edge, and 75 pixels from the left edge. The button height is 23 pixels, while the button length is 75 pixels. The script uses predefined Windows Forms types to determine the button behaviors.\n\n```\n$OKButton = New-Object System.Windows.Forms.Button\n$OKButton.Location = New-Object System.Drawing.Point(75,120)\n$OKButton.Size = New-Object System.Drawing.Size(75,23)\n$OKButton.Text = \"OK\"\n$OKButton.DialogResult = [System.Windows.Forms.DialogResult]::OK\n$form.AcceptButton = $OKButton\n$form.Controls.Add($OKButton)\n```\n\nSimilarly, you create a **Cancel** button. The **Cancel** button is 120 pixels from the top, but 150 pixels from the left edge of the window.\n\n```\n$CancelButton = New-Object System.Windows.Forms.Button\n$CancelButton.Location = New-Object System.Drawing.Point(150,120)\n$CancelButton.Size = New-Object System.Drawing.Size(75,23)\n$CancelButton.Text = \"Cancel\"\n$CancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel\n$form.CancelButton = $CancelButton\n$form.Controls.Add($CancelButton)\n```\n\nNext, provide label text on your window that describes the information you want users to provide.\n\n```\n$label = New-Object System.Windows.Forms.Label\n$label.Location = New-Object System.Drawing.Point(10,20) \n$label.Size = New-Object System.Drawing.Size(280,20) \n$label.Text = \"Please enter the information in the space below:\"\n$form.Controls.Add($label)\n```\n\nAdd the control (in this case, a text box) that lets users provide the information you’ve described in your label text. There are many other controls you can apply besides text boxes; for more controls, see [System.Windows.Forms Namespace](http://msdn.microsoft.com/library/k50ex0x9(v=vs.110).aspx) on MSDN.\n\n```\n$textBox = New-Object System.Windows.Forms.TextBox \n$textBox.Location = New-Object System.Drawing.Point(10,40) \n$textBox.Size = New-Object System.Drawing.Size(260,20) \n$form.Controls.Add($textBox)\n```\n\nSet the **Topmost** property to **$True** to force the window to open atop other open windows and dialog boxes.\n\n```\n$form.Topmost = $True\n```\n\nNext, add this line of code to activate the form, and set the focus to the text box that you created.\n\n```\n$form.Add_Shown({$textBox.Select()})\n```\n\nAdd the following line of code to display the form in Windows.\n\n```\n$result = $form.ShowDialog()\n```\n\nFinally, the code inside the **If** block instructs Windows what to do with the form after users provide text in the text box, and then click the **OK** button or press the **Enter** key.\n\n```\nif ($result -eq [System.Windows.Forms.DialogResult]::OK)\n{\n    $x = $textBox.Text\n    $x\n}\n```\n\n## See Also\n[Hey Scripting Guy:  Why don’t these PowerShell GUI examples work?](http://go.microsoft.com/fwlink/?LinkId=506644)\n[GitHub: Dave Wyatt's WinFormsExampleUpdates](https://github.com/dlwyatt/WinFormsExampleUpdates)\n[Windows PowerShell Tip of the Week:  Creating a Custom Input Box](http://technet.microsoft.com/library/ff730941.aspx)\n\n"}
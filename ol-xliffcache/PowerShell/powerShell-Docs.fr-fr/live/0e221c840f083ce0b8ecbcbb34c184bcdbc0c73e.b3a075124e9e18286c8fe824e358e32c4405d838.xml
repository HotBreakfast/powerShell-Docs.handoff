{"nodes":[{"pos":[105,126],"content":"powershell,cmdlet,jea","needQuote":true,"nodes":[{"content":"powershell,cmdlet,jea","pos":[0,21]}]},{"pos":[156,187],"content":"common role capability pitfalls","needQuote":true,"nodes":[{"content":"common role capability pitfalls","pos":[0,31]}]},{"content":"Common Role Capability Pitfalls","pos":[224,255]},{"content":"You may run into a few common pitfalls into you go through this process yourself.","pos":[256,337]},{"content":"Here is a quick guide explaining how to identify and remediate these issues when modifying or creating a new endpoint:","pos":[338,456],"source":"\nHere is a quick guide explaining how to identify and remediate these issues when modifying or creating a new endpoint:"},{"content":"Functions vs. Cmdlets","pos":[463,484]},{"content":"PowerShell commands written in PowerShell are PowerShell Functions.","pos":[485,552]},{"content":"PowerShell commands written as specialized .NET classes are PowerShell Cmdlets.","pos":[553,632],"source":"\nPowerShell commands written as specialized .NET classes are PowerShell Cmdlets."},{"content":"You can check the command type by running <ph id=\"ph1\">`Get-Command`</ph>.","pos":[633,689],"source":"\nYou can check the command type by running `Get-Command`."},{"content":"VisibleProviders","pos":[696,712]},{"content":"You will need to expose any providers your commands need.","pos":[713,770]},{"content":"The most common is the FileSystem provider, but you may also need to expose others, like the Registry provider.","pos":[771,882],"source":"\nThe most common is the FileSystem provider, but you may also need to expose others, like the Registry provider."},{"content":"For an introduction to providers, check out this <bpt id=\"p1\">[</bpt>Hey, Scripting Guy blog post<ept id=\"p1\">](http://blogs.technet.com/b/heyscriptingguy/archive/2015/04/20/find-and-use-windows-powershell-providers.aspx)</ept>.","pos":[883,1073],"source":"\nFor an introduction to providers, check out this [Hey, Scripting Guy blog post](http://blogs.technet.com/b/heyscriptingguy/archive/2015/04/20/find-and-use-windows-powershell-providers.aspx)."},{"content":"Be careful when exposing providers -- often, it is better to define your own function that works with the underlying providers than to directly expose the provider in a JEA session.","pos":[1074,1255],"source":"\nBe careful when exposing providers -- often, it is better to define your own function that works with the underlying providers than to directly expose the provider in a JEA session."},{"content":"This way, you can still allow users to work with files, registry keys, etc. but retain control over <bpt id=\"p1\">**</bpt>which<ept id=\"p1\">**</ept> files and registry keys they can work with using custom validation logic.","pos":[1256,1439],"source":"\nThis way, you can still allow users to work with files, registry keys, etc. but retain control over **which** files and registry keys they can work with using custom validation logic."}],"content":"---\ndescription:  \nmanager:  dongill\nms.topic:  article\nauthor:  jpjofre\nms.prod:  powershell\nkeywords:  powershell,cmdlet,jea\nms.date:  2016-06-22\ntitle:  common role capability pitfalls\nms.technology:  powershell\n---\n\n### Common Role Capability Pitfalls\nYou may run into a few common pitfalls into you go through this process yourself.\nHere is a quick guide explaining how to identify and remediate these issues when modifying or creating a new endpoint:\n\n#### Functions vs. Cmdlets\nPowerShell commands written in PowerShell are PowerShell Functions.\nPowerShell commands written as specialized .NET classes are PowerShell Cmdlets.\nYou can check the command type by running `Get-Command`.\n\n#### VisibleProviders\nYou will need to expose any providers your commands need.\nThe most common is the FileSystem provider, but you may also need to expose others, like the Registry provider.\nFor an introduction to providers, check out this [Hey, Scripting Guy blog post](http://blogs.technet.com/b/heyscriptingguy/archive/2015/04/20/find-and-use-windows-powershell-providers.aspx).\nBe careful when exposing providers -- often, it is better to define your own function that works with the underlying providers than to directly expose the provider in a JEA session.\nThis way, you can still allow users to work with files, registry keys, etc. but retain control over **which** files and registry keys they can work with using custom validation logic.\n\n"}
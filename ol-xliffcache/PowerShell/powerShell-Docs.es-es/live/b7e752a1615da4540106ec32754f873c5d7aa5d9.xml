{"nodes":[{"content":"Manipulating Items Directly","pos":[12,39]},{"content":"Manipulating Items Directly","pos":[237,264]},{"content":"The elements that you see in Windows PowerShell drives, such as the files and folders in the file system drives, and the registry keys in the Windows PowerShell registry drives, are called <bpt id=\"p1\">*</bpt>items<ept id=\"p1\">*</ept> in Windows PowerShell.","pos":[265,484]},{"content":"The cmdlets for working with them item have the noun <bpt id=\"p1\">**</bpt>Item<ept id=\"p1\">**</ept> in their names.","pos":[485,562]},{"pos":[564,677],"content":"The output of the <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>Command <ph id=\"ph2\">\\-</ph>Noun Item<ept id=\"p1\">**</ept> command shows that there are nine Windows PowerShell item cmdlets."},{"content":"Creating New Items (New<ph id=\"ph1\">\\-</ph>Item)","pos":[1558,1588]},{"content":"To create a new item in the file system, use the <bpt id=\"p1\">**</bpt>New<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept> cmdlet.","pos":[1589,1659]},{"content":"Include the <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept> parameter with path to the item, and the <bpt id=\"p2\">**</bpt>ItemType<ept id=\"p2\">**</ept> parameter with a value of \"file\" or \"directory\".","pos":[1660,1783]},{"content":"For example, to create a new directory named \"New.Directory\"in the C:<ph id=\"ph1\">\\\\</ph>Temp directory,  type:","pos":[1785,1878]},{"content":"To create a file, change the value of the <bpt id=\"p1\">**</bpt>ItemType<ept id=\"p1\">**</ept> parameter to \"file\".","pos":[2180,2255]},{"content":"For example, to create a file named \"file1.txt\" in the New.Directory directory, type:","pos":[2256,2341]},{"content":"You can use the same technique to create a new registry key.","pos":[2654,2714]},{"content":"In fact, a registry key is easier to create because the only item type in the Windows registry is a key.","pos":[2715,2819]},{"content":"(Registry entries are item <bpt id=\"p1\">*</bpt>properties<ept id=\"p1\">*</ept>.) For example, to create a key named \"<ph id=\"ph1\">\\_</ph>Test\" in the CurrentVersion subkey, type:","pos":[2820,2941]},{"content":"When typing a registry path, be sure to include the colon (<bpt id=\"p1\">**</bpt>:<ept id=\"p1\">**</ept>) in the Windows PowerShell drive names, HKLM: and HKCU:.","pos":[3272,3393]},{"content":"Without the colon, Windows PowerShell does not recognize the drive name in the path.","pos":[3394,3478]},{"content":"Why Registry Values are not Items","pos":[3484,3517]},{"pos":[3518,3657],"content":"When you use the <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>ChildItem<ept id=\"p1\">**</ept> cmdlet to find the items in a registry key, you will never see actual registry entries or their values."},{"pos":[3659,3867],"content":"For example, the registry key <bpt id=\"p1\">**</bpt>HKEY<ph id=\"ph1\">\\_</ph>LOCAL<ph id=\"ph2\">\\_</ph>MACHINE<ph id=\"ph3\">\\\\</ph>Software<ph id=\"ph4\">\\\\</ph>Microsoft<ph id=\"ph5\">\\\\</ph>Windows<ph id=\"ph6\">\\\\</ph>CurrentVersion<ph id=\"ph7\">\\\\</ph>Run<ept id=\"p1\">**</ept> usually contains several registry entries that represent applications that run when the system starts."},{"pos":[3869,4011],"content":"However, when you use <bpt id=\"p1\">**</bpt>Get<ph id=\"ph1\">\\-</ph>ChildItem<ept id=\"p1\">**</ept> to look for child items in the key, all you will see is the <bpt id=\"p2\">**</bpt>OptionalComponents<ept id=\"p2\">**</ept> subkey of the key:"},{"content":"Although it would be convenient to treat registry entries as items, you cannot specify a path to a registry entry in a way that ensures that it is unique.","pos":[4341,4495]},{"content":"The path notation does not distinguish between the registry subkey named <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> and the <bpt id=\"p2\">**</bpt>(Default)<ept id=\"p2\">**</ept> registry entry in the <bpt id=\"p3\">**</bpt>Run<ept id=\"p3\">**</ept> subkey.","pos":[4496,4636]},{"content":"Furthermore, because registry entry names can contain the backslash character (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\\\</ph><ept id=\"p1\">**</ept>), if regsitry entries were items, then you could not use the path notation to distinguish a registry entry named <bpt id=\"p2\">**</bpt>Windows<ph id=\"ph2\">\\\\</ph>CurrentVersion<ph id=\"ph3\">\\\\</ph>Run<ept id=\"p2\">**</ept> from the subkey that is located in that path.","pos":[4637,4914]},{"content":"Renaming Existing Items (Rename<ph id=\"ph1\">\\-</ph>Item)","pos":[4920,4958]},{"content":"To change the name of a file or folder, use the <bpt id=\"p1\">**</bpt>Rename<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept> cmdlet.","pos":[4959,5031]},{"content":"The following command changes the name of the <bpt id=\"p1\">**</bpt>file1.txt<ept id=\"p1\">**</ept> file to <bpt id=\"p2\">**</bpt>fileOne.txt<ept id=\"p2\">**</ept>.","pos":[5032,5116]},{"content":"The <bpt id=\"p1\">**</bpt>Rename<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept> cmdlet can change the name of a file or a folder, but it cannot move an item.","pos":[5193,5291]},{"content":"The following command fails because it attempts to move the file from the New.Directory directory to the Temp directory.","pos":[5292,5412]},{"content":"Moving Items (Move<ph id=\"ph1\">\\-</ph>Item)","pos":[5669,5694]},{"pos":[5695,5751],"content":"To move a file or folder, use the <bpt id=\"p1\">**</bpt>Move<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept> cmdlet."},{"content":"For example, the following command moves the New.Directory directory from the C:<ph id=\"ph1\">\\\\</ph>temp directory to the root of the C: drive.","pos":[5753,5878]},{"content":"To verify that the item was moved, include the <bpt id=\"p1\">**</bpt>PassThru<ept id=\"p1\">**</ept> parameter of the <bpt id=\"p2\">**</bpt>Move<ph id=\"ph1\">\\-</ph>Item<ept id=\"p2\">**</ept> cmdlet.","pos":[5879,5978]},{"content":"Without <bpt id=\"p1\">**</bpt>Passthru<ept id=\"p1\">**</ept>, the <bpt id=\"p2\">**</bpt>Move<ph id=\"ph1\">\\-</ph>Item<ept id=\"p2\">**</ept> cmdlet does not display any results.","pos":[5979,6056]},{"content":"Copying Items (Copy<ph id=\"ph1\">\\-</ph>Item)","pos":[6366,6392]},{"content":"If you are familiar with the copy operations in other shells, you might find the behavior of the <bpt id=\"p1\">**</bpt>Copy<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept> cmdlet in Windows PowerShell to be unusual.","pos":[6393,6548]},{"content":"When you copy an item from one location to another, Copy<ph id=\"ph1\">\\-</ph>Item does not copy its contents by default.","pos":[6549,6650]},{"pos":[6652,6836],"content":"For example, if you copy the <bpt id=\"p1\">**</bpt>New.Directory<ept id=\"p1\">**</ept> directory from the C: drive to the C:<ph id=\"ph1\">\\\\</ph>temp directory, the command succeeds, but the files in the New.Directory directory are not copied."},{"pos":[6905,7005],"content":"If you display the contents of <bpt id=\"p1\">**</bpt>C:<ph id=\"ph1\">\\\\</ph>temp<ph id=\"ph2\">\\\\</ph>New.Directory<ept id=\"p1\">**</ept>, you will find that it contains no files:"},{"pos":[7066,7142],"content":"Why doesn't the <bpt id=\"p1\">**</bpt>Copy<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept> cmdlet copy the contents to the new location?"},{"content":"The <bpt id=\"p1\">**</bpt>Copy<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept> cmdlet was designed to be generic; it is not just for copying files and folders.","pos":[7144,7243]},{"content":"Also, even when copying files and folders, you might want to copy only the container and not the items within it.","pos":[7244,7357]},{"content":"To copy all of the contents of a folder, include the <bpt id=\"p1\">**</bpt>Recurse<ept id=\"p1\">**</ept> parameter of the <bpt id=\"p2\">**</bpt>Copy<ph id=\"ph1\">\\-</ph>Item<ept id=\"p2\">**</ept> cmdlet in the command.","pos":[7359,7478]},{"content":"If you have already copied the directory without its contents, add the <bpt id=\"p1\">**</bpt>Force<ept id=\"p1\">**</ept> parameter, which allows you to overwrite the empty folder.","pos":[7479,7618]},{"content":"Deleting Items (Remove<ph id=\"ph1\">\\-</ph>Item)","pos":[8182,8211]},{"content":"To delete files and folders, use the <bpt id=\"p1\">**</bpt>Remove<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept> cmdlet.","pos":[8212,8273]},{"content":"Windows PowerShell cmdlets, such as <bpt id=\"p1\">**</bpt>Remove<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept>, that can make significant, irreversible changes will often prompt for confirmation when you enter its commands.","pos":[8274,8439]},{"content":"For example, if you try to remove the <bpt id=\"p1\">**</bpt>New.Directory<ept id=\"p1\">**</ept> folder, you will be prompted to confirm the command, because the folder contains files:","pos":[8440,8583]},{"content":"Because <bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept> is the default response, to delete the folder and its files, press the <bpt id=\"p2\">**</bpt>Enter<ept id=\"p2\">**</ept> key.","pos":[8914,9015]},{"content":"To remove the folder without confirming, use the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\-</ph>Recurse<ept id=\"p1\">**</ept> parameter.","pos":[9016,9089]},{"content":"Executing Items (Invoke<ph id=\"ph1\">\\-</ph>Item)","pos":[9151,9181]},{"content":"Windows PowerShell uses the <bpt id=\"p1\">**</bpt>Invoke<ph id=\"ph1\">\\-</ph>Item<ept id=\"p1\">**</ept> cmdlet to perform a default action for a file or folder.","pos":[9182,9283]},{"content":"This default action is determined by the default application handler in the registry; the effect is the same as if you double<ph id=\"ph1\">\\-</ph>click the item in File Explorer.","pos":[9284,9443]},{"content":"For example, suppose you run the following command:","pos":[9445,9496]},{"content":"An Explorer window that is located in C:<ph id=\"ph1\">\\\\</ph>Windows appears, just as if you had double<ph id=\"ph2\">\\-</ph>clicked the C:<ph id=\"ph3\">\\\\</ph>Windows folder.","pos":[9534,9651]},{"pos":[9653,9724],"content":"If you invoke the <bpt id=\"p1\">**</bpt>Boot.ini<ept id=\"p1\">**</ept> file on a system prior to Windows Vista:"},{"content":"If the .ini file type is associated with Notepad, the boot.ini file opens in Notepad.","pos":[9763,9848]}],"content":"---\ntitle:  Manipulating Items Directly\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  8cbd4867-917d-41ea-9ff0-b8e765509735\n---\n\n# Manipulating Items Directly\nThe elements that you see in Windows PowerShell drives, such as the files and folders in the file system drives, and the registry keys in the Windows PowerShell registry drives, are called *items* in Windows PowerShell. The cmdlets for working with them item have the noun **Item** in their names.\n\nThe output of the **Get\\-Command \\-Noun Item** command shows that there are nine Windows PowerShell item cmdlets.\n\n```\nPS> Get-Command -Noun Item\n\nCommandType     Name                            Definition\n-----------     ----                            ----------\nCmdlet          Clear-Item                      Clear-Item [-Path] <String[]...\nCmdlet          Copy-Item                       Copy-Item [-Path] <String[]>...\nCmdlet          Get-Item                        Get-Item [-Path] <String[]> ...\nCmdlet          Invoke-Item                     Invoke-Item [-Path] <String[...\nCmdlet          Move-Item                       Move-Item [-Path] <String[]>...\nCmdlet          New-Item                        New-Item [-Path] <String[]> ...\nCmdlet          Remove-Item                     Remove-Item [-Path] <String[...\nCmdlet          Rename-Item                     Rename-Item [-Path] <String>...\nCmdlet          Set-Item                        Set-Item [-Path] <String[]> ...\n```\n\n### Creating New Items (New\\-Item)\nTo create a new item in the file system, use the **New\\-Item** cmdlet. Include the **Path** parameter with path to the item, and the **ItemType** parameter with a value of \"file\" or \"directory\".\n\nFor example, to create a new directory named \"New.Directory\"in the C:\\\\Temp directory,  type:\n\n```\nPS> New-Item -Path c:\\temp\\New.Directory -ItemType Directory\n\n    Directory: Microsoft.Windows PowerShell.Core\\FileSystem::C:\\temp\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        2006-05-18  11:29 AM            New.Directory\n```\n\nTo create a file, change the value of the **ItemType** parameter to \"file\". For example, to create a file named \"file1.txt\" in the New.Directory directory, type:\n\n```\nPS> New-Item -Path C:\\temp\\New.Directory\\file1.txt -ItemType file\n\n    Directory: Microsoft.Windows PowerShell.Core\\FileSystem::C:\\temp\\New.Directory\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\n-a---        2006-05-18  11:44 AM          0 file1\n```\n\nYou can use the same technique to create a new registry key. In fact, a registry key is easier to create because the only item type in the Windows registry is a key. (Registry entries are item *properties*.) For example, to create a key named \"\\_Test\" in the CurrentVersion subkey, type:\n\n```\nPS> New-Item -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\_Test\n\n   Hive: Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Micros\noft\\Windows\\CurrentVersion\n\nSKC  VC Name                           Property\n---  -- ----                           --------\n  0   0 _Test                          {}\n```\n\nWhen typing a registry path, be sure to include the colon (**:**) in the Windows PowerShell drive names, HKLM: and HKCU:. Without the colon, Windows PowerShell does not recognize the drive name in the path.\n\n### Why Registry Values are not Items\nWhen you use the **Get\\-ChildItem** cmdlet to find the items in a registry key, you will never see actual registry entries or their values.\n\nFor example, the registry key **HKEY\\_LOCAL\\_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run** usually contains several registry entries that represent applications that run when the system starts.\n\nHowever, when you use **Get\\-ChildItem** to look for child items in the key, all you will see is the **OptionalComponents** subkey of the key:\n\n```\nPS> Get-ChildItem HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n   Hive: Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\Software\\Micros\noft\\Windows\\CurrentVersion\\Run\nSKC  VC Name                           Property\n---  -- ----                           --------\n  3   0 OptionalComponents             {}\n```\n\nAlthough it would be convenient to treat registry entries as items, you cannot specify a path to a registry entry in a way that ensures that it is unique. The path notation does not distinguish between the registry subkey named **Run** and the **(Default)** registry entry in the **Run** subkey. Furthermore, because registry entry names can contain the backslash character (**\\\\**), if regsitry entries were items, then you could not use the path notation to distinguish a registry entry named **Windows\\\\CurrentVersion\\\\Run** from the subkey that is located in that path.\n\n### Renaming Existing Items (Rename\\-Item)\nTo change the name of a file or folder, use the **Rename\\-Item** cmdlet. The following command changes the name of the **file1.txt** file to **fileOne.txt**.\n\n```\nPS> Rename-Item -Path C:\\temp\\New.Directory\\file1.txt fileOne.txt\n```\n\nThe **Rename\\-Item** cmdlet can change the name of a file or a folder, but it cannot move an item. The following command fails because it attempts to move the file from the New.Directory directory to the Temp directory.\n\n```\nPS> Rename-Item -Path C:\\temp\\New.Directory\\fileOne.txt c:\\temp\\fileOne.txt\nRename-Item : Cannot rename because the target specified is not a path.\nAt line:1 char:12\n+ Rename-Item  <<<< -Path C:\\temp\\New.Directory\\fileOne c:\\temp\\fileOne.txt\n```\n\n### Moving Items (Move\\-Item)\nTo move a file or folder, use the **Move\\-Item** cmdlet.\n\nFor example, the following command moves the New.Directory directory from the C:\\\\temp directory to the root of the C: drive. To verify that the item was moved, include the **PassThru** parameter of the **Move\\-Item** cmdlet. Without **Passthru**, the **Move\\-Item** cmdlet does not display any results.\n\n```\nPS> Move-Item -Path C:\\temp\\New.Directory -Destination C:\\ -PassThru\n\n    Directory: Microsoft.Windows PowerShell.Core\\FileSystem::C:\\\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        2006-05-18  12:14 PM            New.Directory\n```\n\n### Copying Items (Copy\\-Item)\nIf you are familiar with the copy operations in other shells, you might find the behavior of the **Copy\\-Item** cmdlet in Windows PowerShell to be unusual. When you copy an item from one location to another, Copy\\-Item does not copy its contents by default.\n\nFor example, if you copy the **New.Directory** directory from the C: drive to the C:\\\\temp directory, the command succeeds, but the files in the New.Directory directory are not copied.\n\n```\nPS> Copy-Item -Path C:\\New.Directory -Destination C:\\temp\n```\n\nIf you display the contents of **C:\\\\temp\\\\New.Directory**, you will find that it contains no files:\n\n```\nPS> Get-ChildItem -Path C:\\temp\\New.Directory\nPS>\n```\n\nWhy doesn't the **Copy\\-Item** cmdlet copy the contents to the new location?\n\nThe **Copy\\-Item** cmdlet was designed to be generic; it is not just for copying files and folders. Also, even when copying files and folders, you might want to copy only the container and not the items within it.\n\nTo copy all of the contents of a folder, include the **Recurse** parameter of the **Copy\\-Item** cmdlet in the command. If you have already copied the directory without its contents, add the **Force** parameter, which allows you to overwrite the empty folder.\n\n```\nPS> Copy-Item -Path C:\\New.Directory -Destination C:\\temp -Recurse -Force -Passthru\n    Directory: Microsoft.Windows PowerShell.Core\\FileSystem::C:\\temp\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----        2006-05-18   1:53 PM            New.Directory\n\n    Directory: Microsoft.Windows PowerShell.Core\\FileSystem::C:\\temp\\New.Directory\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\n-a---        2006-05-18  11:44 AM          0 file1\n```\n\n### Deleting Items (Remove\\-Item)\nTo delete files and folders, use the **Remove\\-Item** cmdlet. Windows PowerShell cmdlets, such as **Remove\\-Item**, that can make significant, irreversible changes will often prompt for confirmation when you enter its commands. For example, if you try to remove the **New.Directory** folder, you will be prompted to confirm the command, because the folder contains files:\n\n```\nPS> Remove-Item C:\\New.Directory\n\nConfirm\nThe item at C:\\temp\\New.Directory has children and the -recurse parameter was not\nspecified. If you continue, all children will be removed with the item. Are you\n sure you want to continue?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help\n(default is \"Y\"):\n```\n\nBecause **Yes** is the default response, to delete the folder and its files, press the **Enter** key. To remove the folder without confirming, use the **\\-Recurse** parameter.\n\n```\nPS> Remove-Item C:\\temp\\New.Directory -Recurse\n```\n\n### Executing Items (Invoke\\-Item)\nWindows PowerShell uses the **Invoke\\-Item** cmdlet to perform a default action for a file or folder. This default action is determined by the default application handler in the registry; the effect is the same as if you double\\-click the item in File Explorer.\n\nFor example, suppose you run the following command:\n\n```\nPS> Invoke-Item C:\\WINDOWS\n```\n\nAn Explorer window that is located in C:\\\\Windows appears, just as if you had double\\-clicked the C:\\\\Windows folder.\n\nIf you invoke the **Boot.ini** file on a system prior to Windows Vista:\n\n```\nPS> Invoke-Item C:\\boot.ini\n```\n\nIf the .ini file type is associated with Notepad, the boot.ini file opens in Notepad.\n\n"}
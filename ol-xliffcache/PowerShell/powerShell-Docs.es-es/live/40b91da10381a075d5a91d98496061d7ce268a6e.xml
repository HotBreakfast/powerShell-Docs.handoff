{
  "nodes": [
    {
      "content": "Using a DSC report server",
      "pos": [
        2,
        27
      ]
    },
    {
      "content": "Applies To: Windows PowerShell 5.0",
      "pos": [
        31,
        65
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> The report server described in this topic is not availalbe in PowerShell 4.0.",
      "pos": [
        68,
        155
      ]
    },
    {
      "content": "For reporting in PowerShell 4.0, see Using a DSC compliance server.",
      "pos": [
        156,
        223
      ]
    },
    {
      "content": "The Local Configuration Manager (LCM) of a node can be configured to send reports about its configuration status to a pull server, which can then be queried to retrieve that data.",
      "pos": [
        225,
        404
      ]
    },
    {
      "content": "Each time the node checks and applies",
      "pos": [
        405,
        442
      ]
    },
    {
      "content": "a configuration, it sends a report to the report server.",
      "pos": [
        443,
        499
      ]
    },
    {
      "content": "These reports are stored in a database on the server, and can be retrieved by calling the reporting web service.",
      "pos": [
        500,
        612
      ]
    },
    {
      "content": "Each report contains",
      "pos": [
        613,
        633
      ]
    },
    {
      "content": "information such as what configurations were applied and whether they succeeded, the resources used, any errors that were thrown, and start and finish times.",
      "pos": [
        634,
        791
      ]
    },
    {
      "content": "Configuring a node to send reports",
      "pos": [
        796,
        830
      ]
    },
    {
      "content": "You tell a node to send reports to a server by using a <bpt id=\"p1\">**</bpt>ReportServerWeb<ept id=\"p1\">**</ept> block in the node's LCM configuration (for information about configuring the LCM,",
      "pos": [
        832,
        988
      ]
    },
    {
      "content": "see <bpt id=\"p1\">[</bpt>Configuring the Local Configuration Manager<ept id=\"p1\">](metaConfig.md)</ept>).",
      "pos": [
        989,
        1055
      ]
    },
    {
      "content": "The server to which the node sends reports must be set up as a web pull server (you cannot send reports",
      "pos": [
        1056,
        1159
      ]
    },
    {
      "content": "to an SMB share).",
      "pos": [
        1160,
        1177
      ]
    },
    {
      "content": "For information about setting up a pull server, see <bpt id=\"p1\">[</bpt>Setting up a DSC web pull server<ept id=\"p1\">](pullServer.md)</ept>.",
      "pos": [
        1178,
        1280
      ]
    },
    {
      "content": "The report server can be the same service from which",
      "pos": [
        1281,
        1333
      ]
    },
    {
      "content": "the node pulls configurations and gets resources, or it can be a different service.",
      "pos": [
        1334,
        1417
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>ReportServerWeb<ept id=\"p1\">**</ept> block, you specify the URL of the pull service",
      "pos": [
        1420,
        1493
      ]
    },
    {
      "content": "and a registration key that is known to the server.",
      "pos": [
        1494,
        1545
      ]
    },
    {
      "content": "The following configuration configures a node to pull configurations from one service, and send reports",
      "pos": [
        1548,
        1651
      ]
    },
    {
      "content": "to a service on a different server.",
      "pos": [
        1652,
        1687
      ]
    },
    {
      "content": "The following configuration configures a node to use a single server for configurations, resources, and reporting.",
      "pos": [
        2538,
        2652
      ]
    },
    {
      "pos": [
        3312,
        3459
      ],
      "content": "<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> You can name the web service whatever you want when you set up a pull server, but the <bpt id=\"p2\">**</bpt>ServerURL<ept id=\"p2\">**</ept> property must match the service name."
    },
    {
      "content": "Getting report data",
      "pos": [
        3464,
        3483
      ]
    },
    {
      "content": "Reports sent to the pull server are entered into a database on the server.",
      "pos": [
        3485,
        3559
      ]
    },
    {
      "content": "The reports are available through calls to the web service.",
      "pos": [
        3560,
        3619
      ]
    },
    {
      "content": "To retrieve reports for a specific node,",
      "pos": [
        3620,
        3660
      ]
    },
    {
      "content": "send an HTTP request to the report web service in the following form:",
      "pos": [
        3662,
        3731
      ]
    },
    {
      "content": "where <ph id=\"ph1\">`MyNodeAgentId`</ph> is the AgentId of the node for which you want to get reports.",
      "pos": [
        3823,
        3906
      ]
    },
    {
      "content": "You can get the AgentID for a node by calling <bpt id=\"p1\">[</bpt>Get-DscLocalConfigurationManager<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn407378.aspx)</ept>",
      "pos": [
        3907,
        4046
      ]
    },
    {
      "content": "on that node.",
      "pos": [
        4047,
        4060
      ]
    },
    {
      "content": "The reports are returned as an array of JSON objects.",
      "pos": [
        4062,
        4115
      ]
    },
    {
      "content": "The following script returns the reports for the node on which it is run:",
      "pos": [
        4117,
        4190
      ]
    },
    {
      "content": "Viewing report data",
      "pos": [
        4786,
        4805
      ]
    },
    {
      "pos": [
        4807,
        4953
      ],
      "content": "If you set a variable to the result of the <bpt id=\"p1\">**</bpt>GetReport<ept id=\"p1\">**</ept> function, you can view the individual fields in an element of the array that is returned:"
    },
    {
      "content": "Notice that the <bpt id=\"p1\">**</bpt>StatusData<ept id=\"p1\">**</ept> field is an object with three properties: <bpt id=\"p2\">**</bpt>NumberOfResources<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Locale<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>ResourcesInDesiredState<ept id=\"p4\">**</ept>.",
      "pos": [
        6049,
        6189
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ResourcesInDesiredState<ept id=\"p1\">**</ept>",
      "pos": [
        6190,
        6221
      ]
    },
    {
      "content": "property is an array of objects that each have a number of properties.",
      "pos": [
        6222,
        6292
      ]
    },
    {
      "content": "The following script takes a single report as a parameter, iterates through its <bpt id=\"p1\">**</bpt>ResourcesInDesiredState<ept id=\"p1\">**</ept>",
      "pos": [
        6293,
        6400
      ]
    },
    {
      "content": "array, and writes them to the console:",
      "pos": [
        6401,
        6439
      ]
    },
    {
      "pos": [
        7042,
        7111
      ],
      "content": "Here is a sample output after calling the <bpt id=\"p1\">**</bpt>GetStatusData<ept id=\"p1\">**</ept> function:"
    },
    {
      "content": "Note that these examples are meant to give you an idea of what you can do with report data.",
      "pos": [
        7644,
        7735
      ]
    },
    {
      "content": "For an introduction on working with JSON in PowerShell, see",
      "pos": [
        7736,
        7795
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Playing with JSON and PowerShell<ept id=\"p1\">](https://blogs.technet.microsoft.com/heyscriptingguy/2015/10/08/playing-with-json-and-powershell/)</ept>.",
      "pos": [
        7796,
        7929
      ]
    },
    {
      "content": "See Also",
      "pos": [
        7934,
        7942
      ]
    },
    {
      "pos": [
        7944,
        8135
      ],
      "content": "[Configuring the Local Configuration Manager](metaConfig.md)\n[Setting up a DSC web pull server](pullServer.md)\n[Setting up a pull client using configuration names](pullClientConfigNames.md)",
      "leadings": [
        "",
        ">",
        ">"
      ],
      "nodes": [
        {
          "content": "Configuring the Local Configuration Manager",
          "pos": [
            1,
            44
          ]
        },
        {
          "content": "Setting up a DSC web pull server",
          "pos": [
            62,
            94
          ]
        },
        {
          "content": "Setting up a pull client using configuration names",
          "pos": [
            112,
            162
          ]
        }
      ]
    }
  ],
  "content": "# Using a DSC report server\n\n> Applies To: Windows PowerShell 5.0\n\n>**Note:** The report server described in this topic is not availalbe in PowerShell 4.0. For reporting in PowerShell 4.0, see Using a DSC compliance server.\n\nThe Local Configuration Manager (LCM) of a node can be configured to send reports about its configuration status to a pull server, which can then be queried to retrieve that data. Each time the node checks and applies\na configuration, it sends a report to the report server. These reports are stored in a database on the server, and can be retrieved by calling the reporting web service. Each report contains\ninformation such as what configurations were applied and whether they succeeded, the resources used, any errors that were thrown, and start and finish times.\n\n## Configuring a node to send reports\n\nYou tell a node to send reports to a server by using a **ReportServerWeb** block in the node's LCM configuration (for information about configuring the LCM,\nsee [Configuring the Local Configuration Manager](metaConfig.md)). The server to which the node sends reports must be set up as a web pull server (you cannot send reports\nto an SMB share). For information about setting up a pull server, see [Setting up a DSC web pull server](pullServer.md). The report server can be the same service from which\nthe node pulls configurations and gets resources, or it can be a different service.\n \nIn the **ReportServerWeb** block, you specify the URL of the pull service\nand a registration key that is known to the server.\n \nThe following configuration configures a node to pull configurations from one service, and send reports\nto a service on a different server. \n \n```powershell\n[DSCLocalConfigurationManager()]\nconfiguration ReportClientConfig\n{\n    Node localhost\n    {\n        Settings\n        {\n            RefreshMode          = 'Pull'\n            RefreshFrequencyMins = 30 \n            RebootNodeIfNeeded   = $true\n        }\n\n        ConfigurationRepositoryWeb CONTOSO-PullSrv\n        {\n            ServerURL          = 'https://CONTOSO-PULL:8080/PSDSCPullServer.svc'\n            RegistrationKey    = 'bbb9778f-43f2-47de-b61e-a0daff474c6d'\n            ConfigurationNames = @('ClientConfig')\n        }\n\n        ReportServerWeb CONTOSO-ReportSrv\n        {\n            ServerURL               = 'http://CONTOSO-REPORT:8080/PSDSCReportServer.svc'\n            RegistrationKey         = 'ba39daaa-96c5-4f2f-9149-f95c46460faa'\n            AllowUnsecureConnection = $true\n        }\n    }\n}\nPullClientConfigID\n```\n\nThe following configuration configures a node to use a single server for configurations, resources, and reporting.\n\n```powershell\n[DSCLocalConfigurationManager()]\nconfiguration PullClientConfigID\n{\n    Node localhost\n    {\n        Settings\n        {\n            RefreshMode = 'Pull'\n            RefreshFrequencyMins = 30 \n            RebootNodeIfNeeded = $true\n        }\n\n        ConfigurationRepositoryWeb CONTOSO-PullSrv\n        {\n            ServerURL = 'https://CONTOSO-PullSrv:8080/PSDSCPullServer.svc'\n            RegistrationKey = 'fbc6ef09-ad98-4aad-a062-92b0e0327562'\n        }\n        \n        \n\n        ReportServerWeb CONTOSO-PullSrv\n        {\n            ServerURL = 'https://CONTOSO-PullSrv:8080/PSDSCPullServer.svc'\n        }\n    }\n}\nPullClientConfigID\n```\n\n>**Note:** You can name the web service whatever you want when you set up a pull server, but the **ServerURL** property must match the service name.\n\n## Getting report data\n\nReports sent to the pull server are entered into a database on the server. The reports are available through calls to the web service. To retrieve reports for a specific node, \nsend an HTTP request to the report web service in the following form:\n`http://CONTOSO-REPORT:8080/PSDSCReportServer.svc/Nodes(AgentID = MyNodeAgentId)/Reports` \nwhere `MyNodeAgentId` is the AgentId of the node for which you want to get reports. You can get the AgentID for a node by calling [Get-DscLocalConfigurationManager](https://technet.microsoft.com/en-us/library/dn407378.aspx)\non that node.\n\nThe reports are returned as an array of JSON objects.\n\nThe following script returns the reports for the node on which it is run:\n\n```powershell\nfunction GetReport\n{\n    param($AgentId = \"$((glcm).AgentId)\", $serviceURL = \"http://CONTOSO-REPORT:8080/PSDSCReportServer.svc\")\n    $requestUri = \"$serviceURL/Nodes(AgentId= '$AgentId')/Reports\"\n    $request = Invoke-WebRequest -Uri $requestUri  -ContentType \"application/json;odata=minimalmetadata;streaming=true;charset=utf-8\" `\n               -UseBasicParsing -Headers @{Accept = \"application/json\";ProtocolVersion = \"2.0\"} `\n               -ErrorAction SilentlyContinue -ErrorVariable ev\n    $object = ConvertFrom-Json $request.content\n    return $object.value\n}\n```\n    \n## Viewing report data\n\nIf you set a variable to the result of the **GetReport** function, you can view the individual fields in an element of the array that is returned:\n\n```powershell\n$reports = GetReport\n$reports[1]\n\nJobId                : 71515ae8-7294-40a3-8137-fc85bf4b678f\nOperationType        : Consistency\nRefreshMode          : \nStatus               : \nReportFormatVersion  : 1.0\nConfigurationVersion : 2.0.0\nStartTime            : 02/08/2016 01:28:54\nEndTime              : 02/08/2016 01:28:57\nRebootRequested      : False\nErrors               : {}\nStatusData           : {{\"NumberOfResources\":\"2\",\"Locale\":\"en-US\",\"ResourcesInDesiredState\":[{\"ResourceId\":\"[WindowsFeature]MyFeatureInstance\",\"SourceI\n                       nfo\":\"C:\\\\ReportTest\\\\ClientConfig.ps1::4::9::WindowsFeature\",\"ModuleName\":\"PsDesiredStateConfiguration\",\"ModuleVersion\":\"1.0\",\"\n                       ConfigurationName\":\"ClientConfig\",\"ResourceName\":\"WindowsFeature\"},{\"ResourceId\":\"[WindowsFeature]My2ndFeatureInstance\",\"SourceI\n                       nfo\":\"C:\\\\ReportTest\\\\ClientConfig.ps1::8::9::WindowsFeature\",\"ModuleName\":\"PsDesiredStateConfiguration\",\"ModuleVersion\":\"1.0\",\"\n                       ConfigurationName\":\"ClientConfig\",\"ResourceName\":\"WindowsFeature\"}]}}\n```\n\nNotice that the **StatusData** field is an object with three properties: **NumberOfResources**, **Locale**, and **ResourcesInDesiredState**. The **ResourcesInDesiredState**\nproperty is an array of objects that each have a number of properties. The following script takes a single report as a parameter, iterates through its **ResourcesInDesiredState**\narray, and writes them to the console:\n \n```powershell\nfunction GetStatusData\n{\n    param ($Report)\n    $statusData = $Report.StatusData | ConvertFrom-Json\n\n    $Resources = $statusData.ResourcesInDesiredState\n\n    Foreach ($Resource in $Resources)\n    {\n        Write-Host 'ResourceId: ' $Resource.ResourceId\n        Write-Host 'SourceInfo: ' $Resource.SourceInfo\n        Write-Host 'ModuleName: ' $Resource.ModuleName\n        Write-Host 'ModuleVersion: ' $Resource.ModuleVersion\n        Write-Host 'ConfigurationName: ' $Resource.ConfigurationName\n        Write-Host 'ResourceName: ' $Resource.ResourceName\n        Write-Host\n    }\n}\n```\n\nHere is a sample output after calling the **GetStatusData** function:\n\n```powershell\nGetStatusData -Report $report[1]\n\nResourceId:  [WindowsFeature]MyFeatureInstance\nSourceInfo:  C:\\ReportTest\\ClientConfig.ps1::4::9::WindowsFeature\nModuleName:  PsDesiredStateConfiguration\nModuleVersion:  1.0\nConfigurationName:  ClientConfig\nResourceName:  WindowsFeature\n\nResourceId:  [WindowsFeature]My2ndFeatureInstance\nSourceInfo:  C:\\ReportTest\\ClientConfig.ps1::8::9::WindowsFeature\nModuleName:  PsDesiredStateConfiguration\nModuleVersion:  1.0\nConfigurationName:  ClientConfig\nResourceName:  WindowsFeature\n```\n\nNote that these examples are meant to give you an idea of what you can do with report data. For an introduction on working with JSON in PowerShell, see\n[Playing with JSON and PowerShell](https://blogs.technet.microsoft.com/heyscriptingguy/2015/10/08/playing-with-json-and-powershell/).\n\n## See Also\n>[Configuring the Local Configuration Manager](metaConfig.md)\n>[Setting up a DSC web pull server](pullServer.md)\n>[Setting up a pull client using configuration names](pullClientConfigNames.md)\n"
}